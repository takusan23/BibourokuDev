{
    "meta": {
        "version": 1,
        "warehouse": "3.0.2"
    },
    "models": {
        "Asset": [
            {
                "_id": "themes/material-indigo/source/css/style.less",
                "path": "css/style.less",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/img/alipay.jpg",
                "path": "img/alipay.jpg",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/img/avatar.jpg",
                "path": "img/avatar.jpg",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/img/brand.jpg",
                "path": "img/brand.jpg",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/img/cc.png",
                "path": "img/cc.png",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/img/favicon.ico",
                "path": "img/favicon.ico",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/img/img-err.png",
                "path": "img/img-err.png",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/img/img-loading.png",
                "path": "img/img-loading.png",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/img/wechat.jpg",
                "path": "img/wechat.jpg",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/js/main.js",
                "path": "js/main.js",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/js/main.min.js",
                "path": "js/main.min.js",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/js/search.js",
                "path": "js/search.js",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/js/search.min.js",
                "path": "js/search.min.js",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Bold.eot",
                "path": "css/fonts/roboto/Roboto-Bold.eot",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Bold.woff2",
                "path": "css/fonts/roboto/Roboto-Bold.woff2",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Light.eot",
                "path": "css/fonts/roboto/Roboto-Light.eot",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Light.woff",
                "path": "css/fonts/roboto/Roboto-Light.woff",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Light.woff2",
                "path": "css/fonts/roboto/Roboto-Light.woff2",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Medium.eot",
                "path": "css/fonts/roboto/Roboto-Medium.eot",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Medium.woff2",
                "path": "css/fonts/roboto/Roboto-Medium.woff2",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Regular.eot",
                "path": "css/fonts/roboto/Roboto-Regular.eot",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Regular.woff",
                "path": "css/fonts/roboto/Roboto-Regular.woff",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Regular.woff2",
                "path": "css/fonts/roboto/Roboto-Regular.woff2",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Thin.eot",
                "path": "css/fonts/roboto/Roboto-Thin.eot",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Thin.woff",
                "path": "css/fonts/roboto/Roboto-Thin.woff",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Thin.woff2",
                "path": "css/fonts/roboto/Roboto-Thin.woff2",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff",
                "path": "css/fonts/fontawesome/fontawesome-webfont.woff",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2",
                "path": "css/fonts/fontawesome/fontawesome-webfont.woff2",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Bold.woff",
                "path": "css/fonts/roboto/Roboto-Bold.woff",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Medium.woff",
                "path": "css/fonts/roboto/Roboto-Medium.woff",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Thin.ttf",
                "path": "css/fonts/roboto/Roboto-Thin.ttf",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/css/animation.css",
                "path": "css/fonts/custom/css/animation.css",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/css/custom-codes.css",
                "path": "css/fonts/custom/css/custom-codes.css",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/css/custom-embedded.css",
                "path": "css/fonts/custom/css/custom-embedded.css",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/css/custom-ie7-codes.css",
                "path": "css/fonts/custom/css/custom-ie7-codes.css",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/css/custom-ie7.css",
                "path": "css/fonts/custom/css/custom-ie7.css",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/css/custom.css",
                "path": "css/fonts/custom/css/custom.css",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/font/custom.svg",
                "path": "css/fonts/custom/font/custom.svg",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/font/custom.eot",
                "path": "css/fonts/custom/font/custom.eot",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/font/custom.ttf",
                "path": "css/fonts/custom/font/custom.ttf",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/font/custom.woff",
                "path": "css/fonts/custom/font/custom.woff",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/font/custom.woff2",
                "path": "css/fonts/custom/font/custom.woff2",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/fontawesome/FontAwesome.otf",
                "path": "css/fonts/fontawesome/FontAwesome.otf",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf",
                "path": "css/fonts/fontawesome/fontawesome-webfont.ttf",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Bold.ttf",
                "path": "css/fonts/roboto/Roboto-Bold.ttf",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Light.ttf",
                "path": "css/fonts/roboto/Roboto-Light.ttf",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Medium.ttf",
                "path": "css/fonts/roboto/Roboto-Medium.ttf",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Regular.ttf",
                "path": "css/fonts/roboto/Roboto-Regular.ttf",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot",
                "path": "css/fonts/fontawesome/fontawesome-webfont.eot",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/img/avatar.gif",
                "path": "img/avatar.gif",
                "modified": 1,
                "renderable": 1
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg",
                "path": "css/fonts/fontawesome/fontawesome-webfont.svg",
                "modified": 1,
                "renderable": 1
            }
        ],
        "Cache": [
            {
                "_id": "themes/material-indigo/.editorconfig",
                "hash": "67a03b88eadd7810f2e01866e73814074ecd3b87",
                "modified": 1586102918408
            },
            {
                "_id": "themes/material-indigo/LICENSE",
                "hash": "9dd0f70bc72c9d575447655526aded395bb93754",
                "modified": 1586102918408
            },
            {
                "_id": "themes/material-indigo/README.ja.md",
                "hash": "b4f14a09fece39c987daf26f744020ce60a41f69",
                "modified": 1586102918409
            },
            {
                "_id": "themes/material-indigo/README.md",
                "hash": "0ffd9db4d8c2ecd89867a9fc6b0f7c354b79aa53",
                "modified": 1586102918410
            },
            {
                "_id": "themes/material-indigo/README.md_old",
                "hash": "cfc7d09fc2ce26003954d647e3bbf98f71574eb7",
                "modified": 1586102918411
            },
            {
                "_id": "themes/material-indigo/_config.yml",
                "hash": "767aca4762305f806ef8feea6319ca077d6e06f1",
                "modified": 1586105254428
            },
            {
                "_id": "themes/material-indigo/package.json",
                "hash": "3ad9b9ccb1ddaad3136f179a7ebff7d7b1c193f7",
                "modified": 1586102918434
            },
            {
                "_id": "source/_posts/Android11とか.md",
                "hash": "06b310a917458d40f01d14e6acd37c6bc3e49611",
                "modified": 1586104035587
            },
            {
                "_id": "source/_posts/ARCore.md",
                "hash": "61a84be101ae7c4ade3070243c1fc83e13da1ef8",
                "modified": 1586104752524
            },
            {
                "_id": "source/_posts/Androidで気圧計.md",
                "hash": "d509bbded939f13ca917feca9b0f79eb22bd0b52",
                "modified": 1586104664880
            },
            {
                "_id": "source/_posts/Androidのノッチ領域に侵略.md",
                "hash": "570f5ee02ff5219aa4dfa43a85fe4625082ba399",
                "modified": 1586104713441
            },
            {
                "_id": "source/_posts/Electron Builder.md",
                "hash": "716cee9414b43ab54b9e2a15d4bb1c405ce2fe72",
                "modified": 1586104764716
            },
            {
                "_id": "source/_posts/Electron TypeScript.md",
                "hash": "c3d769895a5fd769b898dc546597546dfbf1d873",
                "modified": 1586104785180
            },
            {
                "_id": "source/_posts/MaterialDesign.md",
                "hash": "56cf227f9ecd3a994ce4b327096f745bd8ce79f8",
                "modified": 1586104802099
            },
            {
                "_id": "source/_posts/MediaProjection.md",
                "hash": "710d09f0868822b80c8228664a83461040134144",
                "modified": 1586104839228
            },
            {
                "_id": "source/_posts/NavigationDrawer.md",
                "hash": "6f12ed85b7bfaf459f0b5319e8d4a7b0c02557c7",
                "modified": 1586104859277
            },
            {
                "_id": "source/_posts/hello.md",
                "hash": "664dff15e2d9fbfa004a0dd200f5b7500adadbb8",
                "modified": 1586103850395
            },
            {
                "_id": "source/_posts/hello-world.md",
                "hash": "acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb",
                "modified": 1586095365840
            },
            {
                "_id": "source/_posts/はじめて.md",
                "hash": "2a18250200221ef55140dea63521525f77002eb9",
                "modified": 1586104035486
            },
            {
                "_id": "themes/material-indigo/languages/en.yml",
                "hash": "d0c383abbb4280d572dad80acd08c6ef1b69f5ae",
                "modified": 1586103271224
            },
            {
                "_id": "themes/material-indigo/languages/nl-NL",
                "hash": "56472caf0c12c6031bd7e85e5a436f09838cc63b",
                "modified": 1586103274969
            },
            {
                "_id": "themes/material-indigo/languages/ja.yml",
                "hash": "ab38abc97fb17f8786a8cd32b422e73137f378e9",
                "modified": 1586103236361
            },
            {
                "_id": "themes/material-indigo/languages/zh-CN.yml",
                "hash": "f0554d80e2b4006dea52280e0673cf6ce046f094",
                "modified": 1586103279578
            },
            {
                "_id": "themes/material-indigo/languages/zh-TW.yml",
                "hash": "31a5f5671e42d730fea8e368ae8b9b3addd7e074",
                "modified": 1586103283994
            },
            {
                "_id": "themes/material-indigo/layout/archive.ejs",
                "hash": "c411d4fc1e0544ade979f344d4aeeb3ad3115519",
                "modified": 1586103527910
            },
            {
                "_id": "themes/material-indigo/layout/categories.ejs",
                "hash": "efae06b4d83aaf73ab93260381e891825bf404ac",
                "modified": 1586102918432
            },
            {
                "_id": "themes/material-indigo/layout/category.ejs",
                "hash": "e5ba5cc2e092c199285b8097ef12ffe70bf84c91",
                "modified": 1586102918432
            },
            {
                "_id": "themes/material-indigo/layout/index.ejs",
                "hash": "772c1985c7743e101598b4eddc253f9174c5605b",
                "modified": 1586102918432
            },
            {
                "_id": "themes/material-indigo/layout/layout.ejs",
                "hash": "770af84fff104c398ce8b6c995130cddd3e9a1e9",
                "modified": 1586103179468
            },
            {
                "_id": "themes/material-indigo/layout/page.ejs",
                "hash": "567c42b978da4c39b8b4982df19b940c26bc32a4",
                "modified": 1586102918433
            },
            {
                "_id": "themes/material-indigo/layout/post.ejs",
                "hash": "efc3352828351f8574c51e8a93dc56c66660c3b1",
                "modified": 1586102918433
            },
            {
                "_id": "themes/material-indigo/layout/tag.ejs",
                "hash": "90a231dea3a364b329a740e5d6c49c8cf5664fe9",
                "modified": 1586102918434
            },
            {
                "_id": "themes/material-indigo/layout/tags.ejs",
                "hash": "1fc0461e9602b53899ec756e4361beb8cce74740",
                "modified": 1586102918434
            },
            {
                "_id": "themes/material-indigo/scripts/plugins.js",
                "hash": "00ea278ea77733f546439aed507ce69a298da362",
                "modified": 1586102918435
            },
            {
                "_id": "themes/material-indigo/layout/_partial/footer.ejs",
                "hash": "1fecb0f073c4baee08dd2cd8f897b5043991cf26",
                "modified": 1586103318666
            },
            {
                "_id": "themes/material-indigo/layout/_partial/archive.ejs",
                "hash": "c294c98617ce14082f9b3d5eec83328f480f5597",
                "modified": 1586102918414
            },
            {
                "_id": "themes/material-indigo/layout/_partial/head.ejs",
                "hash": "3e25240d7639a69032dd4ecccb7758b2a4c6f169",
                "modified": 1586102971773
            },
            {
                "_id": "themes/material-indigo/layout/_partial/after-footer.ejs",
                "hash": "1351dbfca311f0d50a939f9e1a91c4f65bbcdf5f",
                "modified": 1586102918414
            },
            {
                "_id": "themes/material-indigo/layout/_partial/header.ejs",
                "hash": "648db446567a81371b8a29d719d13636aa157012",
                "modified": 1586102918415
            },
            {
                "_id": "themes/material-indigo/layout/_partial/index-item.ejs",
                "hash": "7208d4083ee3355aa969972a2ce249a67d56b3a6",
                "modified": 1586102918416
            },
            {
                "_id": "themes/material-indigo/layout/_partial/loading.ejs",
                "hash": "8b3e037dd5f3d4564012689c5cd6f63caf73df0f",
                "modified": 1586102918416
            },
            {
                "_id": "themes/material-indigo/layout/_partial/menu.ejs",
                "hash": "ea6aded24a68de0914f24b3760f766b5e1c9835a",
                "modified": 1586102918417
            },
            {
                "_id": "themes/material-indigo/layout/_partial/paginator.ejs",
                "hash": "f26442085082f376231a2ff016218b5b2aa45481",
                "modified": 1586104954189
            },
            {
                "_id": "themes/material-indigo/layout/_partial/post.ejs",
                "hash": "20597ac0d547aea37680ecf195eb129fe5ee19d8",
                "modified": 1586102918422
            },
            {
                "_id": "themes/material-indigo/layout/_partial/script.ejs",
                "hash": "b28106b35a9fc63eefa69c2ca8b923eb1f731832",
                "modified": 1586102918430
            },
            {
                "_id": "themes/material-indigo/layout/_partial/search.ejs",
                "hash": "752109904304fdb8e988ee1254df2af9c0701466",
                "modified": 1586102918431
            },
            {
                "_id": "themes/material-indigo/layout/_partial/tags-bar.ejs",
                "hash": "5e6ce0af855c18028ad0f142a1566ca1a2b275bf",
                "modified": 1586343698192
            },
            {
                "_id": "themes/material-indigo/source/css/style.less",
                "hash": "cf362925ae099b810fd5763e6b724b823612ed15",
                "modified": 1586102918478
            },
            {
                "_id": "themes/material-indigo/source/img/alipay.jpg",
                "hash": "6054d9ed2ca7cd1f645b729e05632134467d4daa",
                "modified": 1586102918479
            },
            {
                "_id": "themes/material-indigo/source/img/avatar.jpg",
                "hash": "62a4893b1a32e997dcdb6e467b10559df75221e2",
                "modified": 1586102918479
            },
            {
                "_id": "themes/material-indigo/source/img/brand.jpg",
                "hash": "0e237f1b433851c156e1f1cdaeb044054b3b9879",
                "modified": 1586102918480
            },
            {
                "_id": "themes/material-indigo/source/img/cc.png",
                "hash": "ebce75a62b40976a72d43f0bd937d859ac24d87c",
                "modified": 1586102918481
            },
            {
                "_id": "themes/material-indigo/source/img/favicon.ico",
                "hash": "96170a8ae970d671a681469fd0511c15f3bc0af1",
                "modified": 1586103120073
            },
            {
                "_id": "themes/material-indigo/source/img/img-err.png",
                "hash": "23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b",
                "modified": 1586102918481
            },
            {
                "_id": "themes/material-indigo/source/img/img-loading.png",
                "hash": "a9cd5cd11866824f31e3d1c5e23badfeb3f73031",
                "modified": 1586102918482
            },
            {
                "_id": "themes/material-indigo/source/img/wechat.jpg",
                "hash": "ef069cc9e80c7553fd60589b0727bbbf8c6de372",
                "modified": 1586102918482
            },
            {
                "_id": "themes/material-indigo/source/js/main.js",
                "hash": "ff44bb7b2f1f08757093fd6ffa92c9ac2b674109",
                "modified": 1586102918483
            },
            {
                "_id": "themes/material-indigo/source/js/main.min.js",
                "hash": "e77a89fe5a9827ac590a288778176b233dd900ad",
                "modified": 1586102918483
            },
            {
                "_id": "themes/material-indigo/source/js/search.js",
                "hash": "a4d6c9c566ec1ca71ddacfd14c58f7ddaf9db24d",
                "modified": 1586102918484
            },
            {
                "_id": "themes/material-indigo/source/js/search.min.js",
                "hash": "a8a450bb8b1ca9ad577052addcbd3393f1af6c6a",
                "modified": 1586102918484
            },
            {
                "_id": "themes/material-indigo/layout/_partial/plugins/baidu.ejs",
                "hash": "da1355eea131952031e54c45560555e6d3aa5a33",
                "modified": 1586102918417
            },
            {
                "_id": "themes/material-indigo/layout/_partial/plugins/disqus.ejs",
                "hash": "86fe837ab16cb60754b0a73bb9efa38b04f3023f",
                "modified": 1586102918418
            },
            {
                "_id": "themes/material-indigo/layout/_partial/plugins/dynamic-title.ejs",
                "hash": "3b877868c4a6fc217ea6f3314544830280a77472",
                "modified": 1586102918418
            },
            {
                "_id": "themes/material-indigo/layout/_partial/plugins/gitalk.ejs",
                "hash": "8a0c390ed475600c627bcfa41df15a54f60eca3c",
                "modified": 1586102918418
            },
            {
                "_id": "themes/material-indigo/layout/_partial/plugins/gitment.ejs",
                "hash": "5f6ceb7f4b9b579e8e3f87894447f556a53f9385",
                "modified": 1586102918419
            },
            {
                "_id": "themes/material-indigo/layout/_partial/plugins/google-analytics.ejs",
                "hash": "b5b87761751a897949e085a8f1ace78b0b8babd5",
                "modified": 1586102918419
            },
            {
                "_id": "themes/material-indigo/layout/_partial/plugins/mathjax.ejs",
                "hash": "b891d647797a24aed5ceb095cb0f30f5759f02e2",
                "modified": 1586102918420
            },
            {
                "_id": "themes/material-indigo/layout/_partial/plugins/hyper-comments.ejs",
                "hash": "d0e6f1d713e7a1c0cc5fe25f3e574a4b791f938a",
                "modified": 1586102918419
            },
            {
                "_id": "themes/material-indigo/layout/_partial/plugins/page-visit.ejs",
                "hash": "2e72907b7ab280bbc0ae6a04f00c80d46904e481",
                "modified": 1586103797416
            },
            {
                "_id": "themes/material-indigo/layout/_partial/plugins/site-visit.ejs",
                "hash": "a2c247c2e32016563dd6a22c21474072d93f4dbd",
                "modified": 1586103203521
            },
            {
                "_id": "themes/material-indigo/layout/_partial/plugins/tajs.ejs",
                "hash": "ef9c77d8c6e004b014c83c5f9333e7174f8bafa3",
                "modified": 1586102918421
            },
            {
                "_id": "themes/material-indigo/layout/_partial/plugins/uyan.ejs",
                "hash": "ddf290e90dc1c779f42a48e1bd852ca932148dfb",
                "modified": 1586102918421
            },
            {
                "_id": "themes/material-indigo/layout/_partial/plugins/valine.ejs",
                "hash": "0a6245da90d54177441d32a6f1766b4f434660db",
                "modified": 1586102918421
            },
            {
                "_id": "themes/material-indigo/layout/_partial/post/category.ejs",
                "hash": "c08e44cbd7315dec7afb6054b04d3c7b82c3bde8",
                "modified": 1586102918422
            },
            {
                "_id": "themes/material-indigo/layout/_partial/post/comment.ejs",
                "hash": "2751d0f694f72bb886664ace021d698ea0e8f0c7",
                "modified": 1586102918423
            },
            {
                "_id": "themes/material-indigo/layout/_partial/post/copyright.ejs",
                "hash": "dd1dcc7776021ab3d68065f8532efead4c2b8051",
                "modified": 1586102918423
            },
            {
                "_id": "themes/material-indigo/layout/_partial/post/date.ejs",
                "hash": "c5adcec8db1506c378d39855a697e1bb1165646c",
                "modified": 1586102918424
            },
            {
                "_id": "themes/material-indigo/layout/_partial/post/head-meta.ejs",
                "hash": "f137c126672769e9571be2bb0a70ea8dda644b0e",
                "modified": 1586102918425
            },
            {
                "_id": "themes/material-indigo/layout/_partial/post/nav.ejs",
                "hash": "03719097851575a2c1bb95774058b224f6402a1f",
                "modified": 1586102918425
            },
            {
                "_id": "themes/material-indigo/layout/_partial/post/reward-btn.ejs",
                "hash": "5b6140368c0f9e80465ed7f1f707ca76af98024d",
                "modified": 1586103467851
            },
            {
                "_id": "themes/material-indigo/layout/_partial/post/reward.ejs",
                "hash": "097c0276a61665e5ee96e5d5d85a7d6ae5ab2f49",
                "modified": 1586102918426
            },
            {
                "_id": "themes/material-indigo/layout/_partial/post/share-fab.ejs",
                "hash": "2ec7de870988cfbc8ea9872cddf7e4076ac64a57",
                "modified": 1586102918427
            },
            {
                "_id": "themes/material-indigo/layout/_partial/post/share.ejs",
                "hash": "a954b3f4ddefb8c76f4f9642050de04c07504474",
                "modified": 1586102918429
            },
            {
                "_id": "themes/material-indigo/layout/_partial/post/tag.ejs",
                "hash": "412894001b1ac6e63012b26b1109a0856651c076",
                "modified": 1586102918429
            },
            {
                "_id": "themes/material-indigo/layout/_partial/post/title.ejs",
                "hash": "eaad7af7888bddd7095243a43ff38f55ad8c494a",
                "modified": 1586102918430
            },
            {
                "_id": "themes/material-indigo/layout/_partial/post/toc.ejs",
                "hash": "d534b888d24df7703c632539d4bdd638fa764e98",
                "modified": 1586102918430
            },
            {
                "_id": "themes/material-indigo/layout/_partial/post/updated.ejs",
                "hash": "00fedf7971c0bda0623d968bc0614e512d19a985",
                "modified": 1586102918430
            },
            {
                "_id": "themes/material-indigo/source/css/_plugin/valine.less",
                "hash": "b8f8d8037fb3c8525da12e580bd9e2ff9f298132",
                "modified": 1586102918443
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/archives.less",
                "hash": "382fc22cd5cc073e881768a65600d97eba9f1d21",
                "modified": 1586102918436
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/article.less",
                "hash": "f047c8ca92f9e6a8e1299ace0cce91514631a21c",
                "modified": 1586102918436
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/gotop.less",
                "hash": "bad63006b3bd4849bf53ad38482af0d9971061d3",
                "modified": 1586102918437
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/highlight.less",
                "hash": "99e48793dc0b4ffb66ecaf2d1315145872f9bb98",
                "modified": 1586102918438
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/header.less",
                "hash": "880b4a28e97d556ed15b07642d25115f9b6ba4f6",
                "modified": 1586102918438
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/layout.less",
                "hash": "5f783f34bf093e654e8922ed4a2af8b7b2cd41c4",
                "modified": 1586102918438
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/lightbox.less",
                "hash": "38419aaf3c1832e84ade331f051f110fdc8b960f",
                "modified": 1586102918439
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/loading.less",
                "hash": "85157ddf3877b5c58e8f1d737dda3dfb1bfd540b",
                "modified": 1586102918439
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/page.less",
                "hash": "33b0a5edcedc26a4c592c812c5785bb20d3c93db",
                "modified": 1586102918439
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/postlist.less",
                "hash": "516cded3c7f1db4cacfa898bcaf0adfae7f3a2e1",
                "modified": 1586102918439
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/reward.less",
                "hash": "f5e89ea5414e3096a28c8c96e86c3f669040a892",
                "modified": 1586102918440
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/roboto.less",
                "hash": "3e457942995da8840e7662fa6cb551a7e12ea294",
                "modified": 1586102918440
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/search.less",
                "hash": "dbc23e77e586ee682a21475f5eb568628ea6720f",
                "modified": 1586102918440
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/share.less",
                "hash": "54518cb09d4d402f7272d4b3b9c2516dabcd8aed",
                "modified": 1586102918441
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/variable.less",
                "hash": "9ab83560b1d1cf160790bc2a5dce07e068cf1358",
                "modified": 1586102918442
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/tags.less",
                "hash": "01eb7f84193180928a6ed4796ee8802f6c1628e7",
                "modified": 1586102918441
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/waves.less",
                "hash": "a02eaa601887f947257f6016679b62dc96a61c0c",
                "modified": 1586102918442
            },
            {
                "_id": "themes/material-indigo/source/css/_partial/fontawesome.less",
                "hash": "a3ecbd6ccf5b56ac39df710c34a149b82989a498",
                "modified": 1586102918437
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Bold.eot",
                "hash": "a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10",
                "modified": 1586102918460
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Bold.woff2",
                "hash": "933b866d09c2b087707a98dab64b3888865eeb96",
                "modified": 1586102918463
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Light.eot",
                "hash": "42fe156996197e5eb0c0264c5d1bb3b4681f4595",
                "modified": 1586102918463
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Light.woff",
                "hash": "6300f659be9e834ab263efe2fb3c581d48b1e7b2",
                "modified": 1586102918465
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Light.woff2",
                "hash": "bbdc28b887400fcb340b504ec2904993af42a5d7",
                "modified": 1586102918465
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Medium.eot",
                "hash": "1517f4b6e1c5d0e5198f937557253aac8fab0416",
                "modified": 1586102918466
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Medium.woff2",
                "hash": "6cc1b73571af9e827c4e7e91418f476703cd4c4b",
                "modified": 1586102918469
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Regular.eot",
                "hash": "77ae3e980ec03863ebe2587a8ef9ddfd06941db0",
                "modified": 1586102918469
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Regular.woff",
                "hash": "74734dde8d94e7268170f9b994dedfbdcb5b3a15",
                "modified": 1586102918471
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Regular.woff2",
                "hash": "ed1558b0541f5e01ce48c7db1588371b990eec19",
                "modified": 1586102918472
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Thin.eot",
                "hash": "0790a51a848dbe7292c98f9d0459218bf1a8ffdd",
                "modified": 1586102918472
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Thin.woff",
                "hash": "fbc3e71d456c96667d8082ab910e3946ef89240b",
                "modified": 1586102918474
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Thin.woff2",
                "hash": "2449e3dac5ddb7c3da8bb07450493b62d052758c",
                "modified": 1586102918476
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff",
                "hash": "28b782240b3e76db824e12c02754a9731a167527",
                "modified": 1586102918458
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2",
                "hash": "d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c",
                "modified": 1586102918459
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Bold.woff",
                "hash": "ee99cd87a59a9a5d4092c83232bb3eec67547425",
                "modified": 1586102918462
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Medium.woff",
                "hash": "d45f84922131364989ad6578c7a06b6b4fc22c34",
                "modified": 1586102918468
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Thin.ttf",
                "hash": "173ed64528b4d010a76d8d38deb1d7e7eed58eda",
                "modified": 1586102918474
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/css/animation.css",
                "hash": "f763298ac4912e0e83793883936107722f130250",
                "modified": 1586102918444
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/css/custom-codes.css",
                "hash": "6dbc9dedada62ea369a6084ce351347d4d7fc64d",
                "modified": 1586102918445
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/css/custom-embedded.css",
                "hash": "8324a6019d9cf5cf1363eb1e1997417b9b07f69c",
                "modified": 1586102918445
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/css/custom-ie7-codes.css",
                "hash": "06ea14e23bbb06a32ddfadaa92406d97646bae32",
                "modified": 1586102918446
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/css/custom-ie7.css",
                "hash": "b567505e8b0eedc8eaf93972d632891118627205",
                "modified": 1586102918446
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/css/custom.css",
                "hash": "edd8e409450c654a7bbb4da2e08b767d1da309d9",
                "modified": 1586102918446
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/font/custom.svg",
                "hash": "fe266d196ea2e07cb0adc5985c9c69219985e9bf",
                "modified": 1586102918447
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/font/custom.eot",
                "hash": "3c9062464e0c0fac579d65e95367311e5ab3dc52",
                "modified": 1586102918447
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/font/custom.ttf",
                "hash": "962e0434b437072ebf851fe7127b8352fb1a7d78",
                "modified": 1586102918448
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/font/custom.woff",
                "hash": "e4cb97267930f2a868e8e927b54b887ceb9acc07",
                "modified": 1586102918448
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/custom/font/custom.woff2",
                "hash": "acf7e5faf62787a1b923a745d3d15cfac28110e6",
                "modified": 1586102918448
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/fontawesome/FontAwesome.otf",
                "hash": "048707bc52ac4b6563aaa383bfe8660a0ddc908c",
                "modified": 1586102918450
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf",
                "hash": "13b1eab65a983c7a73bc7997c479d66943f7c6cb",
                "modified": 1586102918457
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Bold.ttf",
                "hash": "47327df0f35e7cd7c8645874897a7449697544ae",
                "modified": 1586102918461
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Light.ttf",
                "hash": "e321c183e2b75ee19813892b7bac8d7c411cb88a",
                "modified": 1586102918464
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Medium.ttf",
                "hash": "6060ca726b9760b76f7c347dce9d2fa1fe42ec92",
                "modified": 1586102918467
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/roboto/Roboto-Regular.ttf",
                "hash": "824b5480c977a8166e177e5357d13164ccc45f47",
                "modified": 1586102918470
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot",
                "hash": "d980c2ce873dc43af460d4d572d441304499f400",
                "modified": 1586102918452
            },
            {
                "_id": "themes/material-indigo/source/img/avatar.gif",
                "hash": "249dfa261a7c0a02d32c9b45e7d7a8614a42b162",
                "modified": 1586103058927
            },
            {
                "_id": "themes/material-indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg",
                "hash": "b5483b11f8ba213e733b5b8af9927a04fec996f6",
                "modified": 1586102918455
            },
            {
                "_id": "public/2020/04/06/Android11とか/index.html",
                "hash": "130a8656af4974b7f8b0532c772048406e8c33f1",
                "modified": 1586344273210
            },
            {
                "_id": "public/2020/04/06/はじめて/index.html",
                "hash": "ff44afe7e065a334fc95c6cd480846586ded96b1",
                "modified": 1586344273210
            },
            {
                "_id": "public/2020/04/06/hello/index.html",
                "hash": "aadbd643c62a83a6836998ad6d8771d96b6ea639",
                "modified": 1586344273210
            },
            {
                "_id": "public/tags/ARCore/index.html",
                "hash": "40c6449b74cd2af745013b0d7398f4979301bf59",
                "modified": 1586344273210
            },
            {
                "_id": "public/tags/台風/index.html",
                "hash": "a7dce6fe133f832550e0cd49c09f0062dc2475c6",
                "modified": 1586344273210
            },
            {
                "_id": "public/tags/JavaScript/index.html",
                "hash": "c28e554df03df565381418e58ef22a0704d4f151",
                "modified": 1586344273210
            },
            {
                "_id": "public/tags/Electron/index.html",
                "hash": "c21593bbbeee27475aa49ae1ceb61efa3891ace3",
                "modified": 1586344273210
            },
            {
                "_id": "public/tags/TypeScript/index.html",
                "hash": "80d49b44b3dc060d0efb080657476c32a0863fcc",
                "modified": 1586344273210
            },
            {
                "_id": "public/tags/Node-js/index.html",
                "hash": "1dc5e034ab1fc48cad23464101336accbba67038",
                "modified": 1586344273210
            },
            {
                "_id": "public/tags/MaterialDesign/index.html",
                "hash": "855219a637654b32fac351e31063cd0b4b7fd477",
                "modified": 1586344273210
            },
            {
                "_id": "public/tags/画面録画/index.html",
                "hash": "51305c0d504e47b3d311fd4b6470d20ec62688e3",
                "modified": 1586344273210
            },
            {
                "_id": "public/tags/AndroidQ/index.html",
                "hash": "9ba6cbca1d512dbf884c9f1f18ec824a48b03f52",
                "modified": 1586344273210
            },
            {
                "_id": "public/tags/MediaProjection/index.html",
                "hash": "9cdea3a409b3918d909719f25426b815f0b08c83",
                "modified": 1586344273210
            },
            {
                "_id": "public/tags/NavigationDrawer/index.html",
                "hash": "d301955884948c84cdc1615b720b3de088b85432",
                "modified": 1586344273210
            },
            {
                "_id": "public/tags/その他/index.html",
                "hash": "d509b473a0178f20f219b0d3315ec5fe54e1d9ec",
                "modified": 1586344273210
            },
            {
                "_id": "public/page/2/index.html",
                "hash": "42434a39e05912792fa163275e4b815cfb402016",
                "modified": 1586344273210
            },
            {
                "_id": "public/archives/page/2/index.html",
                "hash": "e6d81282ce55022db8459b447af54bb1955da353",
                "modified": 1586344273210
            },
            {
                "_id": "public/archives/2020/page/2/index.html",
                "hash": "41c8d3d80201f944b3fc4336c211c54e3d95cfd3",
                "modified": 1586344273210
            },
            {
                "_id": "public/2020/04/06/Electron Builder/index.html",
                "hash": "089f617fa0caff1284b9c299a9ce9372158af508",
                "modified": 1586344273210
            },
            {
                "_id": "public/2020/04/06/ARCore/index.html",
                "hash": "1c68bdb6503abfc8c1a7d7a4eb8fae5ae1775d4f",
                "modified": 1586344273210
            },
            {
                "_id": "public/2020/04/06/Androidのノッチ領域に侵略/index.html",
                "hash": "5317f99a8a0750d14fe4a9a1f17ee85b68614870",
                "modified": 1586344273210
            },
            {
                "_id": "public/2020/04/06/Androidで気圧計/index.html",
                "hash": "4a2216b6ce06ed59f2f81d34766bdc6b29b2b540",
                "modified": 1586344273210
            },
            {
                "_id": "public/2020/04/06/NavigationDrawer/index.html",
                "hash": "50c9d7a0e9070db2ed3d09e4a2a775490ebc3831",
                "modified": 1586344273210
            },
            {
                "_id": "public/2020/04/06/MediaProjection/index.html",
                "hash": "92e34401e1934141d434bdefb817f35e5dc9828e",
                "modified": 1586344273210
            },
            {
                "_id": "public/2020/04/06/MaterialDesign/index.html",
                "hash": "d8afd127d15100aebc3913402fa9f4ad67925990",
                "modified": 1586344273210
            },
            {
                "_id": "public/2020/04/06/Electron TypeScript/index.html",
                "hash": "83182051a68a7caf3088b668d6d4afdbb3726fec",
                "modified": 1586344273210
            },
            {
                "_id": "public/2020/04/05/hello-world/index.html",
                "hash": "1d759640c0e28e6d583b5f4f6bd238a5b6e3aa29",
                "modified": 1586344273210
            },
            {
                "_id": "public/tags/Android/index.html",
                "hash": "ecc8f80a45d1f592ece10bf651018c55ec62ee41",
                "modified": 1586344273210
            },
            {
                "_id": "public/tags/Kotlin/index.html",
                "hash": "e26181d9fe74af7aa591883811e677ce4dc7e691",
                "modified": 1586344273210
            },
            {
                "_id": "public/index.html",
                "hash": "18f5fc756b6ee1ee9f50b6d92ae1583f5427b62e",
                "modified": 1586344273210
            },
            {
                "_id": "public/archives/index.html",
                "hash": "acc0fadb9469a1b8cf080a23d3b337207a7055e9",
                "modified": 1586344273210
            },
            {
                "_id": "public/archives/2020/index.html",
                "hash": "34c69ffbfaeb4102d53ad0c5d10d973082aca681",
                "modified": 1586344273210
            },
            {
                "_id": "public/archives/2020/04/index.html",
                "hash": "a96fd9ebeb56b49ddcb4eaf216d1603a4462d2c6",
                "modified": 1586344273210
            },
            {
                "_id": "public/archives/2020/04/page/2/index.html",
                "hash": "a59aa0d846bbb2c51e732d90d5384fb4cf58eed0",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/style.less",
                "hash": "cf362925ae099b810fd5763e6b724b823612ed15",
                "modified": 1586344273210
            },
            {
                "_id": "public/img/avatar.jpg",
                "hash": "62a4893b1a32e997dcdb6e467b10559df75221e2",
                "modified": 1586344273210
            },
            {
                "_id": "public/img/cc.png",
                "hash": "ebce75a62b40976a72d43f0bd937d859ac24d87c",
                "modified": 1586344273210
            },
            {
                "_id": "public/img/favicon.ico",
                "hash": "96170a8ae970d671a681469fd0511c15f3bc0af1",
                "modified": 1586344273210
            },
            {
                "_id": "public/img/brand.jpg",
                "hash": "0e237f1b433851c156e1f1cdaeb044054b3b9879",
                "modified": 1586344273210
            },
            {
                "_id": "public/img/img-loading.png",
                "hash": "a9cd5cd11866824f31e3d1c5e23badfeb3f73031",
                "modified": 1586344273210
            },
            {
                "_id": "public/img/img-err.png",
                "hash": "23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b",
                "modified": 1586344273210
            },
            {
                "_id": "public/img/wechat.jpg",
                "hash": "ef069cc9e80c7553fd60589b0727bbbf8c6de372",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Bold.eot",
                "hash": "a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Regular.eot",
                "hash": "77ae3e980ec03863ebe2587a8ef9ddfd06941db0",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Regular.woff",
                "hash": "74734dde8d94e7268170f9b994dedfbdcb5b3a15",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Thin.eot",
                "hash": "0790a51a848dbe7292c98f9d0459218bf1a8ffdd",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Regular.woff2",
                "hash": "ed1558b0541f5e01ce48c7db1588371b990eec19",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Thin.woff2",
                "hash": "2449e3dac5ddb7c3da8bb07450493b62d052758c",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Thin.woff",
                "hash": "fbc3e71d456c96667d8082ab910e3946ef89240b",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Bold.woff",
                "hash": "ee99cd87a59a9a5d4092c83232bb3eec67547425",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Medium.woff",
                "hash": "d45f84922131364989ad6578c7a06b6b4fc22c34",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/custom/font/custom.eot",
                "hash": "3c9062464e0c0fac579d65e95367311e5ab3dc52",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/custom/font/custom.ttf",
                "hash": "962e0434b437072ebf851fe7127b8352fb1a7d78",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/custom/font/custom.svg",
                "hash": "fe266d196ea2e07cb0adc5985c9c69219985e9bf",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/custom/font/custom.woff2",
                "hash": "acf7e5faf62787a1b923a745d3d15cfac28110e6",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/custom/font/custom.woff",
                "hash": "e4cb97267930f2a868e8e927b54b887ceb9acc07",
                "modified": 1586344273210
            },
            {
                "_id": "public/img/alipay.jpg",
                "hash": "6054d9ed2ca7cd1f645b729e05632134467d4daa",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Bold.woff2",
                "hash": "933b866d09c2b087707a98dab64b3888865eeb96",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Light.eot",
                "hash": "42fe156996197e5eb0c0264c5d1bb3b4681f4595",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Light.woff",
                "hash": "6300f659be9e834ab263efe2fb3c581d48b1e7b2",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Medium.eot",
                "hash": "1517f4b6e1c5d0e5198f937557253aac8fab0416",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Light.woff2",
                "hash": "bbdc28b887400fcb340b504ec2904993af42a5d7",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Medium.woff2",
                "hash": "6cc1b73571af9e827c4e7e91418f476703cd4c4b",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/fontawesome/fontawesome-webfont.woff",
                "hash": "28b782240b3e76db824e12c02754a9731a167527",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/fontawesome/fontawesome-webfont.woff2",
                "hash": "d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Thin.ttf",
                "hash": "173ed64528b4d010a76d8d38deb1d7e7eed58eda",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Bold.ttf",
                "hash": "47327df0f35e7cd7c8645874897a7449697544ae",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Medium.ttf",
                "hash": "6060ca726b9760b76f7c347dce9d2fa1fe42ec92",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Light.ttf",
                "hash": "e321c183e2b75ee19813892b7bac8d7c411cb88a",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/roboto/Roboto-Regular.ttf",
                "hash": "824b5480c977a8166e177e5357d13164ccc45f47",
                "modified": 1586344273210
            },
            {
                "_id": "public/js/search.js",
                "hash": "a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3",
                "modified": 1586344273210
            },
            {
                "_id": "public/js/search.min.js",
                "hash": "a8a450bb8b1ca9ad577052addcbd3393f1af6c6a",
                "modified": 1586344273210
            },
            {
                "_id": "public/js/main.min.js",
                "hash": "8acf4480f8ab859423b8926b9b790c67b5a77276",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/custom/css/animation.css",
                "hash": "181bbc89ec978981bf0ef8c7239710ae5b3ad6a1",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/custom/css/custom-embedded.css",
                "hash": "1a231f1171ff47f6965a8484b8116717acdcecc4",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/custom/css/custom-codes.css",
                "hash": "e0aa854bccaa3c4a32e9c2da01c463dbdd820bdb",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/custom/css/custom-ie7-codes.css",
                "hash": "13be021c7a98e2f15b638e751af63cc1f5bffb1a",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/custom/css/custom-ie7.css",
                "hash": "99b21da90d85662983e14f9d50c51e95fcee4490",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/custom/css/custom.css",
                "hash": "a9854c6c3a5b89947093959ba3b9365d1e29a5ad",
                "modified": 1586344273210
            },
            {
                "_id": "public/js/main.js",
                "hash": "300b2e963683ced162e28afcd24ffc970fc23ac2",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/fontawesome/FontAwesome.otf",
                "hash": "048707bc52ac4b6563aaa383bfe8660a0ddc908c",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/fontawesome/fontawesome-webfont.ttf",
                "hash": "13b1eab65a983c7a73bc7997c479d66943f7c6cb",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/fontawesome/fontawesome-webfont.eot",
                "hash": "d980c2ce873dc43af460d4d572d441304499f400",
                "modified": 1586344273210
            },
            {
                "_id": "public/img/avatar.gif",
                "hash": "249dfa261a7c0a02d32c9b45e7d7a8614a42b162",
                "modified": 1586344273210
            },
            {
                "_id": "public/css/fonts/fontawesome/fontawesome-webfont.svg",
                "hash": "b5483b11f8ba213e733b5b8af9927a04fec996f6",
                "modified": 1586344273210
            }
        ],
        "Category": [],
        "Data": [],
        "Page": [],
        "Post": [
            {
                "title": "【Android / Kotlin / ARCore】ARCoreでTextViewを出す",
                "author": "takusan_23",
                "slide": false,
                "_content": "AR触ってみたい。\n\n# widgets（UIの部品 例：TextView、ImageView）がARで表示できるらしい\nhttps://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets\n\n![Screenshot_1577032540.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/6f5e59b3-b466-aefe-ec75-11657ee1845f.png)\n\n\nここ。sceneformってなんぞやって話だけどこれできたらくっそ面白そうだと思ったので、\n今回はTextViewをAR上に表示させるところまでやろうと思います。\n\n## エミュレーターでARCoreアプリを動かすために\nいやPixelとかGalaxyとか使いますからって方は飛ばしていいぞ。\n~~てかARCore対応端末無いのにARアプリ作ろうとしてる人、どこからやる気が出てるんだ。~~\n\n### Google Play 開発者サービス（AR）を入れます\nhttps://github.com/google-ar/arcore-android-sdk/releases\nここからAPKをDLして、エミュレーターにドラッグアンドドロップしてインストールしてください。\n\n今回は記事作成時最新Ver（Google_Play_Services_for_AR_1.14.1_x86_for_emulator.apk）を入れます。\n\n成功するとアプリ一覧画面に表示されると思います。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/643c568b-f56d-f61d-3b06-f995abbff688.png)\n\n# 環境\n| なまえ        | あたい                             |\n|---------------|------------------------------------|\n| 端末          | エミュレーター / Google Pixel 3 XL |\n| Android       | 10                                 |\n| minSdkVersion | 24（ARCoreのせい）                 |\n\n# 実装\nMainActivityができてる段階まで来てください。\n\n## build.gradle（appフォルダの中）書き足す\n参考：https://developers.google.com/ar/develop/java/sceneform#configure-project\n\nこうなっていると思いますが、\n\n```gradle:build.gradle\napply plugin: 'com.android.application'\n\napply plugin: 'kotlin-android'\n\napply plugin: 'kotlin-android-extensions'\n\nandroid {\n    compileSdkVersion 29\n    buildToolsVersion \"29.0.2\"\n    defaultConfig {\n        applicationId \"io.github.takusan23.aredittext\"\n        minSdkVersion 24\n        targetSdkVersion 29\n        versionCode 1\n        versionName \"1.0\"\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementation 'androidx.appcompat:appcompat:1.1.0'\n    implementation 'androidx.core:core-ktx:1.1.0'\n    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.1'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'\n}\n```\n\nここから書き足していきます。\n\n```gradle:build.gradle\napply plugin: 'com.android.application'\n\napply plugin: 'kotlin-android'\n\napply plugin: 'kotlin-android-extensions'\n\nandroid {\n    compileSdkVersion 29\n    buildToolsVersion \"29.0.2\"\n    defaultConfig {\n        applicationId \"io.github.takusan23.aredittext\"\n        minSdkVersion 24\n        targetSdkVersion 29\n        versionCode 1\n        versionName \"1.0\"\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n    //Java 8が必要みたい。\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n}\n\ndependencies {\n\n    //ArFragmentなど    \n    implementation \"com.google.ar.sceneform.ux:sceneform-ux:1.14.0\"\n\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementation 'androidx.appcompat:appcompat:1.1.0'\n    implementation 'androidx.core:core-ktx:1.1.0'\n    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.1'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'\n}\n```\n\n# AndroidManifest書き足す\n参考：https://developers.google.com/ar/develop/java/sceneform#manifest\nまず上の方にこんなかんじに、\n\n```xml\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"なんとか～\">\n\n　　<!-- Both \"AR Optional\" and \"AR Required\" apps require CAMERA permission. -->\n　　<uses-permission android:name=\"android.permission.CAMERA\" />\n    <!-- Sceneform requires OpenGL ES 3.0 or later. -->\n    <uses-feature android:glEsVersion=\"0x00030000\" android:required=\"true\" />\n    <!-- Indicates that app requires ARCore (\"AR Required\"). Ensures the app is\n    visible only in the Google Play Store on devices that support ARCore.\n     For \"AR Optional\" apps remove this line. -->\n   <uses-feature android:name=\"android.hardware.camera.ar\" />\n```\n\n```<application>``` の中にも書き足します\n\n```xml\n<!-- Indicates that app requires ARCore (\"AR Required\"). Causes the Google\n     Play Store to download and install Google Play Services for AR along\n     with the app. For an \"AR Optional\" app, specify \"optional\" instead of\n     \"required\".\n-->\n<meta-data android:name=\"com.google.ar.core\" android:value=\"required\" />\n```\n\n全部つけるとこうなります\n\n```xml:AndroidManifest.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"io.github.takusan23.aredittext\">\n\n    <!-- Both \"AR Optional\" and \"AR Required\" apps require CAMERA permission. -->\n    <uses-permission android:name=\"android.permission.CAMERA\" />\n\n    <!-- Sceneform requires OpenGL ES 3.0 or later. -->\n    <uses-feature android:glEsVersion=\"0x00030000\" android:required=\"true\" />\n\n    <!-- Indicates that app requires ARCore (\"AR Required\"). Ensures the app is\n         visible only in the Google Play Store on devices that support ARCore.\n         For \"AR Optional\" apps remove this line. -->\n    <uses-feature android:name=\"android.hardware.camera.ar\" />\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n\n        <!-- Indicates that app requires ARCore (\"AR Required\"). Causes the Google\n             Play Store to download and install Google Play Services for AR along\n             with the app. For an \"AR Optional\" app, specify \"optional\" instead of\n             \"required\".\n        -->\n        <meta-data android:name=\"com.google.ar.core\" android:value=\"required\" />\n\n\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```\n\n# MainActivityにFragmentを置く。\n参考：https://developers.google.com/ar/develop/java/sceneform#scene-view\nConstraintLayoutは使い方がよくわからないのでLinearLayoutに置き換えて、Fragmentをドラッグします。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/a152914b-b45a-b3bf-86ba-5348df99d42e.png)\n\nできたら**ArFragment**を選択して**OK**です！\n\nlayout_heightの値を**match_parent**にして最大まで広げるようにしましょう。\nそれとidもfragmentだとわかりにくくなるので、ar_fragmentとかにしときましょう。\n\nxmlだとこうなっていると思います。\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\".MainActivity\" >\n\n    <fragment\n        android:id=\"@+id/ar_fragment\"\n        android:name=\"com.google.ar.sceneform.ux.ArFragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n</LinearLayout>\n```\n\n# Sceneformが利用可能かチェックする\nhttps://developers.google.com/ar/develop/java/sceneform\nには書いてありませんが、[ARCoreのサンプル](https://github.com/google-ar/sceneform-android-sdk/blob/master/samples/hellosceneform/app/src/main/java/com/google/ar/sceneform/samples/hellosceneform/HelloSceneformActivity.java)には書いてあったので、Kotlinに変換して使います。\n\n```kotlin:MainActivity.kt\nfun checkIsSupportedDeviceOrFinish(activity: Activity): Boolean {\n    val MIN_OPENGL_VERSION = 3.0\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\n        Toast.makeText(activity, \"SceneformにはAndroid N以降が必要です。\", Toast.LENGTH_LONG).show()\n        activity.finish()\n        return false\n    }\n    val openGlVersionString = (activity.getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager).deviceConfigurationInfo.glEsVersion\n    if (java.lang.Double.parseDouble(openGlVersionString) < MIN_OPENGL_VERSION) {\n        Toast.makeText(activity, \"SceneformにはOpen GL 3.0以降が必要です。\", Toast.LENGTH_LONG).show()\n        activity.finish()\n        return false\n    }\n    return true\n}\n```\n\nこれを```setContentView()```の前で使います。\n\n```kotlin:MainActivity.kt\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    //条件満たしてなければActivity終了させる\n    if(!checkIsSupportedDeviceOrFinish(this)){\n        return\n    }\n    setContentView(R.layout.activity_main)\n}\n```\n\n# ArFragment取得\nMainActivityで置いたArFragmentを取得します。\n\n```kotlin:MainActivity.kt\nlateinit var arFragment: ArFragment\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    //条件満たしてなければActivity終了させる\n    if(!checkIsSupportedDeviceOrFinish(this)){\n        return\n    }\n    setContentView(R.layout.activity_main)\n    //ArFragment取得\n    arFragment = supportFragmentManager.findFragmentById(R.id.ar_fragment) as ArFragment\n}\n```\n\n# 起動してみる\nここまでで特に問題がなければ、\nカメラの権限許可がきて、許可すると映ると思います。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/e802a9d9-3d6c-623c-da86-6e2f2ed416c4.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/0b97794e-8ed5-2915-e472-9206df1710e1.png)\n\n映れば成功です。ここまで間違えずついてこれてます。\n\n# いよいよViewを現実に表示させる・・・！\n参考：https://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets\n\nまずlayoutフォルダに**ar_layout.xml**という名前で作成します。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/521816ac-26b0-e798-6fb2-4c5613da107d.png)\n\n次に現実で表示させたいUI部品を並べます。\n今回はTextViewを置きます。（タイトル詐欺回避）\n\n```xml:ar_layout.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:background=\"#ffffff\"\n    android:orientation=\"vertical\"\n    tools:context=\".MainActivity\">\n\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"10sp\"\n        android:gravity=\"center\"\n        android:text=\"てきすとだよー\" />\n</LinearLayout>\n```\n\n## ARで扱えるように\n参考：https://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets\n\n```kotlin:MainActivity.kt\n    //レイアウトをARに・・・\n    lateinit var viewRenderable: ViewRenderable\n```\n\n読み込みます。\n\n```kotlin:MainActivity.kt\n//レイアウトを読み込む\nViewRenderable.builder()\n    .setView(this, R.layout.ar_layout)\n    .build()\n    .thenAccept { renderable -> viewRenderable = renderable } //読み込み成功\n    .exceptionally {\n        //読み込み失敗\n        it.printStackTrace()\n        Toast.makeText(this, \"読み込みに失敗しました。\", Toast.LENGTH_LONG).show()\n        null\n    }\n```\n\n最後に押したらレイアウトをARで表示させるところを\n\n```kotlin:MainActivity.kt\narFragment.setOnTapArPlaneListener { hitResult, plane, motionEvent ->\n    if (::viewRenderable.isInitialized) {\n        //初期化済みのとき、利用可能\n        // Create the Anchor.\n        val anchor = hitResult.createAnchor()\n        val anchorNode = AnchorNode(anchor)\n        anchorNode.setParent(arFragment.arSceneView.scene)\n        // Create the transformable andy and add it to the anchor.\n        val node = TransformableNode(arFragment.transformationSystem)\n        node.setParent(anchorNode)\n        node.renderable = viewRenderable\n        node.select()\n    }\n}\n```\n\nこれで動くはずです！！！実行してみましょう！！！\n\n![Screenshot_1577028389.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/065d6e9d-c470-8fd6-5d6e-fe5b853aa8f4.png)\n\nてきすとだよー\n\n## 押したら消す\n\n```kotlin:MainActivity.kt\nnode.setOnTapListener { hitTestResult, motionEvent -> \n    node.isEnabled = false\n}\n```\n\nisEnabledにtrueで消えますがこれでいいのかは不明。誰か頼んだ\n\n## ARで表示したTextViewのテキストを変更したい\n\nMainActivityにEditTextとボタンを置きます。\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\".MainActivity\" >\n\n    <fragment\n        android:id=\"@+id/ar_fragment\"\n        android:name=\"com.google.ar.sceneform.ux.ArFragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_weight=\"1\"\n        android:layout_height=\"wrap_content\" />\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n\n        <EditText\n            android:id=\"@+id/ar_change_textview\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:ems=\"10\"\n            android:inputType=\"textPersonName\"\n            android:text=\"てきすとだよー\" />\n\n        <Button\n            android:id=\"@+id/ar_change_button\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"変更\" />\n    </LinearLayout>\n\n</LinearLayout>\n```\n\nそしたらボタンを押したらテキストを変更する処理を書きます。\n\n```kotlin:MainActivity,.kt\n//テキスト変更\nar_change_button.setOnClickListener {\n    //テキスト取得\n    val text = ar_change_textview.text.toString()\n    //ARで表示するレイアウト取得\n    val linearLayout = viewRenderable.view as LinearLayout\n    //TextView取得\n    val textView = linearLayout.findViewById<TextView>(R.id.textView)\n    //変更\n    textView.text = text\n}\n```\n\n動くはずです。\n\n![Screenshot_1577029034.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/52a78edd-fb8a-546b-5277-7f8201e71db4.png)\n\nなんかEditTextの部分が黒くなるけどなんで？\n\n## 写真にして保存する\nおまけです。\n疲れたのでコードだけ。レイアウトにボタンを追加してidを「ar_take_a_picture」にしてください。\n\n```kotlin:MainActivity.kt\n//撮影ボタン押したとき\nar_take_a_picture.setOnClickListener {\n    //PixelCopy APIを利用する。のでOreo以降じゃないと利用できません。\n    val bitmap = Bitmap.createBitmap(\n        arFragment.view?.width ?: 100,\n        arFragment.view?.height ?: 100,\n        Bitmap.Config.ARGB_8888\n    )\n    val intArray = IntArray(2)\n    arFragment.view?.getLocationInWindow(intArray)\n    try {\n        PixelCopy.request(\n            arFragment.arSceneView as SurfaceView, //SurfaceViewを継承してるらしい。windowだと真っ暗なので注意！\n            Rect(\n                intArray[0],\n                intArray[1],\n                intArray[0] + (arFragment.view?.width ?: 0),\n                intArray[1] + (arFragment.view?.height ?: 0)\n            ),\n            bitmap,\n            { copyResult: Int ->\n                if (copyResult == PixelCopy.SUCCESS) {\n                    //成功時\n                    //ここのフォルダは自由に使っていい場所（サンドボックス）\n                  val mediaFolder = externalMediaDirs.first()\n                  //写真ファイル作成\n                  val file = File(\"${mediaFolder.path}/${System.currentTimeMillis()}.jpg\")\n                  //Bitmap保存\n                  bitmap.compress(Bitmap.CompressFormat.JPEG, 100, file.outputStream())\n                  Toast.makeText(this, \"保存しました\", Toast.LENGTH_SHORT).show()\n                }\n            },\n            Handler()\n        )\n    } catch (e: IllegalArgumentException) {\n        e.printStackTrace()\n        Toast.makeText(this@MainActivity, \"失敗しました。\", Toast.LENGTH_LONG).show()\n    }\n}\n```\n\n?:の値がくっそ雑だけどゆるして\nAndroid 10で動作確認済です。対象範囲別ストレージ対策。\n写真データは\n/sdcard/Android/media/パッケージID \nに入っています。\n\n# おわりに\nGitHubに公開しておきます。\nhttps://github.com/takusan23/AREditText\n\nついでに参考にしたプロジェクトも。\nhttps://github.com/google-ar/sceneform-android-sdk/tree/master/samples/hellosceneform\n\nPixelCopy参考にしました。\nhttps://friegen.xyz/getdrawingcache-deprecated/\n\nおつです。８８８８８８\n",
                "source": "_posts/ARCore.md",
                "raw": "---\ntitle: 【Android / Kotlin / ARCore】ARCoreでTextViewを出す\ntags: \n- Android\n- ARCore\n- Kotlin\nauthor: takusan_23\nslide: false\n---\nAR触ってみたい。\n\n# widgets（UIの部品 例：TextView、ImageView）がARで表示できるらしい\nhttps://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets\n\n![Screenshot_1577032540.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/6f5e59b3-b466-aefe-ec75-11657ee1845f.png)\n\n\nここ。sceneformってなんぞやって話だけどこれできたらくっそ面白そうだと思ったので、\n今回はTextViewをAR上に表示させるところまでやろうと思います。\n\n## エミュレーターでARCoreアプリを動かすために\nいやPixelとかGalaxyとか使いますからって方は飛ばしていいぞ。\n~~てかARCore対応端末無いのにARアプリ作ろうとしてる人、どこからやる気が出てるんだ。~~\n\n### Google Play 開発者サービス（AR）を入れます\nhttps://github.com/google-ar/arcore-android-sdk/releases\nここからAPKをDLして、エミュレーターにドラッグアンドドロップしてインストールしてください。\n\n今回は記事作成時最新Ver（Google_Play_Services_for_AR_1.14.1_x86_for_emulator.apk）を入れます。\n\n成功するとアプリ一覧画面に表示されると思います。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/643c568b-f56d-f61d-3b06-f995abbff688.png)\n\n# 環境\n| なまえ        | あたい                             |\n|---------------|------------------------------------|\n| 端末          | エミュレーター / Google Pixel 3 XL |\n| Android       | 10                                 |\n| minSdkVersion | 24（ARCoreのせい）                 |\n\n# 実装\nMainActivityができてる段階まで来てください。\n\n## build.gradle（appフォルダの中）書き足す\n参考：https://developers.google.com/ar/develop/java/sceneform#configure-project\n\nこうなっていると思いますが、\n\n```gradle:build.gradle\napply plugin: 'com.android.application'\n\napply plugin: 'kotlin-android'\n\napply plugin: 'kotlin-android-extensions'\n\nandroid {\n    compileSdkVersion 29\n    buildToolsVersion \"29.0.2\"\n    defaultConfig {\n        applicationId \"io.github.takusan23.aredittext\"\n        minSdkVersion 24\n        targetSdkVersion 29\n        versionCode 1\n        versionName \"1.0\"\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementation 'androidx.appcompat:appcompat:1.1.0'\n    implementation 'androidx.core:core-ktx:1.1.0'\n    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.1'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'\n}\n```\n\nここから書き足していきます。\n\n```gradle:build.gradle\napply plugin: 'com.android.application'\n\napply plugin: 'kotlin-android'\n\napply plugin: 'kotlin-android-extensions'\n\nandroid {\n    compileSdkVersion 29\n    buildToolsVersion \"29.0.2\"\n    defaultConfig {\n        applicationId \"io.github.takusan23.aredittext\"\n        minSdkVersion 24\n        targetSdkVersion 29\n        versionCode 1\n        versionName \"1.0\"\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n    //Java 8が必要みたい。\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n}\n\ndependencies {\n\n    //ArFragmentなど    \n    implementation \"com.google.ar.sceneform.ux:sceneform-ux:1.14.0\"\n\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementation 'androidx.appcompat:appcompat:1.1.0'\n    implementation 'androidx.core:core-ktx:1.1.0'\n    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.1'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'\n}\n```\n\n# AndroidManifest書き足す\n参考：https://developers.google.com/ar/develop/java/sceneform#manifest\nまず上の方にこんなかんじに、\n\n```xml\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"なんとか～\">\n\n　　<!-- Both \"AR Optional\" and \"AR Required\" apps require CAMERA permission. -->\n　　<uses-permission android:name=\"android.permission.CAMERA\" />\n    <!-- Sceneform requires OpenGL ES 3.0 or later. -->\n    <uses-feature android:glEsVersion=\"0x00030000\" android:required=\"true\" />\n    <!-- Indicates that app requires ARCore (\"AR Required\"). Ensures the app is\n    visible only in the Google Play Store on devices that support ARCore.\n     For \"AR Optional\" apps remove this line. -->\n   <uses-feature android:name=\"android.hardware.camera.ar\" />\n```\n\n```<application>``` の中にも書き足します\n\n```xml\n<!-- Indicates that app requires ARCore (\"AR Required\"). Causes the Google\n     Play Store to download and install Google Play Services for AR along\n     with the app. For an \"AR Optional\" app, specify \"optional\" instead of\n     \"required\".\n-->\n<meta-data android:name=\"com.google.ar.core\" android:value=\"required\" />\n```\n\n全部つけるとこうなります\n\n```xml:AndroidManifest.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"io.github.takusan23.aredittext\">\n\n    <!-- Both \"AR Optional\" and \"AR Required\" apps require CAMERA permission. -->\n    <uses-permission android:name=\"android.permission.CAMERA\" />\n\n    <!-- Sceneform requires OpenGL ES 3.0 or later. -->\n    <uses-feature android:glEsVersion=\"0x00030000\" android:required=\"true\" />\n\n    <!-- Indicates that app requires ARCore (\"AR Required\"). Ensures the app is\n         visible only in the Google Play Store on devices that support ARCore.\n         For \"AR Optional\" apps remove this line. -->\n    <uses-feature android:name=\"android.hardware.camera.ar\" />\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n\n        <!-- Indicates that app requires ARCore (\"AR Required\"). Causes the Google\n             Play Store to download and install Google Play Services for AR along\n             with the app. For an \"AR Optional\" app, specify \"optional\" instead of\n             \"required\".\n        -->\n        <meta-data android:name=\"com.google.ar.core\" android:value=\"required\" />\n\n\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```\n\n# MainActivityにFragmentを置く。\n参考：https://developers.google.com/ar/develop/java/sceneform#scene-view\nConstraintLayoutは使い方がよくわからないのでLinearLayoutに置き換えて、Fragmentをドラッグします。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/a152914b-b45a-b3bf-86ba-5348df99d42e.png)\n\nできたら**ArFragment**を選択して**OK**です！\n\nlayout_heightの値を**match_parent**にして最大まで広げるようにしましょう。\nそれとidもfragmentだとわかりにくくなるので、ar_fragmentとかにしときましょう。\n\nxmlだとこうなっていると思います。\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\".MainActivity\" >\n\n    <fragment\n        android:id=\"@+id/ar_fragment\"\n        android:name=\"com.google.ar.sceneform.ux.ArFragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n</LinearLayout>\n```\n\n# Sceneformが利用可能かチェックする\nhttps://developers.google.com/ar/develop/java/sceneform\nには書いてありませんが、[ARCoreのサンプル](https://github.com/google-ar/sceneform-android-sdk/blob/master/samples/hellosceneform/app/src/main/java/com/google/ar/sceneform/samples/hellosceneform/HelloSceneformActivity.java)には書いてあったので、Kotlinに変換して使います。\n\n```kotlin:MainActivity.kt\nfun checkIsSupportedDeviceOrFinish(activity: Activity): Boolean {\n    val MIN_OPENGL_VERSION = 3.0\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\n        Toast.makeText(activity, \"SceneformにはAndroid N以降が必要です。\", Toast.LENGTH_LONG).show()\n        activity.finish()\n        return false\n    }\n    val openGlVersionString = (activity.getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager).deviceConfigurationInfo.glEsVersion\n    if (java.lang.Double.parseDouble(openGlVersionString) < MIN_OPENGL_VERSION) {\n        Toast.makeText(activity, \"SceneformにはOpen GL 3.0以降が必要です。\", Toast.LENGTH_LONG).show()\n        activity.finish()\n        return false\n    }\n    return true\n}\n```\n\nこれを```setContentView()```の前で使います。\n\n```kotlin:MainActivity.kt\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    //条件満たしてなければActivity終了させる\n    if(!checkIsSupportedDeviceOrFinish(this)){\n        return\n    }\n    setContentView(R.layout.activity_main)\n}\n```\n\n# ArFragment取得\nMainActivityで置いたArFragmentを取得します。\n\n```kotlin:MainActivity.kt\nlateinit var arFragment: ArFragment\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    //条件満たしてなければActivity終了させる\n    if(!checkIsSupportedDeviceOrFinish(this)){\n        return\n    }\n    setContentView(R.layout.activity_main)\n    //ArFragment取得\n    arFragment = supportFragmentManager.findFragmentById(R.id.ar_fragment) as ArFragment\n}\n```\n\n# 起動してみる\nここまでで特に問題がなければ、\nカメラの権限許可がきて、許可すると映ると思います。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/e802a9d9-3d6c-623c-da86-6e2f2ed416c4.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/0b97794e-8ed5-2915-e472-9206df1710e1.png)\n\n映れば成功です。ここまで間違えずついてこれてます。\n\n# いよいよViewを現実に表示させる・・・！\n参考：https://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets\n\nまずlayoutフォルダに**ar_layout.xml**という名前で作成します。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/521816ac-26b0-e798-6fb2-4c5613da107d.png)\n\n次に現実で表示させたいUI部品を並べます。\n今回はTextViewを置きます。（タイトル詐欺回避）\n\n```xml:ar_layout.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:background=\"#ffffff\"\n    android:orientation=\"vertical\"\n    tools:context=\".MainActivity\">\n\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"10sp\"\n        android:gravity=\"center\"\n        android:text=\"てきすとだよー\" />\n</LinearLayout>\n```\n\n## ARで扱えるように\n参考：https://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets\n\n```kotlin:MainActivity.kt\n    //レイアウトをARに・・・\n    lateinit var viewRenderable: ViewRenderable\n```\n\n読み込みます。\n\n```kotlin:MainActivity.kt\n//レイアウトを読み込む\nViewRenderable.builder()\n    .setView(this, R.layout.ar_layout)\n    .build()\n    .thenAccept { renderable -> viewRenderable = renderable } //読み込み成功\n    .exceptionally {\n        //読み込み失敗\n        it.printStackTrace()\n        Toast.makeText(this, \"読み込みに失敗しました。\", Toast.LENGTH_LONG).show()\n        null\n    }\n```\n\n最後に押したらレイアウトをARで表示させるところを\n\n```kotlin:MainActivity.kt\narFragment.setOnTapArPlaneListener { hitResult, plane, motionEvent ->\n    if (::viewRenderable.isInitialized) {\n        //初期化済みのとき、利用可能\n        // Create the Anchor.\n        val anchor = hitResult.createAnchor()\n        val anchorNode = AnchorNode(anchor)\n        anchorNode.setParent(arFragment.arSceneView.scene)\n        // Create the transformable andy and add it to the anchor.\n        val node = TransformableNode(arFragment.transformationSystem)\n        node.setParent(anchorNode)\n        node.renderable = viewRenderable\n        node.select()\n    }\n}\n```\n\nこれで動くはずです！！！実行してみましょう！！！\n\n![Screenshot_1577028389.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/065d6e9d-c470-8fd6-5d6e-fe5b853aa8f4.png)\n\nてきすとだよー\n\n## 押したら消す\n\n```kotlin:MainActivity.kt\nnode.setOnTapListener { hitTestResult, motionEvent -> \n    node.isEnabled = false\n}\n```\n\nisEnabledにtrueで消えますがこれでいいのかは不明。誰か頼んだ\n\n## ARで表示したTextViewのテキストを変更したい\n\nMainActivityにEditTextとボタンを置きます。\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\".MainActivity\" >\n\n    <fragment\n        android:id=\"@+id/ar_fragment\"\n        android:name=\"com.google.ar.sceneform.ux.ArFragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_weight=\"1\"\n        android:layout_height=\"wrap_content\" />\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n\n        <EditText\n            android:id=\"@+id/ar_change_textview\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:ems=\"10\"\n            android:inputType=\"textPersonName\"\n            android:text=\"てきすとだよー\" />\n\n        <Button\n            android:id=\"@+id/ar_change_button\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"変更\" />\n    </LinearLayout>\n\n</LinearLayout>\n```\n\nそしたらボタンを押したらテキストを変更する処理を書きます。\n\n```kotlin:MainActivity,.kt\n//テキスト変更\nar_change_button.setOnClickListener {\n    //テキスト取得\n    val text = ar_change_textview.text.toString()\n    //ARで表示するレイアウト取得\n    val linearLayout = viewRenderable.view as LinearLayout\n    //TextView取得\n    val textView = linearLayout.findViewById<TextView>(R.id.textView)\n    //変更\n    textView.text = text\n}\n```\n\n動くはずです。\n\n![Screenshot_1577029034.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/52a78edd-fb8a-546b-5277-7f8201e71db4.png)\n\nなんかEditTextの部分が黒くなるけどなんで？\n\n## 写真にして保存する\nおまけです。\n疲れたのでコードだけ。レイアウトにボタンを追加してidを「ar_take_a_picture」にしてください。\n\n```kotlin:MainActivity.kt\n//撮影ボタン押したとき\nar_take_a_picture.setOnClickListener {\n    //PixelCopy APIを利用する。のでOreo以降じゃないと利用できません。\n    val bitmap = Bitmap.createBitmap(\n        arFragment.view?.width ?: 100,\n        arFragment.view?.height ?: 100,\n        Bitmap.Config.ARGB_8888\n    )\n    val intArray = IntArray(2)\n    arFragment.view?.getLocationInWindow(intArray)\n    try {\n        PixelCopy.request(\n            arFragment.arSceneView as SurfaceView, //SurfaceViewを継承してるらしい。windowだと真っ暗なので注意！\n            Rect(\n                intArray[0],\n                intArray[1],\n                intArray[0] + (arFragment.view?.width ?: 0),\n                intArray[1] + (arFragment.view?.height ?: 0)\n            ),\n            bitmap,\n            { copyResult: Int ->\n                if (copyResult == PixelCopy.SUCCESS) {\n                    //成功時\n                    //ここのフォルダは自由に使っていい場所（サンドボックス）\n                  val mediaFolder = externalMediaDirs.first()\n                  //写真ファイル作成\n                  val file = File(\"${mediaFolder.path}/${System.currentTimeMillis()}.jpg\")\n                  //Bitmap保存\n                  bitmap.compress(Bitmap.CompressFormat.JPEG, 100, file.outputStream())\n                  Toast.makeText(this, \"保存しました\", Toast.LENGTH_SHORT).show()\n                }\n            },\n            Handler()\n        )\n    } catch (e: IllegalArgumentException) {\n        e.printStackTrace()\n        Toast.makeText(this@MainActivity, \"失敗しました。\", Toast.LENGTH_LONG).show()\n    }\n}\n```\n\n?:の値がくっそ雑だけどゆるして\nAndroid 10で動作確認済です。対象範囲別ストレージ対策。\n写真データは\n/sdcard/Android/media/パッケージID \nに入っています。\n\n# おわりに\nGitHubに公開しておきます。\nhttps://github.com/takusan23/AREditText\n\nついでに参考にしたプロジェクトも。\nhttps://github.com/google-ar/sceneform-android-sdk/tree/master/samples/hellosceneform\n\nPixelCopy参考にしました。\nhttps://friegen.xyz/getdrawingcache-deprecated/\n\nおつです。８８８８８８\n",
                "slug": "ARCore",
                "published": 1,
                "date": "2020-04-05T16:27:15.677Z",
                "updated": "2020-04-05T16:39:12.524Z",
                "comments": 1,
                "layout": "post",
                "photos": [],
                "link": "",
                "_id": "ck8r8f7bs000028vu9j9u8ezt",
                "content": "<p>AR触ってみたい。</p>\n<h1 id=\"widgets（UIの部品-例：TextView、ImageView）がARで表示できるらしい\"><a href=\"#widgets（UIの部品-例：TextView、ImageView）がARで表示できるらしい\" class=\"headerlink\" title=\"widgets（UIの部品 例：TextView、ImageView）がARで表示できるらしい\"></a>widgets（UIの部品 例：TextView、ImageView）がARで表示できるらしい</h1><p><a href=\"https://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets</a></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/6f5e59b3-b466-aefe-ec75-11657ee1845f.png\" alt=\"Screenshot_1577032540.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_1577032540.png</div>\n            </figure>\n\n\n<p>ここ。sceneformってなんぞやって話だけどこれできたらくっそ面白そうだと思ったので、<br>今回はTextViewをAR上に表示させるところまでやろうと思います。</p>\n<h2 id=\"エミュレーターでARCoreアプリを動かすために\"><a href=\"#エミュレーターでARCoreアプリを動かすために\" class=\"headerlink\" title=\"エミュレーターでARCoreアプリを動かすために\"></a>エミュレーターでARCoreアプリを動かすために</h2><p>いやPixelとかGalaxyとか使いますからって方は飛ばしていいぞ。<br><del>てかARCore対応端末無いのにARアプリ作ろうとしてる人、どこからやる気が出てるんだ。</del></p>\n<h3 id=\"Google-Play-開発者サービス（AR）を入れます\"><a href=\"#Google-Play-開発者サービス（AR）を入れます\" class=\"headerlink\" title=\"Google Play 開発者サービス（AR）を入れます\"></a>Google Play 開発者サービス（AR）を入れます</h3><p><a href=\"https://github.com/google-ar/arcore-android-sdk/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/google-ar/arcore-android-sdk/releases</a><br>ここからAPKをDLして、エミュレーターにドラッグアンドドロップしてインストールしてください。</p>\n<p>今回は記事作成時最新Ver（Google_Play_Services_for_AR_1.14.1_x86_for_emulator.apk）を入れます。</p>\n<p>成功するとアプリ一覧画面に表示されると思います。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/643c568b-f56d-f61d-3b06-f995abbff688.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<h1 id=\"環境\"><a href=\"#環境\" class=\"headerlink\" title=\"環境\"></a>環境</h1><table>\n<thead>\n<tr>\n<th>なまえ</th>\n<th>あたい</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>端末</td>\n<td>エミュレーター / Google Pixel 3 XL</td>\n</tr>\n<tr>\n<td>Android</td>\n<td>10</td>\n</tr>\n<tr>\n<td>minSdkVersion</td>\n<td>24（ARCoreのせい）</td>\n</tr>\n</tbody></table>\n<h1 id=\"実装\"><a href=\"#実装\" class=\"headerlink\" title=\"実装\"></a>実装</h1><p>MainActivityができてる段階まで来てください。</p>\n<h2 id=\"build-gradle（appフォルダの中）書き足す\"><a href=\"#build-gradle（appフォルダの中）書き足す\" class=\"headerlink\" title=\"build.gradle（appフォルダの中）書き足す\"></a>build.gradle（appフォルダの中）書き足す</h2><p>参考：<a href=\"https://developers.google.com/ar/develop/java/sceneform#configure-project\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/ar/develop/java/sceneform#configure-project</a></p>\n<p>こうなっていると思いますが、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &#39;com.android.application&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &#39;kotlin-android&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &#39;kotlin-android-extensions&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion 29</span><br><span class=\"line\">    buildToolsVersion &quot;29.0.2&quot;</span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId &quot;io.github.takusan23.aredittext&quot;</span><br><span class=\"line\">        minSdkVersion 24</span><br><span class=\"line\">        targetSdkVersion 29</span><br><span class=\"line\">        versionCode 1</span><br><span class=\"line\">        versionName &quot;1.0&quot;</span><br><span class=\"line\">        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled false</span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(&#39;proguard-android-optimize.txt&#39;), &#39;proguard-rules.pro&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])</span><br><span class=\"line\">    implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version&quot;</span><br><span class=\"line\">    implementation &#39;androidx.appcompat:appcompat:1.1.0&#39;</span><br><span class=\"line\">    implementation &#39;androidx.core:core-ktx:1.1.0&#39;</span><br><span class=\"line\">    implementation &#39;androidx.constraintlayout:constraintlayout:1.1.3&#39;</span><br><span class=\"line\">    testImplementation &#39;junit:junit:4.12&#39;</span><br><span class=\"line\">    androidTestImplementation &#39;androidx.test.ext:junit:1.1.1&#39;</span><br><span class=\"line\">    androidTestImplementation &#39;androidx.test.espresso:espresso-core:3.2.0&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ここから書き足していきます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &#39;com.android.application&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &#39;kotlin-android&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &#39;kotlin-android-extensions&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion 29</span><br><span class=\"line\">    buildToolsVersion &quot;29.0.2&quot;</span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId &quot;io.github.takusan23.aredittext&quot;</span><br><span class=\"line\">        minSdkVersion 24</span><br><span class=\"line\">        targetSdkVersion 29</span><br><span class=\"line\">        versionCode 1</span><br><span class=\"line\">        versionName &quot;1.0&quot;</span><br><span class=\"line\">        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled false</span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(&#39;proguard-android-optimize.txt&#39;), &#39;proguard-rules.pro&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;Java 8が必要みたい。</span><br><span class=\"line\">    compileOptions &#123;</span><br><span class=\"line\">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class=\"line\">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;ArFragmentなど    </span><br><span class=\"line\">    implementation &quot;com.google.ar.sceneform.ux:sceneform-ux:1.14.0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    implementation fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])</span><br><span class=\"line\">    implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version&quot;</span><br><span class=\"line\">    implementation &#39;androidx.appcompat:appcompat:1.1.0&#39;</span><br><span class=\"line\">    implementation &#39;androidx.core:core-ktx:1.1.0&#39;</span><br><span class=\"line\">    implementation &#39;androidx.constraintlayout:constraintlayout:1.1.3&#39;</span><br><span class=\"line\">    testImplementation &#39;junit:junit:4.12&#39;</span><br><span class=\"line\">    androidTestImplementation &#39;androidx.test.ext:junit:1.1.1&#39;</span><br><span class=\"line\">    androidTestImplementation &#39;androidx.test.espresso:espresso-core:3.2.0&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"AndroidManifest書き足す\"><a href=\"#AndroidManifest書き足す\" class=\"headerlink\" title=\"AndroidManifest書き足す\"></a>AndroidManifest書き足す</h1><p>参考：<a href=\"https://developers.google.com/ar/develop/java/sceneform#manifest\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/ar/develop/java/sceneform#manifest</a><br>まず上の方にこんなかんじに、</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">package</span>=<span class=\"string\">\"なんとか～\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">&lt;!-- Both \"AR Optional\" and \"AR Required\" apps require CAMERA permission. --&gt;</span></span><br><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.CAMERA\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Sceneform requires OpenGL ES 3.0 or later. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:glEsVersion</span>=<span class=\"string\">\"0x00030000\"</span> <span class=\"attr\">android:required</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Indicates that app requires ARCore (\"AR Required\"). Ensures the app is</span></span><br><span class=\"line\"><span class=\"comment\">    visible only in the Google Play Store on devices that support ARCore.</span></span><br><span class=\"line\"><span class=\"comment\">     For \"AR Optional\" apps remove this line. --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera.ar\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><figcaption><span>の中にも書き足します</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;xml</span><br><span class=\"line\">&lt;!-- Indicates that app requires ARCore (&quot;AR Required&quot;). Causes the Google</span><br><span class=\"line\">     Play Store to download and install Google Play Services for AR along</span><br><span class=\"line\">     with the app. For an &quot;AR Optional&quot; app, specify &quot;optional&quot; instead of</span><br><span class=\"line\">     &quot;required&quot;.</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;meta-data android:name&#x3D;&quot;com.google.ar.core&quot; android:value&#x3D;&quot;required&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>全部つけるとこうなります</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;manifest xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    package&#x3D;&quot;io.github.takusan23.aredittext&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- Both &quot;AR Optional&quot; and &quot;AR Required&quot; apps require CAMERA permission. --&gt;</span><br><span class=\"line\">    &lt;uses-permission android:name&#x3D;&quot;android.permission.CAMERA&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- Sceneform requires OpenGL ES 3.0 or later. --&gt;</span><br><span class=\"line\">    &lt;uses-feature android:glEsVersion&#x3D;&quot;0x00030000&quot; android:required&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- Indicates that app requires ARCore (&quot;AR Required&quot;). Ensures the app is</span><br><span class=\"line\">         visible only in the Google Play Store on devices that support ARCore.</span><br><span class=\"line\">         For &quot;AR Optional&quot; apps remove this line. --&gt;</span><br><span class=\"line\">    &lt;uses-feature android:name&#x3D;&quot;android.hardware.camera.ar&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;application</span><br><span class=\"line\">        android:allowBackup&#x3D;&quot;true&quot;</span><br><span class=\"line\">        android:icon&#x3D;&quot;@mipmap&#x2F;ic_launcher&quot;</span><br><span class=\"line\">        android:label&#x3D;&quot;@string&#x2F;app_name&quot;</span><br><span class=\"line\">        android:roundIcon&#x3D;&quot;@mipmap&#x2F;ic_launcher_round&quot;</span><br><span class=\"line\">        android:supportsRtl&#x3D;&quot;true&quot;</span><br><span class=\"line\">        android:theme&#x3D;&quot;@style&#x2F;AppTheme&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- Indicates that app requires ARCore (&quot;AR Required&quot;). Causes the Google</span><br><span class=\"line\">             Play Store to download and install Google Play Services for AR along</span><br><span class=\"line\">             with the app. For an &quot;AR Optional&quot; app, specify &quot;optional&quot; instead of</span><br><span class=\"line\">             &quot;required&quot;.</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\">        &lt;meta-data android:name&#x3D;&quot;com.google.ar.core&quot; android:value&#x3D;&quot;required&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;activity android:name&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\">            &lt;intent-filter&gt;</span><br><span class=\"line\">                &lt;action android:name&#x3D;&quot;android.intent.action.MAIN&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot; &#x2F;&gt;</span><br><span class=\"line\">            &lt;&#x2F;intent-filter&gt;</span><br><span class=\"line\">        &lt;&#x2F;activity&gt;</span><br><span class=\"line\">    &lt;&#x2F;application&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;manifest&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"MainActivityにFragmentを置く。\"><a href=\"#MainActivityにFragmentを置く。\" class=\"headerlink\" title=\"MainActivityにFragmentを置く。\"></a>MainActivityにFragmentを置く。</h1><p>参考：<a href=\"https://developers.google.com/ar/develop/java/sceneform#scene-view\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/ar/develop/java/sceneform#scene-view</a><br>ConstraintLayoutは使い方がよくわからないのでLinearLayoutに置き換えて、Fragmentをドラッグします。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/a152914b-b45a-b3bf-86ba-5348df99d42e.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>できたら<strong>ArFragment</strong>を選択して<strong>OK</strong>です！</p>\n<p>layout_heightの値を<strong>match_parent</strong>にして最大まで広げるようにしましょう。<br>それとidもfragmentだとわかりにくくなるので、ar_fragmentとかにしときましょう。</p>\n<p>xmlだとこうなっていると思います。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:orientation&#x3D;&quot;vertical&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot; &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;fragment</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;ar_fragment&quot;</span><br><span class=\"line\">        android:name&#x3D;&quot;com.google.ar.sceneform.ux.ArFragment&quot;</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot; &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Sceneformが利用可能かチェックする\"><a href=\"#Sceneformが利用可能かチェックする\" class=\"headerlink\" title=\"Sceneformが利用可能かチェックする\"></a>Sceneformが利用可能かチェックする</h1><p><a href=\"https://developers.google.com/ar/develop/java/sceneform\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/ar/develop/java/sceneform</a><br>には書いてありませんが、<a href=\"https://github.com/google-ar/sceneform-android-sdk/blob/master/samples/hellosceneform/app/src/main/java/com/google/ar/sceneform/samples/hellosceneform/HelloSceneformActivity.java\" target=\"_blank\" rel=\"noopener\">ARCoreのサンプル</a>には書いてあったので、Kotlinに変換して使います。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun checkIsSupportedDeviceOrFinish(activity: Activity): Boolean &#123;</span><br><span class=\"line\">    val MIN_OPENGL_VERSION &#x3D; 3.0</span><br><span class=\"line\">    if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.N) &#123;</span><br><span class=\"line\">        Toast.makeText(activity, &quot;SceneformにはAndroid N以降が必要です。&quot;, Toast.LENGTH_LONG).show()</span><br><span class=\"line\">        activity.finish()</span><br><span class=\"line\">        return false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    val openGlVersionString &#x3D; (activity.getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager).deviceConfigurationInfo.glEsVersion</span><br><span class=\"line\">    if (java.lang.Double.parseDouble(openGlVersionString) &lt; MIN_OPENGL_VERSION) &#123;</span><br><span class=\"line\">        Toast.makeText(activity, &quot;SceneformにはOpen GL 3.0以降が必要です。&quot;, Toast.LENGTH_LONG).show()</span><br><span class=\"line\">        activity.finish()</span><br><span class=\"line\">        return false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>これを<code>setContentView()</code>の前で使います。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState)</span><br><span class=\"line\">    &#x2F;&#x2F;条件満たしてなければActivity終了させる</span><br><span class=\"line\">    if(!checkIsSupportedDeviceOrFinish(this))&#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setContentView(R.layout.activity_main)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ArFragment取得\"><a href=\"#ArFragment取得\" class=\"headerlink\" title=\"ArFragment取得\"></a>ArFragment取得</h1><p>MainActivityで置いたArFragmentを取得します。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lateinit var arFragment: ArFragment</span><br><span class=\"line\">override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState)</span><br><span class=\"line\">    &#x2F;&#x2F;条件満たしてなければActivity終了させる</span><br><span class=\"line\">    if(!checkIsSupportedDeviceOrFinish(this))&#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setContentView(R.layout.activity_main)</span><br><span class=\"line\">    &#x2F;&#x2F;ArFragment取得</span><br><span class=\"line\">    arFragment &#x3D; supportFragmentManager.findFragmentById(R.id.ar_fragment) as ArFragment</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"起動してみる\"><a href=\"#起動してみる\" class=\"headerlink\" title=\"起動してみる\"></a>起動してみる</h1><p>ここまでで特に問題がなければ、<br>カメラの権限許可がきて、許可すると映ると思います。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/e802a9d9-3d6c-623c-da86-6e2f2ed416c4.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/0b97794e-8ed5-2915-e472-9206df1710e1.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>映れば成功です。ここまで間違えずついてこれてます。</p>\n<h1 id=\"いよいよViewを現実に表示させる・・・！\"><a href=\"#いよいよViewを現実に表示させる・・・！\" class=\"headerlink\" title=\"いよいよViewを現実に表示させる・・・！\"></a>いよいよViewを現実に表示させる・・・！</h1><p>参考：<a href=\"https://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets</a></p>\n<p>まずlayoutフォルダに<strong>ar_layout.xml</strong>という名前で作成します。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/521816ac-26b0-e798-6fb2-4c5613da107d.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>次に現実で表示させたいUI部品を並べます。<br>今回はTextViewを置きます。（タイトル詐欺回避）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">    android:background&#x3D;&quot;#ffffff&quot;</span><br><span class=\"line\">    android:orientation&#x3D;&quot;vertical&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;textView&quot;</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_margin&#x3D;&quot;10sp&quot;</span><br><span class=\"line\">        android:gravity&#x3D;&quot;center&quot;</span><br><span class=\"line\">        android:text&#x3D;&quot;てきすとだよー&quot; &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ARで扱えるように\"><a href=\"#ARで扱えるように\" class=\"headerlink\" title=\"ARで扱えるように\"></a>ARで扱えるように</h2><p>参考：<a href=\"https://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;レイアウトをARに・・・</span><br><span class=\"line\">lateinit var viewRenderable: ViewRenderable</span><br></pre></td></tr></table></figure>\n\n<p>読み込みます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;レイアウトを読み込む</span><br><span class=\"line\">ViewRenderable.builder()</span><br><span class=\"line\">    .setView(this, R.layout.ar_layout)</span><br><span class=\"line\">    .build()</span><br><span class=\"line\">    .thenAccept &#123; renderable -&gt; viewRenderable &#x3D; renderable &#125; &#x2F;&#x2F;読み込み成功</span><br><span class=\"line\">    .exceptionally &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;読み込み失敗</span><br><span class=\"line\">        it.printStackTrace()</span><br><span class=\"line\">        Toast.makeText(this, &quot;読み込みに失敗しました。&quot;, Toast.LENGTH_LONG).show()</span><br><span class=\"line\">        null</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>最後に押したらレイアウトをARで表示させるところを</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arFragment.setOnTapArPlaneListener &#123; hitResult, plane, motionEvent -&gt;</span><br><span class=\"line\">    if (::viewRenderable.isInitialized) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;初期化済みのとき、利用可能</span><br><span class=\"line\">        &#x2F;&#x2F; Create the Anchor.</span><br><span class=\"line\">        val anchor &#x3D; hitResult.createAnchor()</span><br><span class=\"line\">        val anchorNode &#x3D; AnchorNode(anchor)</span><br><span class=\"line\">        anchorNode.setParent(arFragment.arSceneView.scene)</span><br><span class=\"line\">        &#x2F;&#x2F; Create the transformable andy and add it to the anchor.</span><br><span class=\"line\">        val node &#x3D; TransformableNode(arFragment.transformationSystem)</span><br><span class=\"line\">        node.setParent(anchorNode)</span><br><span class=\"line\">        node.renderable &#x3D; viewRenderable</span><br><span class=\"line\">        node.select()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>これで動くはずです！！！実行してみましょう！！！</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/065d6e9d-c470-8fd6-5d6e-fe5b853aa8f4.png\" alt=\"Screenshot_1577028389.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_1577028389.png</div>\n            </figure>\n\n<p>てきすとだよー</p>\n<h2 id=\"押したら消す\"><a href=\"#押したら消す\" class=\"headerlink\" title=\"押したら消す\"></a>押したら消す</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.setOnTapListener &#123; hitTestResult, motionEvent -&gt; </span><br><span class=\"line\">    node.isEnabled &#x3D; false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>isEnabledにtrueで消えますがこれでいいのかは不明。誰か頼んだ</p>\n<h2 id=\"ARで表示したTextViewのテキストを変更したい\"><a href=\"#ARで表示したTextViewのテキストを変更したい\" class=\"headerlink\" title=\"ARで表示したTextViewのテキストを変更したい\"></a>ARで表示したTextViewのテキストを変更したい</h2><p>MainActivityにEditTextとボタンを置きます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:orientation&#x3D;&quot;vertical&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot; &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;fragment</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;ar_fragment&quot;</span><br><span class=\"line\">        android:name&#x3D;&quot;com.google.ar.sceneform.ux.ArFragment&quot;</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_weight&#x3D;&quot;1&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:orientation&#x3D;&quot;horizontal&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;EditText</span><br><span class=\"line\">            android:id&#x3D;&quot;@+id&#x2F;ar_change_textview&quot;</span><br><span class=\"line\">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">            android:layout_weight&#x3D;&quot;1&quot;</span><br><span class=\"line\">            android:ems&#x3D;&quot;10&quot;</span><br><span class=\"line\">            android:inputType&#x3D;&quot;textPersonName&quot;</span><br><span class=\"line\">            android:text&#x3D;&quot;てきすとだよー&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;Button</span><br><span class=\"line\">            android:id&#x3D;&quot;@+id&#x2F;ar_change_button&quot;</span><br><span class=\"line\">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">            android:text&#x3D;&quot;変更&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>そしたらボタンを押したらテキストを変更する処理を書きます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;テキスト変更</span><br><span class=\"line\">ar_change_button.setOnClickListener &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;テキスト取得</span><br><span class=\"line\">    val text &#x3D; ar_change_textview.text.toString()</span><br><span class=\"line\">    &#x2F;&#x2F;ARで表示するレイアウト取得</span><br><span class=\"line\">    val linearLayout &#x3D; viewRenderable.view as LinearLayout</span><br><span class=\"line\">    &#x2F;&#x2F;TextView取得</span><br><span class=\"line\">    val textView &#x3D; linearLayout.findViewById&lt;TextView&gt;(R.id.textView)</span><br><span class=\"line\">    &#x2F;&#x2F;変更</span><br><span class=\"line\">    textView.text &#x3D; text</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>動くはずです。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/52a78edd-fb8a-546b-5277-7f8201e71db4.png\" alt=\"Screenshot_1577029034.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_1577029034.png</div>\n            </figure>\n\n<p>なんかEditTextの部分が黒くなるけどなんで？</p>\n<h2 id=\"写真にして保存する\"><a href=\"#写真にして保存する\" class=\"headerlink\" title=\"写真にして保存する\"></a>写真にして保存する</h2><p>おまけです。<br>疲れたのでコードだけ。レイアウトにボタンを追加してidを「ar_take_a_picture」にしてください。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;撮影ボタン押したとき</span><br><span class=\"line\">ar_take_a_picture.setOnClickListener &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;PixelCopy APIを利用する。のでOreo以降じゃないと利用できません。</span><br><span class=\"line\">    val bitmap &#x3D; Bitmap.createBitmap(</span><br><span class=\"line\">        arFragment.view?.width ?: 100,</span><br><span class=\"line\">        arFragment.view?.height ?: 100,</span><br><span class=\"line\">        Bitmap.Config.ARGB_8888</span><br><span class=\"line\">    )</span><br><span class=\"line\">    val intArray &#x3D; IntArray(2)</span><br><span class=\"line\">    arFragment.view?.getLocationInWindow(intArray)</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        PixelCopy.request(</span><br><span class=\"line\">            arFragment.arSceneView as SurfaceView, &#x2F;&#x2F;SurfaceViewを継承してるらしい。windowだと真っ暗なので注意！</span><br><span class=\"line\">            Rect(</span><br><span class=\"line\">                intArray[0],</span><br><span class=\"line\">                intArray[1],</span><br><span class=\"line\">                intArray[0] + (arFragment.view?.width ?: 0),</span><br><span class=\"line\">                intArray[1] + (arFragment.view?.height ?: 0)</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            bitmap,</span><br><span class=\"line\">            &#123; copyResult: Int -&gt;</span><br><span class=\"line\">                if (copyResult &#x3D;&#x3D; PixelCopy.SUCCESS) &#123;</span><br><span class=\"line\">                    &#x2F;&#x2F;成功時</span><br><span class=\"line\">                    &#x2F;&#x2F;ここのフォルダは自由に使っていい場所（サンドボックス）</span><br><span class=\"line\">                  val mediaFolder &#x3D; externalMediaDirs.first()</span><br><span class=\"line\">                  &#x2F;&#x2F;写真ファイル作成</span><br><span class=\"line\">                  val file &#x3D; File(&quot;$&#123;mediaFolder.path&#125;&#x2F;$&#123;System.currentTimeMillis()&#125;.jpg&quot;)</span><br><span class=\"line\">                  &#x2F;&#x2F;Bitmap保存</span><br><span class=\"line\">                  bitmap.compress(Bitmap.CompressFormat.JPEG, 100, file.outputStream())</span><br><span class=\"line\">                  Toast.makeText(this, &quot;保存しました&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            Handler()</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125; catch (e: IllegalArgumentException) &#123;</span><br><span class=\"line\">        e.printStackTrace()</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, &quot;失敗しました。&quot;, Toast.LENGTH_LONG).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>?:の値がくっそ雑だけどゆるして<br>Android 10で動作確認済です。対象範囲別ストレージ対策。<br>写真データは<br>/sdcard/Android/media/パッケージID<br>に入っています。</p>\n<h1 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h1><p>GitHubに公開しておきます。<br><a href=\"https://github.com/takusan23/AREditText\" target=\"_blank\" rel=\"noopener\">https://github.com/takusan23/AREditText</a></p>\n<p>ついでに参考にしたプロジェクトも。<br><a href=\"https://github.com/google-ar/sceneform-android-sdk/tree/master/samples/hellosceneform\" target=\"_blank\" rel=\"noopener\">https://github.com/google-ar/sceneform-android-sdk/tree/master/samples/hellosceneform</a></p>\n<p>PixelCopy参考にしました。<br><a href=\"https://friegen.xyz/getdrawingcache-deprecated/\" target=\"_blank\" rel=\"noopener\">https://friegen.xyz/getdrawingcache-deprecated/</a></p>\n<p>おつです。８８８８８８</p>\n",
                "site": {
                    "data": {}
                },
                "excerpt": "",
                "more": "<p>AR触ってみたい。</p>\n<h1 id=\"widgets（UIの部品-例：TextView、ImageView）がARで表示できるらしい\"><a href=\"#widgets（UIの部品-例：TextView、ImageView）がARで表示できるらしい\" class=\"headerlink\" title=\"widgets（UIの部品 例：TextView、ImageView）がARで表示できるらしい\"></a>widgets（UIの部品 例：TextView、ImageView）がARで表示できるらしい</h1><p><a href=\"https://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets</a></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/6f5e59b3-b466-aefe-ec75-11657ee1845f.png\" alt=\"Screenshot_1577032540.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_1577032540.png</div>\n            </figure>\n\n\n<p>ここ。sceneformってなんぞやって話だけどこれできたらくっそ面白そうだと思ったので、<br>今回はTextViewをAR上に表示させるところまでやろうと思います。</p>\n<h2 id=\"エミュレーターでARCoreアプリを動かすために\"><a href=\"#エミュレーターでARCoreアプリを動かすために\" class=\"headerlink\" title=\"エミュレーターでARCoreアプリを動かすために\"></a>エミュレーターでARCoreアプリを動かすために</h2><p>いやPixelとかGalaxyとか使いますからって方は飛ばしていいぞ。<br><del>てかARCore対応端末無いのにARアプリ作ろうとしてる人、どこからやる気が出てるんだ。</del></p>\n<h3 id=\"Google-Play-開発者サービス（AR）を入れます\"><a href=\"#Google-Play-開発者サービス（AR）を入れます\" class=\"headerlink\" title=\"Google Play 開発者サービス（AR）を入れます\"></a>Google Play 開発者サービス（AR）を入れます</h3><p><a href=\"https://github.com/google-ar/arcore-android-sdk/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/google-ar/arcore-android-sdk/releases</a><br>ここからAPKをDLして、エミュレーターにドラッグアンドドロップしてインストールしてください。</p>\n<p>今回は記事作成時最新Ver（Google_Play_Services_for_AR_1.14.1_x86_for_emulator.apk）を入れます。</p>\n<p>成功するとアプリ一覧画面に表示されると思います。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/643c568b-f56d-f61d-3b06-f995abbff688.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<h1 id=\"環境\"><a href=\"#環境\" class=\"headerlink\" title=\"環境\"></a>環境</h1><table>\n<thead>\n<tr>\n<th>なまえ</th>\n<th>あたい</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>端末</td>\n<td>エミュレーター / Google Pixel 3 XL</td>\n</tr>\n<tr>\n<td>Android</td>\n<td>10</td>\n</tr>\n<tr>\n<td>minSdkVersion</td>\n<td>24（ARCoreのせい）</td>\n</tr>\n</tbody></table>\n<h1 id=\"実装\"><a href=\"#実装\" class=\"headerlink\" title=\"実装\"></a>実装</h1><p>MainActivityができてる段階まで来てください。</p>\n<h2 id=\"build-gradle（appフォルダの中）書き足す\"><a href=\"#build-gradle（appフォルダの中）書き足す\" class=\"headerlink\" title=\"build.gradle（appフォルダの中）書き足す\"></a>build.gradle（appフォルダの中）書き足す</h2><p>参考：<a href=\"https://developers.google.com/ar/develop/java/sceneform#configure-project\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/ar/develop/java/sceneform#configure-project</a></p>\n<p>こうなっていると思いますが、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &#39;com.android.application&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &#39;kotlin-android&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &#39;kotlin-android-extensions&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion 29</span><br><span class=\"line\">    buildToolsVersion &quot;29.0.2&quot;</span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId &quot;io.github.takusan23.aredittext&quot;</span><br><span class=\"line\">        minSdkVersion 24</span><br><span class=\"line\">        targetSdkVersion 29</span><br><span class=\"line\">        versionCode 1</span><br><span class=\"line\">        versionName &quot;1.0&quot;</span><br><span class=\"line\">        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled false</span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(&#39;proguard-android-optimize.txt&#39;), &#39;proguard-rules.pro&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])</span><br><span class=\"line\">    implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version&quot;</span><br><span class=\"line\">    implementation &#39;androidx.appcompat:appcompat:1.1.0&#39;</span><br><span class=\"line\">    implementation &#39;androidx.core:core-ktx:1.1.0&#39;</span><br><span class=\"line\">    implementation &#39;androidx.constraintlayout:constraintlayout:1.1.3&#39;</span><br><span class=\"line\">    testImplementation &#39;junit:junit:4.12&#39;</span><br><span class=\"line\">    androidTestImplementation &#39;androidx.test.ext:junit:1.1.1&#39;</span><br><span class=\"line\">    androidTestImplementation &#39;androidx.test.espresso:espresso-core:3.2.0&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ここから書き足していきます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &#39;com.android.application&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &#39;kotlin-android&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &#39;kotlin-android-extensions&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion 29</span><br><span class=\"line\">    buildToolsVersion &quot;29.0.2&quot;</span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId &quot;io.github.takusan23.aredittext&quot;</span><br><span class=\"line\">        minSdkVersion 24</span><br><span class=\"line\">        targetSdkVersion 29</span><br><span class=\"line\">        versionCode 1</span><br><span class=\"line\">        versionName &quot;1.0&quot;</span><br><span class=\"line\">        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled false</span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(&#39;proguard-android-optimize.txt&#39;), &#39;proguard-rules.pro&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;Java 8が必要みたい。</span><br><span class=\"line\">    compileOptions &#123;</span><br><span class=\"line\">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class=\"line\">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;ArFragmentなど    </span><br><span class=\"line\">    implementation &quot;com.google.ar.sceneform.ux:sceneform-ux:1.14.0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    implementation fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])</span><br><span class=\"line\">    implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version&quot;</span><br><span class=\"line\">    implementation &#39;androidx.appcompat:appcompat:1.1.0&#39;</span><br><span class=\"line\">    implementation &#39;androidx.core:core-ktx:1.1.0&#39;</span><br><span class=\"line\">    implementation &#39;androidx.constraintlayout:constraintlayout:1.1.3&#39;</span><br><span class=\"line\">    testImplementation &#39;junit:junit:4.12&#39;</span><br><span class=\"line\">    androidTestImplementation &#39;androidx.test.ext:junit:1.1.1&#39;</span><br><span class=\"line\">    androidTestImplementation &#39;androidx.test.espresso:espresso-core:3.2.0&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"AndroidManifest書き足す\"><a href=\"#AndroidManifest書き足す\" class=\"headerlink\" title=\"AndroidManifest書き足す\"></a>AndroidManifest書き足す</h1><p>参考：<a href=\"https://developers.google.com/ar/develop/java/sceneform#manifest\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/ar/develop/java/sceneform#manifest</a><br>まず上の方にこんなかんじに、</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">package</span>=<span class=\"string\">\"なんとか～\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">&lt;!-- Both \"AR Optional\" and \"AR Required\" apps require CAMERA permission. --&gt;</span></span><br><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.CAMERA\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Sceneform requires OpenGL ES 3.0 or later. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:glEsVersion</span>=<span class=\"string\">\"0x00030000\"</span> <span class=\"attr\">android:required</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Indicates that app requires ARCore (\"AR Required\"). Ensures the app is</span></span><br><span class=\"line\"><span class=\"comment\">    visible only in the Google Play Store on devices that support ARCore.</span></span><br><span class=\"line\"><span class=\"comment\">     For \"AR Optional\" apps remove this line. --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera.ar\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><figcaption><span>の中にも書き足します</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;xml</span><br><span class=\"line\">&lt;!-- Indicates that app requires ARCore (&quot;AR Required&quot;). Causes the Google</span><br><span class=\"line\">     Play Store to download and install Google Play Services for AR along</span><br><span class=\"line\">     with the app. For an &quot;AR Optional&quot; app, specify &quot;optional&quot; instead of</span><br><span class=\"line\">     &quot;required&quot;.</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;meta-data android:name&#x3D;&quot;com.google.ar.core&quot; android:value&#x3D;&quot;required&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>全部つけるとこうなります</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;manifest xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    package&#x3D;&quot;io.github.takusan23.aredittext&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- Both &quot;AR Optional&quot; and &quot;AR Required&quot; apps require CAMERA permission. --&gt;</span><br><span class=\"line\">    &lt;uses-permission android:name&#x3D;&quot;android.permission.CAMERA&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- Sceneform requires OpenGL ES 3.0 or later. --&gt;</span><br><span class=\"line\">    &lt;uses-feature android:glEsVersion&#x3D;&quot;0x00030000&quot; android:required&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- Indicates that app requires ARCore (&quot;AR Required&quot;). Ensures the app is</span><br><span class=\"line\">         visible only in the Google Play Store on devices that support ARCore.</span><br><span class=\"line\">         For &quot;AR Optional&quot; apps remove this line. --&gt;</span><br><span class=\"line\">    &lt;uses-feature android:name&#x3D;&quot;android.hardware.camera.ar&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;application</span><br><span class=\"line\">        android:allowBackup&#x3D;&quot;true&quot;</span><br><span class=\"line\">        android:icon&#x3D;&quot;@mipmap&#x2F;ic_launcher&quot;</span><br><span class=\"line\">        android:label&#x3D;&quot;@string&#x2F;app_name&quot;</span><br><span class=\"line\">        android:roundIcon&#x3D;&quot;@mipmap&#x2F;ic_launcher_round&quot;</span><br><span class=\"line\">        android:supportsRtl&#x3D;&quot;true&quot;</span><br><span class=\"line\">        android:theme&#x3D;&quot;@style&#x2F;AppTheme&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- Indicates that app requires ARCore (&quot;AR Required&quot;). Causes the Google</span><br><span class=\"line\">             Play Store to download and install Google Play Services for AR along</span><br><span class=\"line\">             with the app. For an &quot;AR Optional&quot; app, specify &quot;optional&quot; instead of</span><br><span class=\"line\">             &quot;required&quot;.</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\">        &lt;meta-data android:name&#x3D;&quot;com.google.ar.core&quot; android:value&#x3D;&quot;required&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;activity android:name&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\">            &lt;intent-filter&gt;</span><br><span class=\"line\">                &lt;action android:name&#x3D;&quot;android.intent.action.MAIN&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot; &#x2F;&gt;</span><br><span class=\"line\">            &lt;&#x2F;intent-filter&gt;</span><br><span class=\"line\">        &lt;&#x2F;activity&gt;</span><br><span class=\"line\">    &lt;&#x2F;application&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;manifest&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"MainActivityにFragmentを置く。\"><a href=\"#MainActivityにFragmentを置く。\" class=\"headerlink\" title=\"MainActivityにFragmentを置く。\"></a>MainActivityにFragmentを置く。</h1><p>参考：<a href=\"https://developers.google.com/ar/develop/java/sceneform#scene-view\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/ar/develop/java/sceneform#scene-view</a><br>ConstraintLayoutは使い方がよくわからないのでLinearLayoutに置き換えて、Fragmentをドラッグします。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/a152914b-b45a-b3bf-86ba-5348df99d42e.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>できたら<strong>ArFragment</strong>を選択して<strong>OK</strong>です！</p>\n<p>layout_heightの値を<strong>match_parent</strong>にして最大まで広げるようにしましょう。<br>それとidもfragmentだとわかりにくくなるので、ar_fragmentとかにしときましょう。</p>\n<p>xmlだとこうなっていると思います。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:orientation&#x3D;&quot;vertical&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot; &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;fragment</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;ar_fragment&quot;</span><br><span class=\"line\">        android:name&#x3D;&quot;com.google.ar.sceneform.ux.ArFragment&quot;</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot; &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Sceneformが利用可能かチェックする\"><a href=\"#Sceneformが利用可能かチェックする\" class=\"headerlink\" title=\"Sceneformが利用可能かチェックする\"></a>Sceneformが利用可能かチェックする</h1><p><a href=\"https://developers.google.com/ar/develop/java/sceneform\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/ar/develop/java/sceneform</a><br>には書いてありませんが、<a href=\"https://github.com/google-ar/sceneform-android-sdk/blob/master/samples/hellosceneform/app/src/main/java/com/google/ar/sceneform/samples/hellosceneform/HelloSceneformActivity.java\" target=\"_blank\" rel=\"noopener\">ARCoreのサンプル</a>には書いてあったので、Kotlinに変換して使います。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun checkIsSupportedDeviceOrFinish(activity: Activity): Boolean &#123;</span><br><span class=\"line\">    val MIN_OPENGL_VERSION &#x3D; 3.0</span><br><span class=\"line\">    if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.N) &#123;</span><br><span class=\"line\">        Toast.makeText(activity, &quot;SceneformにはAndroid N以降が必要です。&quot;, Toast.LENGTH_LONG).show()</span><br><span class=\"line\">        activity.finish()</span><br><span class=\"line\">        return false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    val openGlVersionString &#x3D; (activity.getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager).deviceConfigurationInfo.glEsVersion</span><br><span class=\"line\">    if (java.lang.Double.parseDouble(openGlVersionString) &lt; MIN_OPENGL_VERSION) &#123;</span><br><span class=\"line\">        Toast.makeText(activity, &quot;SceneformにはOpen GL 3.0以降が必要です。&quot;, Toast.LENGTH_LONG).show()</span><br><span class=\"line\">        activity.finish()</span><br><span class=\"line\">        return false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>これを<code>setContentView()</code>の前で使います。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState)</span><br><span class=\"line\">    &#x2F;&#x2F;条件満たしてなければActivity終了させる</span><br><span class=\"line\">    if(!checkIsSupportedDeviceOrFinish(this))&#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setContentView(R.layout.activity_main)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ArFragment取得\"><a href=\"#ArFragment取得\" class=\"headerlink\" title=\"ArFragment取得\"></a>ArFragment取得</h1><p>MainActivityで置いたArFragmentを取得します。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lateinit var arFragment: ArFragment</span><br><span class=\"line\">override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState)</span><br><span class=\"line\">    &#x2F;&#x2F;条件満たしてなければActivity終了させる</span><br><span class=\"line\">    if(!checkIsSupportedDeviceOrFinish(this))&#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setContentView(R.layout.activity_main)</span><br><span class=\"line\">    &#x2F;&#x2F;ArFragment取得</span><br><span class=\"line\">    arFragment &#x3D; supportFragmentManager.findFragmentById(R.id.ar_fragment) as ArFragment</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"起動してみる\"><a href=\"#起動してみる\" class=\"headerlink\" title=\"起動してみる\"></a>起動してみる</h1><p>ここまでで特に問題がなければ、<br>カメラの権限許可がきて、許可すると映ると思います。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/e802a9d9-3d6c-623c-da86-6e2f2ed416c4.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/0b97794e-8ed5-2915-e472-9206df1710e1.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>映れば成功です。ここまで間違えずついてこれてます。</p>\n<h1 id=\"いよいよViewを現実に表示させる・・・！\"><a href=\"#いよいよViewを現実に表示させる・・・！\" class=\"headerlink\" title=\"いよいよViewを現実に表示させる・・・！\"></a>いよいよViewを現実に表示させる・・・！</h1><p>参考：<a href=\"https://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets</a></p>\n<p>まずlayoutフォルダに<strong>ar_layout.xml</strong>という名前で作成します。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/521816ac-26b0-e798-6fb2-4c5613da107d.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>次に現実で表示させたいUI部品を並べます。<br>今回はTextViewを置きます。（タイトル詐欺回避）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">    android:background&#x3D;&quot;#ffffff&quot;</span><br><span class=\"line\">    android:orientation&#x3D;&quot;vertical&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;textView&quot;</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_margin&#x3D;&quot;10sp&quot;</span><br><span class=\"line\">        android:gravity&#x3D;&quot;center&quot;</span><br><span class=\"line\">        android:text&#x3D;&quot;てきすとだよー&quot; &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ARで扱えるように\"><a href=\"#ARで扱えるように\" class=\"headerlink\" title=\"ARで扱えるように\"></a>ARで扱えるように</h2><p>参考：<a href=\"https://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/ar/develop/java/sceneform/create-renderables#create_from_android_widgets</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;レイアウトをARに・・・</span><br><span class=\"line\">lateinit var viewRenderable: ViewRenderable</span><br></pre></td></tr></table></figure>\n\n<p>読み込みます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;レイアウトを読み込む</span><br><span class=\"line\">ViewRenderable.builder()</span><br><span class=\"line\">    .setView(this, R.layout.ar_layout)</span><br><span class=\"line\">    .build()</span><br><span class=\"line\">    .thenAccept &#123; renderable -&gt; viewRenderable &#x3D; renderable &#125; &#x2F;&#x2F;読み込み成功</span><br><span class=\"line\">    .exceptionally &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;読み込み失敗</span><br><span class=\"line\">        it.printStackTrace()</span><br><span class=\"line\">        Toast.makeText(this, &quot;読み込みに失敗しました。&quot;, Toast.LENGTH_LONG).show()</span><br><span class=\"line\">        null</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>最後に押したらレイアウトをARで表示させるところを</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arFragment.setOnTapArPlaneListener &#123; hitResult, plane, motionEvent -&gt;</span><br><span class=\"line\">    if (::viewRenderable.isInitialized) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;初期化済みのとき、利用可能</span><br><span class=\"line\">        &#x2F;&#x2F; Create the Anchor.</span><br><span class=\"line\">        val anchor &#x3D; hitResult.createAnchor()</span><br><span class=\"line\">        val anchorNode &#x3D; AnchorNode(anchor)</span><br><span class=\"line\">        anchorNode.setParent(arFragment.arSceneView.scene)</span><br><span class=\"line\">        &#x2F;&#x2F; Create the transformable andy and add it to the anchor.</span><br><span class=\"line\">        val node &#x3D; TransformableNode(arFragment.transformationSystem)</span><br><span class=\"line\">        node.setParent(anchorNode)</span><br><span class=\"line\">        node.renderable &#x3D; viewRenderable</span><br><span class=\"line\">        node.select()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>これで動くはずです！！！実行してみましょう！！！</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/065d6e9d-c470-8fd6-5d6e-fe5b853aa8f4.png\" alt=\"Screenshot_1577028389.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_1577028389.png</div>\n            </figure>\n\n<p>てきすとだよー</p>\n<h2 id=\"押したら消す\"><a href=\"#押したら消す\" class=\"headerlink\" title=\"押したら消す\"></a>押したら消す</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.setOnTapListener &#123; hitTestResult, motionEvent -&gt; </span><br><span class=\"line\">    node.isEnabled &#x3D; false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>isEnabledにtrueで消えますがこれでいいのかは不明。誰か頼んだ</p>\n<h2 id=\"ARで表示したTextViewのテキストを変更したい\"><a href=\"#ARで表示したTextViewのテキストを変更したい\" class=\"headerlink\" title=\"ARで表示したTextViewのテキストを変更したい\"></a>ARで表示したTextViewのテキストを変更したい</h2><p>MainActivityにEditTextとボタンを置きます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:orientation&#x3D;&quot;vertical&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot; &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;fragment</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;ar_fragment&quot;</span><br><span class=\"line\">        android:name&#x3D;&quot;com.google.ar.sceneform.ux.ArFragment&quot;</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_weight&#x3D;&quot;1&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:orientation&#x3D;&quot;horizontal&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;EditText</span><br><span class=\"line\">            android:id&#x3D;&quot;@+id&#x2F;ar_change_textview&quot;</span><br><span class=\"line\">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">            android:layout_weight&#x3D;&quot;1&quot;</span><br><span class=\"line\">            android:ems&#x3D;&quot;10&quot;</span><br><span class=\"line\">            android:inputType&#x3D;&quot;textPersonName&quot;</span><br><span class=\"line\">            android:text&#x3D;&quot;てきすとだよー&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;Button</span><br><span class=\"line\">            android:id&#x3D;&quot;@+id&#x2F;ar_change_button&quot;</span><br><span class=\"line\">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">            android:text&#x3D;&quot;変更&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>そしたらボタンを押したらテキストを変更する処理を書きます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;テキスト変更</span><br><span class=\"line\">ar_change_button.setOnClickListener &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;テキスト取得</span><br><span class=\"line\">    val text &#x3D; ar_change_textview.text.toString()</span><br><span class=\"line\">    &#x2F;&#x2F;ARで表示するレイアウト取得</span><br><span class=\"line\">    val linearLayout &#x3D; viewRenderable.view as LinearLayout</span><br><span class=\"line\">    &#x2F;&#x2F;TextView取得</span><br><span class=\"line\">    val textView &#x3D; linearLayout.findViewById&lt;TextView&gt;(R.id.textView)</span><br><span class=\"line\">    &#x2F;&#x2F;変更</span><br><span class=\"line\">    textView.text &#x3D; text</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>動くはずです。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/52a78edd-fb8a-546b-5277-7f8201e71db4.png\" alt=\"Screenshot_1577029034.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_1577029034.png</div>\n            </figure>\n\n<p>なんかEditTextの部分が黒くなるけどなんで？</p>\n<h2 id=\"写真にして保存する\"><a href=\"#写真にして保存する\" class=\"headerlink\" title=\"写真にして保存する\"></a>写真にして保存する</h2><p>おまけです。<br>疲れたのでコードだけ。レイアウトにボタンを追加してidを「ar_take_a_picture」にしてください。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;撮影ボタン押したとき</span><br><span class=\"line\">ar_take_a_picture.setOnClickListener &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;PixelCopy APIを利用する。のでOreo以降じゃないと利用できません。</span><br><span class=\"line\">    val bitmap &#x3D; Bitmap.createBitmap(</span><br><span class=\"line\">        arFragment.view?.width ?: 100,</span><br><span class=\"line\">        arFragment.view?.height ?: 100,</span><br><span class=\"line\">        Bitmap.Config.ARGB_8888</span><br><span class=\"line\">    )</span><br><span class=\"line\">    val intArray &#x3D; IntArray(2)</span><br><span class=\"line\">    arFragment.view?.getLocationInWindow(intArray)</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        PixelCopy.request(</span><br><span class=\"line\">            arFragment.arSceneView as SurfaceView, &#x2F;&#x2F;SurfaceViewを継承してるらしい。windowだと真っ暗なので注意！</span><br><span class=\"line\">            Rect(</span><br><span class=\"line\">                intArray[0],</span><br><span class=\"line\">                intArray[1],</span><br><span class=\"line\">                intArray[0] + (arFragment.view?.width ?: 0),</span><br><span class=\"line\">                intArray[1] + (arFragment.view?.height ?: 0)</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            bitmap,</span><br><span class=\"line\">            &#123; copyResult: Int -&gt;</span><br><span class=\"line\">                if (copyResult &#x3D;&#x3D; PixelCopy.SUCCESS) &#123;</span><br><span class=\"line\">                    &#x2F;&#x2F;成功時</span><br><span class=\"line\">                    &#x2F;&#x2F;ここのフォルダは自由に使っていい場所（サンドボックス）</span><br><span class=\"line\">                  val mediaFolder &#x3D; externalMediaDirs.first()</span><br><span class=\"line\">                  &#x2F;&#x2F;写真ファイル作成</span><br><span class=\"line\">                  val file &#x3D; File(&quot;$&#123;mediaFolder.path&#125;&#x2F;$&#123;System.currentTimeMillis()&#125;.jpg&quot;)</span><br><span class=\"line\">                  &#x2F;&#x2F;Bitmap保存</span><br><span class=\"line\">                  bitmap.compress(Bitmap.CompressFormat.JPEG, 100, file.outputStream())</span><br><span class=\"line\">                  Toast.makeText(this, &quot;保存しました&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            Handler()</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125; catch (e: IllegalArgumentException) &#123;</span><br><span class=\"line\">        e.printStackTrace()</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, &quot;失敗しました。&quot;, Toast.LENGTH_LONG).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>?:の値がくっそ雑だけどゆるして<br>Android 10で動作確認済です。対象範囲別ストレージ対策。<br>写真データは<br>/sdcard/Android/media/パッケージID<br>に入っています。</p>\n<h1 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h1><p>GitHubに公開しておきます。<br><a href=\"https://github.com/takusan23/AREditText\" target=\"_blank\" rel=\"noopener\">https://github.com/takusan23/AREditText</a></p>\n<p>ついでに参考にしたプロジェクトも。<br><a href=\"https://github.com/google-ar/sceneform-android-sdk/tree/master/samples/hellosceneform\" target=\"_blank\" rel=\"noopener\">https://github.com/google-ar/sceneform-android-sdk/tree/master/samples/hellosceneform</a></p>\n<p>PixelCopy参考にしました。<br><a href=\"https://friegen.xyz/getdrawingcache-deprecated/\" target=\"_blank\" rel=\"noopener\">https://friegen.xyz/getdrawingcache-deprecated/</a></p>\n<p>おつです。８８８８８８</p>\n"
            },
            {
                "_content": "Android 11からストレージ読み込み権限があれば生パスでFileが使える。\n\nあとToastにコールバックが追加されてた。使うの？",
                "source": "_posts/Android11とか.md",
                "raw": "Android 11からストレージ読み込み権限があれば生パスでFileが使える。\n\nあとToastにコールバックが追加されてた。使うの？",
                "slug": "Android11とか",
                "published": 1,
                "date": "2020-04-05T16:27:15.554Z",
                "updated": "2020-04-05T16:27:15.587Z",
                "title": "Android11とか",
                "comments": 1,
                "layout": "post",
                "photos": [],
                "link": "",
                "_id": "ck8r8f7bw000128vugzvo6vag",
                "content": "<p>Android 11からストレージ読み込み権限があれば生パスでFileが使える。</p>\n<p>あとToastにコールバックが追加されてた。使うの？</p>\n",
                "site": {
                    "data": {}
                },
                "excerpt": "",
                "more": "<p>Android 11からストレージ読み込み権限があれば生パスでFileが使える。</p>\n<p>あとToastにコールバックが追加されてた。使うの？</p>\n"
            },
            {
                "title": "【Android】 台風に備えて気圧を測れるアプリを作る",
                "author": "takusan_23",
                "slide": false,
                "_content": "こんにちは。中間テスト終わりました。\n今回はやばい台風が来るそうなので気圧が測れるアプリを作りたいと思います。\n\n## スマホにはいろんなセンサーがついている\nせっかくなので使いましょう。\nというのは建前で本当は [この記事](https://qiita.com/bellx2/items/fc1de7197f583001ca59) でやってることAndroidでも作れるのではと思ったのが本当の理由。\n\n## 紹介\n|                    |            |\n|--------------------|------------|\n| 端末               | Pixel 3 XL |\n| Android バージョン | Android 10 |\n| 最低バージョン     | ろりぽっぷ |\n| 言語               | Kotlin     |\n\n## 実装\n### レイアウト\n真ん中にTextViewを置いただけのものとする。\n面倒なのでConstraintLayoutをそのまま使うことにする。\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"50dp\"\n        android:id=\"@+id/barometer_tv\"\n        android:text=\"Hello World!\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n### コード\n\nSensor.TYPE_PRESSUREが気圧計になります。\nonDestroy()で登録を解除しています。\n受け取るセンサーがほかにもあるときは```event?.sensor?.type```を利用して分けましょう。\n\n\n```kotlin:MainActivity.kt\n    lateinit var sensorManager: SensorManager\n    lateinit var sensorEventListener: SensorEventListener\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        sensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager\n        //今回は気圧計\n        val sensorList = sensorManager.getSensorList(Sensor.TYPE_PRESSURE)\n        //受け取る\n        sensorEventListener = object : SensorEventListener {\n            override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {\n                //つかわん\n            }\n\n            override fun onSensorChanged(event: SensorEvent?) {\n                //値はここで受けとる\n                //今回は気圧計のみだからいいけどほかにも登録するときは分岐してね\n                if(event?.sensor?.type == Sensor.TYPE_PRESSURE){\n                    //気圧計の値\n                    val barometer = event.values[0]\n                    //TextViewに設定\n                    barometer_tv.text = \"$barometer hPa\"\n                }\n            }\n        }\n        //登録\n        sensorManager.registerListener(\n            sensorEventListener,\n            sensorList[0],  //配列のいっこめ。気圧計\n            SensorManager.SENSOR_DELAY_NORMAL  //更新頻度\n         )\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        sensorManager.unregisterListener(sensorEventListener)\n    }\n```\n\nこれでTextViewに気圧が表示されてると思います。\n\n![Screenshot_20191011-112836.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/0afb2d9f-c99b-dafd-1086-a8ae4c51dee9.png)\n\n### 小数点を消す\n```roundToInt()``` できれいになります。\n\n\n```kotlin\n                //値はここで受けとる\n                //今回は気圧計のみだからいいけどほかにも登録するときは分岐してね\n                if(event?.sensor?.type == Sensor.TYPE_PRESSURE){\n                    //気圧計の値\n                    val barometer = event.values[0]\n                    //整数に\n                    val barometerInt = barometer.roundToInt()\n                    //TextViewに設定\n                    barometer_tv.text = \"$barometerInt hPa\\n($barometer hPa)\"\n                }\n\n```\n\n![Screenshot_20191011-113656.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/de5824b5-5099-f8ba-f406-691f77d36027.png)\n\n以上です。\nお疲れ様です。８８８８８\n",
                "source": "_posts/Androidで気圧計.md",
                "raw": "---\ntitle: 【Android】 台風に備えて気圧を測れるアプリを作る\ntags: \n- Android\n- 台風\n- Kotlin\nauthor: takusan_23\nslide: false\n---\nこんにちは。中間テスト終わりました。\n今回はやばい台風が来るそうなので気圧が測れるアプリを作りたいと思います。\n\n## スマホにはいろんなセンサーがついている\nせっかくなので使いましょう。\nというのは建前で本当は [この記事](https://qiita.com/bellx2/items/fc1de7197f583001ca59) でやってることAndroidでも作れるのではと思ったのが本当の理由。\n\n## 紹介\n|                    |            |\n|--------------------|------------|\n| 端末               | Pixel 3 XL |\n| Android バージョン | Android 10 |\n| 最低バージョン     | ろりぽっぷ |\n| 言語               | Kotlin     |\n\n## 実装\n### レイアウト\n真ん中にTextViewを置いただけのものとする。\n面倒なのでConstraintLayoutをそのまま使うことにする。\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"50dp\"\n        android:id=\"@+id/barometer_tv\"\n        android:text=\"Hello World!\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n### コード\n\nSensor.TYPE_PRESSUREが気圧計になります。\nonDestroy()で登録を解除しています。\n受け取るセンサーがほかにもあるときは```event?.sensor?.type```を利用して分けましょう。\n\n\n```kotlin:MainActivity.kt\n    lateinit var sensorManager: SensorManager\n    lateinit var sensorEventListener: SensorEventListener\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        sensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager\n        //今回は気圧計\n        val sensorList = sensorManager.getSensorList(Sensor.TYPE_PRESSURE)\n        //受け取る\n        sensorEventListener = object : SensorEventListener {\n            override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {\n                //つかわん\n            }\n\n            override fun onSensorChanged(event: SensorEvent?) {\n                //値はここで受けとる\n                //今回は気圧計のみだからいいけどほかにも登録するときは分岐してね\n                if(event?.sensor?.type == Sensor.TYPE_PRESSURE){\n                    //気圧計の値\n                    val barometer = event.values[0]\n                    //TextViewに設定\n                    barometer_tv.text = \"$barometer hPa\"\n                }\n            }\n        }\n        //登録\n        sensorManager.registerListener(\n            sensorEventListener,\n            sensorList[0],  //配列のいっこめ。気圧計\n            SensorManager.SENSOR_DELAY_NORMAL  //更新頻度\n         )\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        sensorManager.unregisterListener(sensorEventListener)\n    }\n```\n\nこれでTextViewに気圧が表示されてると思います。\n\n![Screenshot_20191011-112836.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/0afb2d9f-c99b-dafd-1086-a8ae4c51dee9.png)\n\n### 小数点を消す\n```roundToInt()``` できれいになります。\n\n\n```kotlin\n                //値はここで受けとる\n                //今回は気圧計のみだからいいけどほかにも登録するときは分岐してね\n                if(event?.sensor?.type == Sensor.TYPE_PRESSURE){\n                    //気圧計の値\n                    val barometer = event.values[0]\n                    //整数に\n                    val barometerInt = barometer.roundToInt()\n                    //TextViewに設定\n                    barometer_tv.text = \"$barometerInt hPa\\n($barometer hPa)\"\n                }\n\n```\n\n![Screenshot_20191011-113656.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/de5824b5-5099-f8ba-f406-691f77d36027.png)\n\n以上です。\nお疲れ様です。８８８８８\n",
                "slug": "Androidで気圧計",
                "published": 1,
                "date": "2020-04-05T16:27:15.614Z",
                "updated": "2020-04-05T16:37:44.880Z",
                "comments": 1,
                "layout": "post",
                "photos": [],
                "link": "",
                "_id": "ck8r8f7bz000328vufn681f62",
                "content": "<p>こんにちは。中間テスト終わりました。<br>今回はやばい台風が来るそうなので気圧が測れるアプリを作りたいと思います。</p>\n<h2 id=\"スマホにはいろんなセンサーがついている\"><a href=\"#スマホにはいろんなセンサーがついている\" class=\"headerlink\" title=\"スマホにはいろんなセンサーがついている\"></a>スマホにはいろんなセンサーがついている</h2><p>せっかくなので使いましょう。<br>というのは建前で本当は <a href=\"https://qiita.com/bellx2/items/fc1de7197f583001ca59\" target=\"_blank\" rel=\"noopener\">この記事</a> でやってることAndroidでも作れるのではと思ったのが本当の理由。</p>\n<h2 id=\"紹介\"><a href=\"#紹介\" class=\"headerlink\" title=\"紹介\"></a>紹介</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>端末</td>\n<td>Pixel 3 XL</td>\n</tr>\n<tr>\n<td>Android バージョン</td>\n<td>Android 10</td>\n</tr>\n<tr>\n<td>最低バージョン</td>\n<td>ろりぽっぷ</td>\n</tr>\n<tr>\n<td>言語</td>\n<td>Kotlin</td>\n</tr>\n</tbody></table>\n<h2 id=\"実装\"><a href=\"#実装\" class=\"headerlink\" title=\"実装\"></a>実装</h2><h3 id=\"レイアウト\"><a href=\"#レイアウト\" class=\"headerlink\" title=\"レイアウト\"></a>レイアウト</h3><p>真ん中にTextViewを置いただけのものとする。<br>面倒なのでConstraintLayoutをそのまま使うことにする。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:textSize&#x3D;&quot;50dp&quot;</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;barometer_tv&quot;</span><br><span class=\"line\">        android:text&#x3D;&quot;Hello World!&quot;</span><br><span class=\"line\">        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintLeft_toLeftOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintRight_toRightOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintTop_toTopOf&#x3D;&quot;parent&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"コード\"><a href=\"#コード\" class=\"headerlink\" title=\"コード\"></a>コード</h3><p>Sensor.TYPE_PRESSUREが気圧計になります。<br>onDestroy()で登録を解除しています。<br>受け取るセンサーがほかにもあるときは<code>event?.sensor?.type</code>を利用して分けましょう。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lateinit var sensorManager: SensorManager</span><br><span class=\"line\">lateinit var sensorEventListener: SensorEventListener</span><br><span class=\"line\">override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState)</span><br><span class=\"line\">    setContentView(R.layout.activity_main)</span><br><span class=\"line\"></span><br><span class=\"line\">    sensorManager &#x3D; getSystemService(Context.SENSOR_SERVICE) as SensorManager</span><br><span class=\"line\">    &#x2F;&#x2F;今回は気圧計</span><br><span class=\"line\">    val sensorList &#x3D; sensorManager.getSensorList(Sensor.TYPE_PRESSURE)</span><br><span class=\"line\">    &#x2F;&#x2F;受け取る</span><br><span class=\"line\">    sensorEventListener &#x3D; object : SensorEventListener &#123;</span><br><span class=\"line\">        override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;つかわん</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        override fun onSensorChanged(event: SensorEvent?) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;値はここで受けとる</span><br><span class=\"line\">            &#x2F;&#x2F;今回は気圧計のみだからいいけどほかにも登録するときは分岐してね</span><br><span class=\"line\">            if(event?.sensor?.type &#x3D;&#x3D; Sensor.TYPE_PRESSURE)&#123;</span><br><span class=\"line\">                &#x2F;&#x2F;気圧計の値</span><br><span class=\"line\">                val barometer &#x3D; event.values[0]</span><br><span class=\"line\">                &#x2F;&#x2F;TextViewに設定</span><br><span class=\"line\">                barometer_tv.text &#x3D; &quot;$barometer hPa&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;登録</span><br><span class=\"line\">    sensorManager.registerListener(</span><br><span class=\"line\">        sensorEventListener,</span><br><span class=\"line\">        sensorList[0],  &#x2F;&#x2F;配列のいっこめ。気圧計</span><br><span class=\"line\">        SensorManager.SENSOR_DELAY_NORMAL  &#x2F;&#x2F;更新頻度</span><br><span class=\"line\">     )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">override fun onDestroy() &#123;</span><br><span class=\"line\">    super.onDestroy()</span><br><span class=\"line\">    sensorManager.unregisterListener(sensorEventListener)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>これでTextViewに気圧が表示されてると思います。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/0afb2d9f-c99b-dafd-1086-a8ae4c51dee9.png\" alt=\"Screenshot_20191011-112836.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191011-112836.png</div>\n            </figure>\n\n<h3 id=\"小数点を消す\"><a href=\"#小数点を消す\" class=\"headerlink\" title=\"小数点を消す\"></a>小数点を消す</h3><figure class=\"highlight plain\"><figcaption><span>できれいになります。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;kotlin</span><br><span class=\"line\">                &#x2F;&#x2F;値はここで受けとる</span><br><span class=\"line\">                &#x2F;&#x2F;今回は気圧計のみだからいいけどほかにも登録するときは分岐してね</span><br><span class=\"line\">                if(event?.sensor?.type &#x3D;&#x3D; Sensor.TYPE_PRESSURE)&#123;</span><br><span class=\"line\">                    &#x2F;&#x2F;気圧計の値</span><br><span class=\"line\">                    val barometer &#x3D; event.values[0]</span><br><span class=\"line\">                    &#x2F;&#x2F;整数に</span><br><span class=\"line\">                    val barometerInt &#x3D; barometer.roundToInt()</span><br><span class=\"line\">                    &#x2F;&#x2F;TextViewに設定</span><br><span class=\"line\">                    barometer_tv.text &#x3D; &quot;$barometerInt hPa\\n($barometer hPa)&quot;</span><br><span class=\"line\">                &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/de5824b5-5099-f8ba-f406-691f77d36027.png\" alt=\"Screenshot_20191011-113656.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191011-113656.png</div>\n            </figure>\n\n<p>以上です。<br>お疲れ様です。８８８８８</p>\n",
                "site": {
                    "data": {}
                },
                "excerpt": "",
                "more": "<p>こんにちは。中間テスト終わりました。<br>今回はやばい台風が来るそうなので気圧が測れるアプリを作りたいと思います。</p>\n<h2 id=\"スマホにはいろんなセンサーがついている\"><a href=\"#スマホにはいろんなセンサーがついている\" class=\"headerlink\" title=\"スマホにはいろんなセンサーがついている\"></a>スマホにはいろんなセンサーがついている</h2><p>せっかくなので使いましょう。<br>というのは建前で本当は <a href=\"https://qiita.com/bellx2/items/fc1de7197f583001ca59\" target=\"_blank\" rel=\"noopener\">この記事</a> でやってることAndroidでも作れるのではと思ったのが本当の理由。</p>\n<h2 id=\"紹介\"><a href=\"#紹介\" class=\"headerlink\" title=\"紹介\"></a>紹介</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>端末</td>\n<td>Pixel 3 XL</td>\n</tr>\n<tr>\n<td>Android バージョン</td>\n<td>Android 10</td>\n</tr>\n<tr>\n<td>最低バージョン</td>\n<td>ろりぽっぷ</td>\n</tr>\n<tr>\n<td>言語</td>\n<td>Kotlin</td>\n</tr>\n</tbody></table>\n<h2 id=\"実装\"><a href=\"#実装\" class=\"headerlink\" title=\"実装\"></a>実装</h2><h3 id=\"レイアウト\"><a href=\"#レイアウト\" class=\"headerlink\" title=\"レイアウト\"></a>レイアウト</h3><p>真ん中にTextViewを置いただけのものとする。<br>面倒なのでConstraintLayoutをそのまま使うことにする。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:textSize&#x3D;&quot;50dp&quot;</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;barometer_tv&quot;</span><br><span class=\"line\">        android:text&#x3D;&quot;Hello World!&quot;</span><br><span class=\"line\">        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintLeft_toLeftOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintRight_toRightOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintTop_toTopOf&#x3D;&quot;parent&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"コード\"><a href=\"#コード\" class=\"headerlink\" title=\"コード\"></a>コード</h3><p>Sensor.TYPE_PRESSUREが気圧計になります。<br>onDestroy()で登録を解除しています。<br>受け取るセンサーがほかにもあるときは<code>event?.sensor?.type</code>を利用して分けましょう。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lateinit var sensorManager: SensorManager</span><br><span class=\"line\">lateinit var sensorEventListener: SensorEventListener</span><br><span class=\"line\">override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState)</span><br><span class=\"line\">    setContentView(R.layout.activity_main)</span><br><span class=\"line\"></span><br><span class=\"line\">    sensorManager &#x3D; getSystemService(Context.SENSOR_SERVICE) as SensorManager</span><br><span class=\"line\">    &#x2F;&#x2F;今回は気圧計</span><br><span class=\"line\">    val sensorList &#x3D; sensorManager.getSensorList(Sensor.TYPE_PRESSURE)</span><br><span class=\"line\">    &#x2F;&#x2F;受け取る</span><br><span class=\"line\">    sensorEventListener &#x3D; object : SensorEventListener &#123;</span><br><span class=\"line\">        override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;つかわん</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        override fun onSensorChanged(event: SensorEvent?) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;値はここで受けとる</span><br><span class=\"line\">            &#x2F;&#x2F;今回は気圧計のみだからいいけどほかにも登録するときは分岐してね</span><br><span class=\"line\">            if(event?.sensor?.type &#x3D;&#x3D; Sensor.TYPE_PRESSURE)&#123;</span><br><span class=\"line\">                &#x2F;&#x2F;気圧計の値</span><br><span class=\"line\">                val barometer &#x3D; event.values[0]</span><br><span class=\"line\">                &#x2F;&#x2F;TextViewに設定</span><br><span class=\"line\">                barometer_tv.text &#x3D; &quot;$barometer hPa&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;登録</span><br><span class=\"line\">    sensorManager.registerListener(</span><br><span class=\"line\">        sensorEventListener,</span><br><span class=\"line\">        sensorList[0],  &#x2F;&#x2F;配列のいっこめ。気圧計</span><br><span class=\"line\">        SensorManager.SENSOR_DELAY_NORMAL  &#x2F;&#x2F;更新頻度</span><br><span class=\"line\">     )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">override fun onDestroy() &#123;</span><br><span class=\"line\">    super.onDestroy()</span><br><span class=\"line\">    sensorManager.unregisterListener(sensorEventListener)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>これでTextViewに気圧が表示されてると思います。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/0afb2d9f-c99b-dafd-1086-a8ae4c51dee9.png\" alt=\"Screenshot_20191011-112836.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191011-112836.png</div>\n            </figure>\n\n<h3 id=\"小数点を消す\"><a href=\"#小数点を消す\" class=\"headerlink\" title=\"小数点を消す\"></a>小数点を消す</h3><figure class=\"highlight plain\"><figcaption><span>できれいになります。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;kotlin</span><br><span class=\"line\">                &#x2F;&#x2F;値はここで受けとる</span><br><span class=\"line\">                &#x2F;&#x2F;今回は気圧計のみだからいいけどほかにも登録するときは分岐してね</span><br><span class=\"line\">                if(event?.sensor?.type &#x3D;&#x3D; Sensor.TYPE_PRESSURE)&#123;</span><br><span class=\"line\">                    &#x2F;&#x2F;気圧計の値</span><br><span class=\"line\">                    val barometer &#x3D; event.values[0]</span><br><span class=\"line\">                    &#x2F;&#x2F;整数に</span><br><span class=\"line\">                    val barometerInt &#x3D; barometer.roundToInt()</span><br><span class=\"line\">                    &#x2F;&#x2F;TextViewに設定</span><br><span class=\"line\">                    barometer_tv.text &#x3D; &quot;$barometerInt hPa\\n($barometer hPa)&quot;</span><br><span class=\"line\">                &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/de5824b5-5099-f8ba-f406-691f77d36027.png\" alt=\"Screenshot_20191011-113656.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191011-113656.png</div>\n            </figure>\n\n<p>以上です。<br>お疲れ様です。８８８８８</p>\n"
            },
            {
                "title": "【Android / Kotlin】 ノッチ（ディスプレイカット / 切り欠き）の部分も表示する方法",
                "author": "takusan_23",
                "slide": false,
                "_content": "ノッチを付けずに戦ってるメーカーはかっこいいと思います。\n\n# ノッチ、ディスプレイカット、切り欠きとは\niPhone X（嘘ですEssential Phoneです）から始まった上のかけている部分。この部分にはカメラや顔認証に必要な部品があったりする（顔認証対応端末のみ）。\n中華系が真似したせいで流行ってしまった？\n\nPixel 3 XLに関しては他端末よりも大きめのノッチがついてたりする。（カメラが自撮り側のみ２つついているため。広角だよ←使ったことないけど）\n\n基本的にはこの部分にはステータスバー（🔋や📶や📳等があるバーのこと）があってアプリは侵略できない。\n\n# ノッチがない端末でノッチを出す方法\n\n開発者向けオプション→ディスプレイカット→縦長のカットアウト\nを選択することでノッチを表示できます。\nステータスバーが広くなって違和感あると思うよ。\n\n# ノッチがある端末でノッチを隠す（利用しない）方法\nPixel 3 XLでの場合です。\n開発者向けオプション→ディスプレイカット→非表示　\nを選択することでノッチを利用しない設定にできます。\n\nその他サードパーティのアプリでノッチ領域の背景を黒くするアプリなどもあるのでどうしても気になる人は入れてみては？。\n\n# 侵略するには\n![Screenshot_1578906820.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/7b9cf20d-ad5b-a631-bcaf-531a970da9ab.png)\n\nこんなふうに上にも表示させたい場合は、\n\n```kotlin\n//ステータスバー透明化＋タイトルバー非表示＋ノッチ領域にも侵略\nwindow.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)\nsupportActionBar?.hide()\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {\n    val attrib = window.attributes\n    attrib.layoutInDisplayCutoutMode =\n        WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES\n}\n```\n\nこれで動きます。\nActionBarを非表示にしてますが、どっかでそもそも表示しない設定にしている場合は\n二行目を消したほうがいいと思います。\n\n\nこれでノッチ領域に侵略することに成功しました。\n\n![Screenshot_1578906694.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/38701a36-6bfe-969e-1b62-013a5bcfd64c.png)\n\n以上です。お疲れさまでした。８８８８８８８８８\n\n# 参考にしました\nhttps://stackoverflow.com/questions/49190381/fullscreen-app-with-displaycutout\n\nandroid display cutout full screen って検索したんですけどGoogle先生すごい。\n",
                "source": "_posts/Androidのノッチ領域に侵略.md",
                "raw": "---\ntitle: 【Android / Kotlin】 ノッチ（ディスプレイカット / 切り欠き）の部分も表示する方法\ntags: \n- Android\n- Kotlin\nauthor: takusan_23\nslide: false\n---\nノッチを付けずに戦ってるメーカーはかっこいいと思います。\n\n# ノッチ、ディスプレイカット、切り欠きとは\niPhone X（嘘ですEssential Phoneです）から始まった上のかけている部分。この部分にはカメラや顔認証に必要な部品があったりする（顔認証対応端末のみ）。\n中華系が真似したせいで流行ってしまった？\n\nPixel 3 XLに関しては他端末よりも大きめのノッチがついてたりする。（カメラが自撮り側のみ２つついているため。広角だよ←使ったことないけど）\n\n基本的にはこの部分にはステータスバー（🔋や📶や📳等があるバーのこと）があってアプリは侵略できない。\n\n# ノッチがない端末でノッチを出す方法\n\n開発者向けオプション→ディスプレイカット→縦長のカットアウト\nを選択することでノッチを表示できます。\nステータスバーが広くなって違和感あると思うよ。\n\n# ノッチがある端末でノッチを隠す（利用しない）方法\nPixel 3 XLでの場合です。\n開発者向けオプション→ディスプレイカット→非表示　\nを選択することでノッチを利用しない設定にできます。\n\nその他サードパーティのアプリでノッチ領域の背景を黒くするアプリなどもあるのでどうしても気になる人は入れてみては？。\n\n# 侵略するには\n![Screenshot_1578906820.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/7b9cf20d-ad5b-a631-bcaf-531a970da9ab.png)\n\nこんなふうに上にも表示させたい場合は、\n\n```kotlin\n//ステータスバー透明化＋タイトルバー非表示＋ノッチ領域にも侵略\nwindow.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)\nsupportActionBar?.hide()\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {\n    val attrib = window.attributes\n    attrib.layoutInDisplayCutoutMode =\n        WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES\n}\n```\n\nこれで動きます。\nActionBarを非表示にしてますが、どっかでそもそも表示しない設定にしている場合は\n二行目を消したほうがいいと思います。\n\n\nこれでノッチ領域に侵略することに成功しました。\n\n![Screenshot_1578906694.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/38701a36-6bfe-969e-1b62-013a5bcfd64c.png)\n\n以上です。お疲れさまでした。８８８８８８８８８\n\n# 参考にしました\nhttps://stackoverflow.com/questions/49190381/fullscreen-app-with-displaycutout\n\nandroid display cutout full screen って検索したんですけどGoogle先生すごい。\n",
                "slug": "Androidのノッチ領域に侵略",
                "published": 1,
                "date": "2020-04-05T16:27:15.645Z",
                "updated": "2020-04-05T16:38:33.441Z",
                "comments": 1,
                "layout": "post",
                "photos": [],
                "link": "",
                "_id": "ck8r8f7bz000428vuf8157uup",
                "content": "<p>ノッチを付けずに戦ってるメーカーはかっこいいと思います。</p>\n<h1 id=\"ノッチ、ディスプレイカット、切り欠きとは\"><a href=\"#ノッチ、ディスプレイカット、切り欠きとは\" class=\"headerlink\" title=\"ノッチ、ディスプレイカット、切り欠きとは\"></a>ノッチ、ディスプレイカット、切り欠きとは</h1><p>iPhone X（嘘ですEssential Phoneです）から始まった上のかけている部分。この部分にはカメラや顔認証に必要な部品があったりする（顔認証対応端末のみ）。<br>中華系が真似したせいで流行ってしまった？</p>\n<p>Pixel 3 XLに関しては他端末よりも大きめのノッチがついてたりする。（カメラが自撮り側のみ２つついているため。広角だよ←使ったことないけど）</p>\n<p>基本的にはこの部分にはステータスバー（🔋や📶や📳等があるバーのこと）があってアプリは侵略できない。</p>\n<h1 id=\"ノッチがない端末でノッチを出す方法\"><a href=\"#ノッチがない端末でノッチを出す方法\" class=\"headerlink\" title=\"ノッチがない端末でノッチを出す方法\"></a>ノッチがない端末でノッチを出す方法</h1><p>開発者向けオプション→ディスプレイカット→縦長のカットアウト<br>を選択することでノッチを表示できます。<br>ステータスバーが広くなって違和感あると思うよ。</p>\n<h1 id=\"ノッチがある端末でノッチを隠す（利用しない）方法\"><a href=\"#ノッチがある端末でノッチを隠す（利用しない）方法\" class=\"headerlink\" title=\"ノッチがある端末でノッチを隠す（利用しない）方法\"></a>ノッチがある端末でノッチを隠す（利用しない）方法</h1><p>Pixel 3 XLでの場合です。<br>開発者向けオプション→ディスプレイカット→非表示　<br>を選択することでノッチを利用しない設定にできます。</p>\n<p>その他サードパーティのアプリでノッチ領域の背景を黒くするアプリなどもあるのでどうしても気になる人は入れてみては？。</p>\n<h1 id=\"侵略するには\"><a href=\"#侵略するには\" class=\"headerlink\" title=\"侵略するには\"></a>侵略するには</h1><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/7b9cf20d-ad5b-a631-bcaf-531a970da9ab.png\" alt=\"Screenshot_1578906820.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_1578906820.png</div>\n            </figure>\n\n<p>こんなふうに上にも表示させたい場合は、</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ステータスバー透明化＋タイトルバー非表示＋ノッチ領域にも侵略</span></span><br><span class=\"line\">window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)</span><br><span class=\"line\">supportActionBar?.hide()</span><br><span class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.P) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> attrib = window.attributes</span><br><span class=\"line\">    attrib.layoutInDisplayCutoutMode =</span><br><span class=\"line\">        WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>これで動きます。<br>ActionBarを非表示にしてますが、どっかでそもそも表示しない設定にしている場合は<br>二行目を消したほうがいいと思います。</p>\n<p>これでノッチ領域に侵略することに成功しました。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/38701a36-6bfe-969e-1b62-013a5bcfd64c.png\" alt=\"Screenshot_1578906694.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_1578906694.png</div>\n            </figure>\n\n<p>以上です。お疲れさまでした。８８８８８８８８８</p>\n<h1 id=\"参考にしました\"><a href=\"#参考にしました\" class=\"headerlink\" title=\"参考にしました\"></a>参考にしました</h1><p><a href=\"https://stackoverflow.com/questions/49190381/fullscreen-app-with-displaycutout\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/49190381/fullscreen-app-with-displaycutout</a></p>\n<p>android display cutout full screen って検索したんですけどGoogle先生すごい。</p>\n",
                "site": {
                    "data": {}
                },
                "excerpt": "",
                "more": "<p>ノッチを付けずに戦ってるメーカーはかっこいいと思います。</p>\n<h1 id=\"ノッチ、ディスプレイカット、切り欠きとは\"><a href=\"#ノッチ、ディスプレイカット、切り欠きとは\" class=\"headerlink\" title=\"ノッチ、ディスプレイカット、切り欠きとは\"></a>ノッチ、ディスプレイカット、切り欠きとは</h1><p>iPhone X（嘘ですEssential Phoneです）から始まった上のかけている部分。この部分にはカメラや顔認証に必要な部品があったりする（顔認証対応端末のみ）。<br>中華系が真似したせいで流行ってしまった？</p>\n<p>Pixel 3 XLに関しては他端末よりも大きめのノッチがついてたりする。（カメラが自撮り側のみ２つついているため。広角だよ←使ったことないけど）</p>\n<p>基本的にはこの部分にはステータスバー（🔋や📶や📳等があるバーのこと）があってアプリは侵略できない。</p>\n<h1 id=\"ノッチがない端末でノッチを出す方法\"><a href=\"#ノッチがない端末でノッチを出す方法\" class=\"headerlink\" title=\"ノッチがない端末でノッチを出す方法\"></a>ノッチがない端末でノッチを出す方法</h1><p>開発者向けオプション→ディスプレイカット→縦長のカットアウト<br>を選択することでノッチを表示できます。<br>ステータスバーが広くなって違和感あると思うよ。</p>\n<h1 id=\"ノッチがある端末でノッチを隠す（利用しない）方法\"><a href=\"#ノッチがある端末でノッチを隠す（利用しない）方法\" class=\"headerlink\" title=\"ノッチがある端末でノッチを隠す（利用しない）方法\"></a>ノッチがある端末でノッチを隠す（利用しない）方法</h1><p>Pixel 3 XLでの場合です。<br>開発者向けオプション→ディスプレイカット→非表示　<br>を選択することでノッチを利用しない設定にできます。</p>\n<p>その他サードパーティのアプリでノッチ領域の背景を黒くするアプリなどもあるのでどうしても気になる人は入れてみては？。</p>\n<h1 id=\"侵略するには\"><a href=\"#侵略するには\" class=\"headerlink\" title=\"侵略するには\"></a>侵略するには</h1><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/7b9cf20d-ad5b-a631-bcaf-531a970da9ab.png\" alt=\"Screenshot_1578906820.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_1578906820.png</div>\n            </figure>\n\n<p>こんなふうに上にも表示させたい場合は、</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ステータスバー透明化＋タイトルバー非表示＋ノッチ領域にも侵略</span></span><br><span class=\"line\">window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)</span><br><span class=\"line\">supportActionBar?.hide()</span><br><span class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.P) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> attrib = window.attributes</span><br><span class=\"line\">    attrib.layoutInDisplayCutoutMode =</span><br><span class=\"line\">        WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>これで動きます。<br>ActionBarを非表示にしてますが、どっかでそもそも表示しない設定にしている場合は<br>二行目を消したほうがいいと思います。</p>\n<p>これでノッチ領域に侵略することに成功しました。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/38701a36-6bfe-969e-1b62-013a5bcfd64c.png\" alt=\"Screenshot_1578906694.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_1578906694.png</div>\n            </figure>\n\n<p>以上です。お疲れさまでした。８８８８８８８８８</p>\n<h1 id=\"参考にしました\"><a href=\"#参考にしました\" class=\"headerlink\" title=\"参考にしました\"></a>参考にしました</h1><p><a href=\"https://stackoverflow.com/questions/49190381/fullscreen-app-with-displaycutout\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/49190381/fullscreen-app-with-displaycutout</a></p>\n<p>android display cutout full screen って検索したんですけどGoogle先生すごい。</p>\n"
            },
            {
                "title": "Electronで雑にアプリを作ってWindowsのポータブルアプリとして動くまでやる。 2020/02/28追記",
                "author": "takusan_23",
                "slide": false,
                "_content": "久しぶりにElectronについて**お話します。**\n\n# exeファイルにして動かしたい。\nしかし2015年とか2016年の記事がおおい。つらい。~~令和だぞ。~~\n\nというわけで今回はElectronで適当にアプリを作ってポータブルアプリとしてすぐ使えるようにするところを目標に作っていこうと思います。==インストール不要で動かす！\n\n# 何作る。\nmarqueeタグで🍣を流すだけのアプリ。かんたん。\n\n# 作り方\n## セットアップ npm init\nセットアップは自分が書いた過去の記事と同じことしてます。[ここ](https://qiita.com/takusan_23/items/eca19b4111109616bbfa)。\n\n\n適当にフォルダを作成する。\n\n作ったフォルダの中で```Shift+右クリック```で```PowerShell ウィンドウをここに開く```か```コマンド ウィンドウをここで開く```を押します。（Win10は前者。それ以外は後者）。\n\n開いたら中で以下の文を入力します。\n\n```terminal\nnpm init -y\n````\n\nこれで```package.json```が作成できていれば成功です。\n\nそしたらpackage.jsonを開いて、少し書き換えます。\n\n```\"main\" : \"index.js\",```\n↓\n```\"main\": \"./src/main.js\",```\n\n```\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n```\n↓\n\n```\n \"scripts\": {\n    \"start\": \"electron .\"\n  },\n```\n\n## セットアップ npm install --save-dev electron\n\nPowerShellまたはコマンドプロンプトの画面はそのまま、次の文を入力しましょう。\n\n```console\nnpm install --save-dev electron\n```\n\n## セットアップ 好きなエディタを開いて\n\n最初に作ったフォルダの中にsrcフォルダを作成してください。（スクリーンショットにicon.icoがありますが気にせず。）\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/50f257ab-2fac-e705-a5ca-235e207c2496.png)\n\n作成したら中に。\n```package.json```\n```index.html```\n```main.js```\n\nそれぞれ\n\n```json:package.json\n{\n    \"main\": \"main.js\"\n}\n```\n\n```html:index.html\n<!DOCTYPE html>\n<html lang=\"ja\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>寿司が流れるだけのアプリ</title>\n</head>\n\n<body style=\"-webkit-app-region: drag;background-color: rgba(157, 204, 224\t, .7)\">\n    <!-- 寿司が流れるだけ -->\n    <div style=\"padding: 20px\" class=\"center\">\n        <marquee id=\"marquee\" scrollamount=\"25\">\n            <font id=\"text\" size=\"7\">🍣</font>\n        </marquee>\n    </div>\n</body>\n\n</html>\n```\n\n```javascript:main.js\n// Modules to control application life and create native browser window\nconst { app, BrowserWindow, Menu } = require('electron')\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet mainWindow\n\nfunction createWindow() {\n    // Create the browser window.\n    mainWindow = new BrowserWindow({\n        width: 300,         //横\n        height: 150,        //縦\n        frame: false,       //フレームなくす\n        transparent: true,   //背景透明化\n        alwaysOnTop: true,         //最前面\n        webPreferences: {\n            nodeIntegration: true   //これ書く。\n        }\n    })\n\n    // and load the index.html of the app.\n    mainWindow.loadFile('./src/index.html')\n    //メニューバー削除\n    Menu.setApplicationMenu(null)\n\n    // Open the DevTools.\n    // mainWindow.webContents.openDevTools()\n\n    // Emitted when the window is closed.\n    mainWindow.on('closed', function () {\n        // Dereference the window object, usually you would store windows\n        // in an array if your app supports multi windows, this is the time\n        // when you should delete the corresponding element.\n        mainWindow = null\n    })\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', createWindow)\n\n// Quit when all windows are closed.\napp.on('window-all-closed', function () {\n    // On macOS it is common for applications and their menu bar\n    // to stay active until the user quits explicitly with Cmd + Q\n    if (process.platform !== 'darwin') app.quit()\n})\n\napp.on('activate', function () {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (mainWindow === null) createWindow()\n})\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n```\n\nこのまま実行すると半透明で小さくてどのウィンドウより前に出るただ🍣が流れるウィンドウができてるはずです。\n![SnapCrab_NoName_2019-8-22_0-1-26_No-00.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/d2ef021e-e0b8-de7c-38fb-74ca80adf223.png)\n\nちなみに右クリックすることで閉じたり最大化できます。\n![SnapCrab_寿司が流れるだけのアプリ_2019-8-21_23-58-10_No-00.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/01f43431-50e5-9aba-9fbe-0322af15944a.png)\n\nとってもいらないアプリが完成しました。\n\n## electron-builderをいれる\nこれはyarnをインストールする必要があります。インストーラーに沿ってやればできます。\nちゃんとインストールできたかどうかは以下の文をいれてバージョンが出ればおｋです。\n\n```console\nyarn -v\n```\n\nそしたら以下の文をいれて```electron-builder```をインストールします。\n\n```console\nyarn global add electron-builder\n```\n\n## package.jsonに書き足す\nどっちのpackage.jsonか？srcじゃない方。npm initで作成したほう。\n開いてみて明らかに下の中身と違う場合は開くの間違えてます。\n\n```json:package.json\n{\n  \"name\": \"sushi_portable\",\n  \"version\": \"1.0.0\",\n  \"description\": \"寿司の絵文字を眺めるアプリ。\",\n  \"main\": \"./src/main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\"\n  },\n  \"keywords\": [],\n  \"author\": \"sushi\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"electron\": \"^6.0.3\"\n  }\n}\n```\n\nそしてすこし書き足します。buildから増えました。\n\n```json:package.json\n{\n  \"name\": \"sushi_portable\",\n  \"version\": \"1.0.0\",\n  \"description\": \"寿司の絵文字を眺めるアプリ。\",\n  \"main\": \"./src/main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\"\n  },\n  \"keywords\": [],\n  \"author\": \"sushi\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"electron\": \"^6.0.3\"\n  },\n  \"build\": {\n    \"productName\": \"寿司の絵文字眺めるやつ\",\n    \"appId\": \"sushi.emoji\",\n    \"win\": {\n      \"target\": \"portable\",\n      \"icon\": \"./src/icon.ico\"\n    }\n  }\n}\n```\n\nproductNameが名前、appIdはアプリケーションID（Application User Model ID）らしいです？\n```target```には```portable```にします。これでexeファイルダブルクリックで起動できるアプリになります。ポータブルアプリ。\n```nsis```にすればインストール形式になるそうです？。（要検証）\n```icon```はアイコン画像のパスです。srcの中に入れればいいのですが、拡張子がicoなので画像ファイルを何らかの方法でicoに変換する必要があります。ただし、一つ条件があって画像サイズを256×256にする必要があるようです。\n\n## ポータブルアプリ作成\nターミナル（PowerShell・コマンドプロンプト）で以下の文を入力。\n\n```console\nelectron-builder build --win\n```\n\nあとは終わるまで待ちましょう。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/50abd5ca-91a3-2152-e577-5b82e9b24296.png)\n\nおわると```dist```という名前のフォルダができてるのでその中のにあるexeファイルをダブルクリックして少し待てばウィンドウが出てきます。\n\n![SnapCrab_NoName_2019-8-22_0-30-47_No-00.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/9fdcb99d-00ab-b83d-71d7-1f1d9d7d90bb.png)\n\n\n**完成です！！！**\n\n## 追記\n\n![SnapCrab_NoName_2019-8-22_0-39-35_No-00.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/f0d114e3-99ed-fb82-441e-19ac8a9097f8.png)\n\nソースコードです→https://github.com/takusan23/SushiPortable\n\n## 更に追記　2020/02/28\n\nコメントでelectron-builderが見つからんってあったので調べたら[公式サイト](https://www.electron.build/)と導入方法が違ったので追記しておきます。\n\nちなみにyarnのバージョンは1.22.0です。\n\nとりあえずelectron-builderを消しましょう。\n\n```console\nyarn global remove electron-builder\n```\n\n消せたら以下の文を入力してなにもないことを確認します\n\n```console\nyarn global list --depth=0\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/226b19ef-9f95-0116-fb30-471e25eb2d0f.png)\n\n次に公式と同じ方法でelectron-builderを入れます。\n\n```console\nyarn add electron-builder --dev\n```\n\n成功すれば```package.json```のdevDependenciesの中に\n```\"electron-builder\": \"^22.3.2\"```が追加されているはずです。\n\nちなみにelectron-builderと入力しても無いって言われるだけです。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/b0192e15-4f4b-915d-4bef-0bfaa01386e6.png)\n\n次にpackage.jsonに書き足してなければ、\n[package.jsonに書き足す](https://qiita.com/takusan_23/items/0ae82e0a4a1ea6469bbd#packagejson%E3%81%AB%E6%9B%B8%E3%81%8D%E8%B6%B3%E3%81%99)で書き足してきてください。ここは同じ。\n\n最後に以下のコマンドを入力すれば処理が始まるはずです。\n\n```console\nyarn electron-builder --win\n```\n\nelectron-builderがうまく動かない場合は試してみてください。（私はどちらでも動いたのですが；；）\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/b41f1f15-2800-b2ce-b128-7b24c7a9c839.png)\n\nあと一応```package.json```置いときますね\n\n```json:package.json\n{\n  \"name\": \"ElectronBuilderSample\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"src/main.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"takusan23\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"electron\": \"^8.0.2\",\n    \"electron-builder\": \"^22.3.2\"\n  },\n  \"build\": {\n    \"productName\": \"てすと\",\n    \"appId\": \"aiueo.test\",\n    \"win\": {\n      \"target\": \"portable\",\n      \"icon\": \"src/icon.ico\"\n    }\n  }\n}\n```\n\n### おわりに\nexeダブルクリックから数秒～数十秒かかるのは仕様？わからん！\n\n## 参考にしました。\nhttps://qiita.com/SallyAcolyte/items/94ed26ab62b8b32b1b2c\nhttp://var.blog.jp/archives/78877702.html\n",
                "source": "_posts/Electron Builder.md",
                "raw": "---\ntitle: Electronで雑にアプリを作ってWindowsのポータブルアプリとして動くまでやる。 2020/02/28追記\ntags: \n- JavaScript\n- Electron\nauthor: takusan_23\nslide: false\n---\n久しぶりにElectronについて**お話します。**\n\n# exeファイルにして動かしたい。\nしかし2015年とか2016年の記事がおおい。つらい。~~令和だぞ。~~\n\nというわけで今回はElectronで適当にアプリを作ってポータブルアプリとしてすぐ使えるようにするところを目標に作っていこうと思います。==インストール不要で動かす！\n\n# 何作る。\nmarqueeタグで🍣を流すだけのアプリ。かんたん。\n\n# 作り方\n## セットアップ npm init\nセットアップは自分が書いた過去の記事と同じことしてます。[ここ](https://qiita.com/takusan_23/items/eca19b4111109616bbfa)。\n\n\n適当にフォルダを作成する。\n\n作ったフォルダの中で```Shift+右クリック```で```PowerShell ウィンドウをここに開く```か```コマンド ウィンドウをここで開く```を押します。（Win10は前者。それ以外は後者）。\n\n開いたら中で以下の文を入力します。\n\n```terminal\nnpm init -y\n````\n\nこれで```package.json```が作成できていれば成功です。\n\nそしたらpackage.jsonを開いて、少し書き換えます。\n\n```\"main\" : \"index.js\",```\n↓\n```\"main\": \"./src/main.js\",```\n\n```\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n```\n↓\n\n```\n \"scripts\": {\n    \"start\": \"electron .\"\n  },\n```\n\n## セットアップ npm install --save-dev electron\n\nPowerShellまたはコマンドプロンプトの画面はそのまま、次の文を入力しましょう。\n\n```console\nnpm install --save-dev electron\n```\n\n## セットアップ 好きなエディタを開いて\n\n最初に作ったフォルダの中にsrcフォルダを作成してください。（スクリーンショットにicon.icoがありますが気にせず。）\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/50f257ab-2fac-e705-a5ca-235e207c2496.png)\n\n作成したら中に。\n```package.json```\n```index.html```\n```main.js```\n\nそれぞれ\n\n```json:package.json\n{\n    \"main\": \"main.js\"\n}\n```\n\n```html:index.html\n<!DOCTYPE html>\n<html lang=\"ja\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>寿司が流れるだけのアプリ</title>\n</head>\n\n<body style=\"-webkit-app-region: drag;background-color: rgba(157, 204, 224\t, .7)\">\n    <!-- 寿司が流れるだけ -->\n    <div style=\"padding: 20px\" class=\"center\">\n        <marquee id=\"marquee\" scrollamount=\"25\">\n            <font id=\"text\" size=\"7\">🍣</font>\n        </marquee>\n    </div>\n</body>\n\n</html>\n```\n\n```javascript:main.js\n// Modules to control application life and create native browser window\nconst { app, BrowserWindow, Menu } = require('electron')\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet mainWindow\n\nfunction createWindow() {\n    // Create the browser window.\n    mainWindow = new BrowserWindow({\n        width: 300,         //横\n        height: 150,        //縦\n        frame: false,       //フレームなくす\n        transparent: true,   //背景透明化\n        alwaysOnTop: true,         //最前面\n        webPreferences: {\n            nodeIntegration: true   //これ書く。\n        }\n    })\n\n    // and load the index.html of the app.\n    mainWindow.loadFile('./src/index.html')\n    //メニューバー削除\n    Menu.setApplicationMenu(null)\n\n    // Open the DevTools.\n    // mainWindow.webContents.openDevTools()\n\n    // Emitted when the window is closed.\n    mainWindow.on('closed', function () {\n        // Dereference the window object, usually you would store windows\n        // in an array if your app supports multi windows, this is the time\n        // when you should delete the corresponding element.\n        mainWindow = null\n    })\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', createWindow)\n\n// Quit when all windows are closed.\napp.on('window-all-closed', function () {\n    // On macOS it is common for applications and their menu bar\n    // to stay active until the user quits explicitly with Cmd + Q\n    if (process.platform !== 'darwin') app.quit()\n})\n\napp.on('activate', function () {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (mainWindow === null) createWindow()\n})\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n```\n\nこのまま実行すると半透明で小さくてどのウィンドウより前に出るただ🍣が流れるウィンドウができてるはずです。\n![SnapCrab_NoName_2019-8-22_0-1-26_No-00.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/d2ef021e-e0b8-de7c-38fb-74ca80adf223.png)\n\nちなみに右クリックすることで閉じたり最大化できます。\n![SnapCrab_寿司が流れるだけのアプリ_2019-8-21_23-58-10_No-00.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/01f43431-50e5-9aba-9fbe-0322af15944a.png)\n\nとってもいらないアプリが完成しました。\n\n## electron-builderをいれる\nこれはyarnをインストールする必要があります。インストーラーに沿ってやればできます。\nちゃんとインストールできたかどうかは以下の文をいれてバージョンが出ればおｋです。\n\n```console\nyarn -v\n```\n\nそしたら以下の文をいれて```electron-builder```をインストールします。\n\n```console\nyarn global add electron-builder\n```\n\n## package.jsonに書き足す\nどっちのpackage.jsonか？srcじゃない方。npm initで作成したほう。\n開いてみて明らかに下の中身と違う場合は開くの間違えてます。\n\n```json:package.json\n{\n  \"name\": \"sushi_portable\",\n  \"version\": \"1.0.0\",\n  \"description\": \"寿司の絵文字を眺めるアプリ。\",\n  \"main\": \"./src/main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\"\n  },\n  \"keywords\": [],\n  \"author\": \"sushi\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"electron\": \"^6.0.3\"\n  }\n}\n```\n\nそしてすこし書き足します。buildから増えました。\n\n```json:package.json\n{\n  \"name\": \"sushi_portable\",\n  \"version\": \"1.0.0\",\n  \"description\": \"寿司の絵文字を眺めるアプリ。\",\n  \"main\": \"./src/main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\"\n  },\n  \"keywords\": [],\n  \"author\": \"sushi\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"electron\": \"^6.0.3\"\n  },\n  \"build\": {\n    \"productName\": \"寿司の絵文字眺めるやつ\",\n    \"appId\": \"sushi.emoji\",\n    \"win\": {\n      \"target\": \"portable\",\n      \"icon\": \"./src/icon.ico\"\n    }\n  }\n}\n```\n\nproductNameが名前、appIdはアプリケーションID（Application User Model ID）らしいです？\n```target```には```portable```にします。これでexeファイルダブルクリックで起動できるアプリになります。ポータブルアプリ。\n```nsis```にすればインストール形式になるそうです？。（要検証）\n```icon```はアイコン画像のパスです。srcの中に入れればいいのですが、拡張子がicoなので画像ファイルを何らかの方法でicoに変換する必要があります。ただし、一つ条件があって画像サイズを256×256にする必要があるようです。\n\n## ポータブルアプリ作成\nターミナル（PowerShell・コマンドプロンプト）で以下の文を入力。\n\n```console\nelectron-builder build --win\n```\n\nあとは終わるまで待ちましょう。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/50abd5ca-91a3-2152-e577-5b82e9b24296.png)\n\nおわると```dist```という名前のフォルダができてるのでその中のにあるexeファイルをダブルクリックして少し待てばウィンドウが出てきます。\n\n![SnapCrab_NoName_2019-8-22_0-30-47_No-00.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/9fdcb99d-00ab-b83d-71d7-1f1d9d7d90bb.png)\n\n\n**完成です！！！**\n\n## 追記\n\n![SnapCrab_NoName_2019-8-22_0-39-35_No-00.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/f0d114e3-99ed-fb82-441e-19ac8a9097f8.png)\n\nソースコードです→https://github.com/takusan23/SushiPortable\n\n## 更に追記　2020/02/28\n\nコメントでelectron-builderが見つからんってあったので調べたら[公式サイト](https://www.electron.build/)と導入方法が違ったので追記しておきます。\n\nちなみにyarnのバージョンは1.22.0です。\n\nとりあえずelectron-builderを消しましょう。\n\n```console\nyarn global remove electron-builder\n```\n\n消せたら以下の文を入力してなにもないことを確認します\n\n```console\nyarn global list --depth=0\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/226b19ef-9f95-0116-fb30-471e25eb2d0f.png)\n\n次に公式と同じ方法でelectron-builderを入れます。\n\n```console\nyarn add electron-builder --dev\n```\n\n成功すれば```package.json```のdevDependenciesの中に\n```\"electron-builder\": \"^22.3.2\"```が追加されているはずです。\n\nちなみにelectron-builderと入力しても無いって言われるだけです。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/b0192e15-4f4b-915d-4bef-0bfaa01386e6.png)\n\n次にpackage.jsonに書き足してなければ、\n[package.jsonに書き足す](https://qiita.com/takusan_23/items/0ae82e0a4a1ea6469bbd#packagejson%E3%81%AB%E6%9B%B8%E3%81%8D%E8%B6%B3%E3%81%99)で書き足してきてください。ここは同じ。\n\n最後に以下のコマンドを入力すれば処理が始まるはずです。\n\n```console\nyarn electron-builder --win\n```\n\nelectron-builderがうまく動かない場合は試してみてください。（私はどちらでも動いたのですが；；）\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/b41f1f15-2800-b2ce-b128-7b24c7a9c839.png)\n\nあと一応```package.json```置いときますね\n\n```json:package.json\n{\n  \"name\": \"ElectronBuilderSample\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"src/main.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"takusan23\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"electron\": \"^8.0.2\",\n    \"electron-builder\": \"^22.3.2\"\n  },\n  \"build\": {\n    \"productName\": \"てすと\",\n    \"appId\": \"aiueo.test\",\n    \"win\": {\n      \"target\": \"portable\",\n      \"icon\": \"src/icon.ico\"\n    }\n  }\n}\n```\n\n### おわりに\nexeダブルクリックから数秒～数十秒かかるのは仕様？わからん！\n\n## 参考にしました。\nhttps://qiita.com/SallyAcolyte/items/94ed26ab62b8b32b1b2c\nhttp://var.blog.jp/archives/78877702.html\n",
                "slug": "Electron Builder",
                "published": 1,
                "date": "2020-04-05T16:27:15.739Z",
                "updated": "2020-04-05T16:39:24.716Z",
                "comments": 1,
                "layout": "post",
                "photos": [],
                "link": "",
                "_id": "ck8r8f7c0000528vud963ffcb",
                "content": "<p>久しぶりにElectronについて<strong>お話します。</strong></p>\n<h1 id=\"exeファイルにして動かしたい。\"><a href=\"#exeファイルにして動かしたい。\" class=\"headerlink\" title=\"exeファイルにして動かしたい。\"></a>exeファイルにして動かしたい。</h1><p>しかし2015年とか2016年の記事がおおい。つらい。<del>令和だぞ。</del></p>\n<p>というわけで今回はElectronで適当にアプリを作ってポータブルアプリとしてすぐ使えるようにするところを目標に作っていこうと思います。==インストール不要で動かす！</p>\n<h1 id=\"何作る。\"><a href=\"#何作る。\" class=\"headerlink\" title=\"何作る。\"></a>何作る。</h1><p>marqueeタグで🍣を流すだけのアプリ。かんたん。</p>\n<h1 id=\"作り方\"><a href=\"#作り方\" class=\"headerlink\" title=\"作り方\"></a>作り方</h1><h2 id=\"セットアップ-npm-init\"><a href=\"#セットアップ-npm-init\" class=\"headerlink\" title=\"セットアップ npm init\"></a>セットアップ npm init</h2><p>セットアップは自分が書いた過去の記事と同じことしてます。<a href=\"https://qiita.com/takusan_23/items/eca19b4111109616bbfa\" target=\"_blank\" rel=\"noopener\">ここ</a>。</p>\n<p>適当にフォルダを作成する。</p>\n<p>作ったフォルダの中で<code>Shift+右クリック</code>で<code>PowerShell ウィンドウをここに開く</code>か<code>コマンド ウィンドウをここで開く</code>を押します。（Win10は前者。それ以外は後者）。</p>\n<p>開いたら中で以下の文を入力します。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">&#96;</span><br></pre></td></tr></table></figure>\n\n<p>これで<code>package.json</code>が作成できていれば成功です。</p>\n<p>そしたらpackage.jsonを開いて、少し書き換えます。</p>\n<figure class=\"highlight plain\"><figcaption><span>: \"index.js\",```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">↓</span><br><span class=\"line\">&#96;&#96;&#96;&quot;main&quot;: &quot;.&#x2F;src&#x2F;main.js&quot;,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>↓</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">   &quot;start&quot;: &quot;electron .&quot;</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"セットアップ-npm-install-–save-dev-electron\"><a href=\"#セットアップ-npm-install-–save-dev-electron\" class=\"headerlink\" title=\"セットアップ npm install –save-dev electron\"></a>セットアップ npm install –save-dev electron</h2><p>PowerShellまたはコマンドプロンプトの画面はそのまま、次の文を入力しましょう。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev electron</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"セットアップ-好きなエディタを開いて\"><a href=\"#セットアップ-好きなエディタを開いて\" class=\"headerlink\" title=\"セットアップ 好きなエディタを開いて\"></a>セットアップ 好きなエディタを開いて</h2><p>最初に作ったフォルダの中にsrcフォルダを作成してください。（スクリーンショットにicon.icoがありますが気にせず。）</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/50f257ab-2fac-e705-a5ca-235e207c2496.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>作成したら中に。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;index.html</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">それぞれ</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;json:package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;main&quot;: &quot;main.js&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang&#x3D;&quot;ja&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;寿司が流れるだけのアプリ&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body style&#x3D;&quot;-webkit-app-region: drag;background-color: rgba(157, 204, 224\t, .7)&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 寿司が流れるだけ --&gt;</span><br><span class=\"line\">    &lt;div style&#x3D;&quot;padding: 20px&quot; class&#x3D;&quot;center&quot;&gt;</span><br><span class=\"line\">        &lt;marquee id&#x3D;&quot;marquee&quot; scrollamount&#x3D;&quot;25&quot;&gt;</span><br><span class=\"line\">            &lt;font id&#x3D;&quot;text&quot; size&#x3D;&quot;7&quot;&gt;🍣&lt;&#x2F;font&gt;</span><br><span class=\"line\">        &lt;&#x2F;marquee&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Modules to control application life and create native browser window</span><br><span class=\"line\">const &#123; app, BrowserWindow, Menu &#125; &#x3D; require(&#39;electron&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Keep a global reference of the window object, if you don&#39;t, the window will</span><br><span class=\"line\">&#x2F;&#x2F; be closed automatically when the JavaScript object is garbage collected.</span><br><span class=\"line\">let mainWindow</span><br><span class=\"line\"></span><br><span class=\"line\">function createWindow() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Create the browser window.</span><br><span class=\"line\">    mainWindow &#x3D; new BrowserWindow(&#123;</span><br><span class=\"line\">        width: 300,         &#x2F;&#x2F;横</span><br><span class=\"line\">        height: 150,        &#x2F;&#x2F;縦</span><br><span class=\"line\">        frame: false,       &#x2F;&#x2F;フレームなくす</span><br><span class=\"line\">        transparent: true,   &#x2F;&#x2F;背景透明化</span><br><span class=\"line\">        alwaysOnTop: true,         &#x2F;&#x2F;最前面</span><br><span class=\"line\">        webPreferences: &#123;</span><br><span class=\"line\">            nodeIntegration: true   &#x2F;&#x2F;これ書く。</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; and load the index.html of the app.</span><br><span class=\"line\">    mainWindow.loadFile(&#39;.&#x2F;src&#x2F;index.html&#39;)</span><br><span class=\"line\">    &#x2F;&#x2F;メニューバー削除</span><br><span class=\"line\">    Menu.setApplicationMenu(null)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Open the DevTools.</span><br><span class=\"line\">    &#x2F;&#x2F; mainWindow.webContents.openDevTools()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Emitted when the window is closed.</span><br><span class=\"line\">    mainWindow.on(&#39;closed&#39;, function () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; Dereference the window object, usually you would store windows</span><br><span class=\"line\">        &#x2F;&#x2F; in an array if your app supports multi windows, this is the time</span><br><span class=\"line\">        &#x2F;&#x2F; when you should delete the corresponding element.</span><br><span class=\"line\">        mainWindow &#x3D; null</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; This method will be called when Electron has finished</span><br><span class=\"line\">&#x2F;&#x2F; initialization and is ready to create browser windows.</span><br><span class=\"line\">&#x2F;&#x2F; Some APIs can only be used after this event occurs.</span><br><span class=\"line\">app.on(&#39;ready&#39;, createWindow)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Quit when all windows are closed.</span><br><span class=\"line\">app.on(&#39;window-all-closed&#39;, function () &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; On macOS it is common for applications and their menu bar</span><br><span class=\"line\">    &#x2F;&#x2F; to stay active until the user quits explicitly with Cmd + Q</span><br><span class=\"line\">    if (process.platform !&#x3D;&#x3D; &#39;darwin&#39;) app.quit()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(&#39;activate&#39;, function () &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; On macOS it&#39;s common to re-create a window in the app when the</span><br><span class=\"line\">    &#x2F;&#x2F; dock icon is clicked and there are no other windows open.</span><br><span class=\"line\">    if (mainWindow &#x3D;&#x3D;&#x3D; null) createWindow()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; In this file you can include the rest of your app&#39;s specific main process</span><br><span class=\"line\">&#x2F;&#x2F; code. You can also put them in separate files and require them here.</span><br></pre></td></tr></table></figure>\n\n<p>このまま実行すると半透明で小さくてどのウィンドウより前に出るただ🍣が流れるウィンドウができてるはずです。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/d2ef021e-e0b8-de7c-38fb-74ca80adf223.png\" alt=\"SnapCrab_NoName_2019-8-22_0-1-26_No-00.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">SnapCrab_NoName_2019-8-22_0-1-26_No-00.png</div>\n            </figure>\n\n<p>ちなみに右クリックすることで閉じたり最大化できます。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/01f43431-50e5-9aba-9fbe-0322af15944a.png\" alt=\"SnapCrab_寿司が流れるだけのアプリ_2019-8-21_23-58-10_No-00.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">SnapCrab_寿司が流れるだけのアプリ_2019-8-21_23-58-10_No-00.png</div>\n            </figure>\n\n<p>とってもいらないアプリが完成しました。</p>\n<h2 id=\"electron-builderをいれる\"><a href=\"#electron-builderをいれる\" class=\"headerlink\" title=\"electron-builderをいれる\"></a>electron-builderをいれる</h2><p>これはyarnをインストールする必要があります。インストーラーに沿ってやればできます。<br>ちゃんとインストールできたかどうかは以下の文をいれてバージョンが出ればおｋです。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn -v</span><br></pre></td></tr></table></figure>\n\n<p>そしたら以下の文をいれて<code>electron-builder</code>をインストールします。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add electron-builder</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"package-jsonに書き足す\"><a href=\"#package-jsonに書き足す\" class=\"headerlink\" title=\"package.jsonに書き足す\"></a>package.jsonに書き足す</h2><p>どっちのpackage.jsonか？srcじゃない方。npm initで作成したほう。<br>開いてみて明らかに下の中身と違う場合は開くの間違えてます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;sushi_portable&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;寿司の絵文字を眺めるアプリ。&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;.&#x2F;src&#x2F;main.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;start&quot;: &quot;electron .&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;keywords&quot;: [],</span><br><span class=\"line\">  &quot;author&quot;: &quot;sushi&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;electron&quot;: &quot;^6.0.3&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>そしてすこし書き足します。buildから増えました。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;sushi_portable&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;寿司の絵文字を眺めるアプリ。&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;.&#x2F;src&#x2F;main.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;start&quot;: &quot;electron .&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;keywords&quot;: [],</span><br><span class=\"line\">  &quot;author&quot;: &quot;sushi&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;electron&quot;: &quot;^6.0.3&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;build&quot;: &#123;</span><br><span class=\"line\">    &quot;productName&quot;: &quot;寿司の絵文字眺めるやつ&quot;,</span><br><span class=\"line\">    &quot;appId&quot;: &quot;sushi.emoji&quot;,</span><br><span class=\"line\">    &quot;win&quot;: &#123;</span><br><span class=\"line\">      &quot;target&quot;: &quot;portable&quot;,</span><br><span class=\"line\">      &quot;icon&quot;: &quot;.&#x2F;src&#x2F;icon.ico&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>productNameが名前、appIdはアプリケーションID（Application User Model ID）らしいです？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;nsis&#96;&#96;&#96;にすればインストール形式になるそうです？。（要検証）</span><br><span class=\"line\">&#96;&#96;&#96;icon&#96;&#96;&#96;はアイコン画像のパスです。srcの中に入れればいいのですが、拡張子がicoなので画像ファイルを何らかの方法でicoに変換する必要があります。ただし、一つ条件があって画像サイズを256×256にする必要があるようです。</span><br><span class=\"line\"></span><br><span class=\"line\">## ポータブルアプリ作成</span><br><span class=\"line\">ターミナル（PowerShell・コマンドプロンプト）で以下の文を入力。</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;console</span><br><span class=\"line\">electron-builder build --win</span><br></pre></td></tr></table></figure>\n\n<p>あとは終わるまで待ちましょう。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/50abd5ca-91a3-2152-e577-5b82e9b24296.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>おわると<code>dist</code>という名前のフォルダができてるのでその中のにあるexeファイルをダブルクリックして少し待てばウィンドウが出てきます。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/9fdcb99d-00ab-b83d-71d7-1f1d9d7d90bb.png\" alt=\"SnapCrab_NoName_2019-8-22_0-30-47_No-00.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">SnapCrab_NoName_2019-8-22_0-30-47_No-00.png</div>\n            </figure>\n\n\n<p><strong>完成です！！！</strong></p>\n<h2 id=\"追記\"><a href=\"#追記\" class=\"headerlink\" title=\"追記\"></a>追記</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/f0d114e3-99ed-fb82-441e-19ac8a9097f8.png\" alt=\"SnapCrab_NoName_2019-8-22_0-39-35_No-00.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">SnapCrab_NoName_2019-8-22_0-39-35_No-00.png</div>\n            </figure>\n\n<p>ソースコードです→<a href=\"https://github.com/takusan23/SushiPortable\" target=\"_blank\" rel=\"noopener\">https://github.com/takusan23/SushiPortable</a></p>\n<h2 id=\"更に追記-2020-02-28\"><a href=\"#更に追記-2020-02-28\" class=\"headerlink\" title=\"更に追記　2020/02/28\"></a>更に追記　2020/02/28</h2><p>コメントでelectron-builderが見つからんってあったので調べたら<a href=\"https://www.electron.build/\" target=\"_blank\" rel=\"noopener\">公式サイト</a>と導入方法が違ったので追記しておきます。</p>\n<p>ちなみにyarnのバージョンは1.22.0です。</p>\n<p>とりあえずelectron-builderを消しましょう。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global remove electron-builder</span><br></pre></td></tr></table></figure>\n\n<p>消せたら以下の文を入力してなにもないことを確認します</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global list --depth=0</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/226b19ef-9f95-0116-fb30-471e25eb2d0f.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>次に公式と同じ方法でelectron-builderを入れます。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add electron-builder --dev</span><br></pre></td></tr></table></figure>\n\n<p>成功すれば<code>package.json</code>のdevDependenciesの中に</p>\n<figure class=\"highlight plain\"><figcaption><span>\"^22.3.2\"```が追加されているはずです。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ちなみにelectron-builderと入力しても無いって言われるだけです。</span><br><span class=\"line\">![image.png](https:&#x2F;&#x2F;qiita-image-store.s3.ap-northeast-1.amazonaws.com&#x2F;0&#x2F;409918&#x2F;b0192e15-4f4b-915d-4bef-0bfaa01386e6.png)</span><br><span class=\"line\"></span><br><span class=\"line\">次にpackage.jsonに書き足してなければ、</span><br><span class=\"line\">[package.jsonに書き足す](https:&#x2F;&#x2F;qiita.com&#x2F;takusan_23&#x2F;items&#x2F;0ae82e0a4a1ea6469bbd#packagejson%E3%81%AB%E6%9B%B8%E3%81%8D%E8%B6%B3%E3%81%99)で書き足してきてください。ここは同じ。</span><br><span class=\"line\"></span><br><span class=\"line\">最後に以下のコマンドを入力すれば処理が始まるはずです。</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;console</span><br><span class=\"line\">yarn electron-builder --win</span><br></pre></td></tr></table></figure>\n\n<p>electron-builderがうまく動かない場合は試してみてください。（私はどちらでも動いたのですが；；）</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/b41f1f15-2800-b2ce-b128-7b24c7a9c839.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>あと一応<code>package.json</code>置いときますね</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;ElectronBuilderSample&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;src&#x2F;main.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;keywords&quot;: [],</span><br><span class=\"line\">  &quot;author&quot;: &quot;takusan23&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;electron&quot;: &quot;^8.0.2&quot;,</span><br><span class=\"line\">    &quot;electron-builder&quot;: &quot;^22.3.2&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;build&quot;: &#123;</span><br><span class=\"line\">    &quot;productName&quot;: &quot;てすと&quot;,</span><br><span class=\"line\">    &quot;appId&quot;: &quot;aiueo.test&quot;,</span><br><span class=\"line\">    &quot;win&quot;: &#123;</span><br><span class=\"line\">      &quot;target&quot;: &quot;portable&quot;,</span><br><span class=\"line\">      &quot;icon&quot;: &quot;src&#x2F;icon.ico&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h3><p>exeダブルクリックから数秒～数十秒かかるのは仕様？わからん！</p>\n<h2 id=\"参考にしました。\"><a href=\"#参考にしました。\" class=\"headerlink\" title=\"参考にしました。\"></a>参考にしました。</h2><p><a href=\"https://qiita.com/SallyAcolyte/items/94ed26ab62b8b32b1b2c\" target=\"_blank\" rel=\"noopener\">https://qiita.com/SallyAcolyte/items/94ed26ab62b8b32b1b2c</a><br><a href=\"http://var.blog.jp/archives/78877702.html\" target=\"_blank\" rel=\"noopener\">http://var.blog.jp/archives/78877702.html</a></p>\n",
                "site": {
                    "data": {}
                },
                "excerpt": "",
                "more": "<p>久しぶりにElectronについて<strong>お話します。</strong></p>\n<h1 id=\"exeファイルにして動かしたい。\"><a href=\"#exeファイルにして動かしたい。\" class=\"headerlink\" title=\"exeファイルにして動かしたい。\"></a>exeファイルにして動かしたい。</h1><p>しかし2015年とか2016年の記事がおおい。つらい。<del>令和だぞ。</del></p>\n<p>というわけで今回はElectronで適当にアプリを作ってポータブルアプリとしてすぐ使えるようにするところを目標に作っていこうと思います。==インストール不要で動かす！</p>\n<h1 id=\"何作る。\"><a href=\"#何作る。\" class=\"headerlink\" title=\"何作る。\"></a>何作る。</h1><p>marqueeタグで🍣を流すだけのアプリ。かんたん。</p>\n<h1 id=\"作り方\"><a href=\"#作り方\" class=\"headerlink\" title=\"作り方\"></a>作り方</h1><h2 id=\"セットアップ-npm-init\"><a href=\"#セットアップ-npm-init\" class=\"headerlink\" title=\"セットアップ npm init\"></a>セットアップ npm init</h2><p>セットアップは自分が書いた過去の記事と同じことしてます。<a href=\"https://qiita.com/takusan_23/items/eca19b4111109616bbfa\" target=\"_blank\" rel=\"noopener\">ここ</a>。</p>\n<p>適当にフォルダを作成する。</p>\n<p>作ったフォルダの中で<code>Shift+右クリック</code>で<code>PowerShell ウィンドウをここに開く</code>か<code>コマンド ウィンドウをここで開く</code>を押します。（Win10は前者。それ以外は後者）。</p>\n<p>開いたら中で以下の文を入力します。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">&#96;</span><br></pre></td></tr></table></figure>\n\n<p>これで<code>package.json</code>が作成できていれば成功です。</p>\n<p>そしたらpackage.jsonを開いて、少し書き換えます。</p>\n<figure class=\"highlight plain\"><figcaption><span>: \"index.js\",```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">↓</span><br><span class=\"line\">&#96;&#96;&#96;&quot;main&quot;: &quot;.&#x2F;src&#x2F;main.js&quot;,</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>↓</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">   &quot;start&quot;: &quot;electron .&quot;</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"セットアップ-npm-install-–save-dev-electron\"><a href=\"#セットアップ-npm-install-–save-dev-electron\" class=\"headerlink\" title=\"セットアップ npm install –save-dev electron\"></a>セットアップ npm install –save-dev electron</h2><p>PowerShellまたはコマンドプロンプトの画面はそのまま、次の文を入力しましょう。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev electron</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"セットアップ-好きなエディタを開いて\"><a href=\"#セットアップ-好きなエディタを開いて\" class=\"headerlink\" title=\"セットアップ 好きなエディタを開いて\"></a>セットアップ 好きなエディタを開いて</h2><p>最初に作ったフォルダの中にsrcフォルダを作成してください。（スクリーンショットにicon.icoがありますが気にせず。）</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/50f257ab-2fac-e705-a5ca-235e207c2496.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>作成したら中に。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;index.html</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">それぞれ</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;json:package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;main&quot;: &quot;main.js&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang&#x3D;&quot;ja&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;寿司が流れるだけのアプリ&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body style&#x3D;&quot;-webkit-app-region: drag;background-color: rgba(157, 204, 224\t, .7)&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 寿司が流れるだけ --&gt;</span><br><span class=\"line\">    &lt;div style&#x3D;&quot;padding: 20px&quot; class&#x3D;&quot;center&quot;&gt;</span><br><span class=\"line\">        &lt;marquee id&#x3D;&quot;marquee&quot; scrollamount&#x3D;&quot;25&quot;&gt;</span><br><span class=\"line\">            &lt;font id&#x3D;&quot;text&quot; size&#x3D;&quot;7&quot;&gt;🍣&lt;&#x2F;font&gt;</span><br><span class=\"line\">        &lt;&#x2F;marquee&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Modules to control application life and create native browser window</span><br><span class=\"line\">const &#123; app, BrowserWindow, Menu &#125; &#x3D; require(&#39;electron&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Keep a global reference of the window object, if you don&#39;t, the window will</span><br><span class=\"line\">&#x2F;&#x2F; be closed automatically when the JavaScript object is garbage collected.</span><br><span class=\"line\">let mainWindow</span><br><span class=\"line\"></span><br><span class=\"line\">function createWindow() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Create the browser window.</span><br><span class=\"line\">    mainWindow &#x3D; new BrowserWindow(&#123;</span><br><span class=\"line\">        width: 300,         &#x2F;&#x2F;横</span><br><span class=\"line\">        height: 150,        &#x2F;&#x2F;縦</span><br><span class=\"line\">        frame: false,       &#x2F;&#x2F;フレームなくす</span><br><span class=\"line\">        transparent: true,   &#x2F;&#x2F;背景透明化</span><br><span class=\"line\">        alwaysOnTop: true,         &#x2F;&#x2F;最前面</span><br><span class=\"line\">        webPreferences: &#123;</span><br><span class=\"line\">            nodeIntegration: true   &#x2F;&#x2F;これ書く。</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; and load the index.html of the app.</span><br><span class=\"line\">    mainWindow.loadFile(&#39;.&#x2F;src&#x2F;index.html&#39;)</span><br><span class=\"line\">    &#x2F;&#x2F;メニューバー削除</span><br><span class=\"line\">    Menu.setApplicationMenu(null)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Open the DevTools.</span><br><span class=\"line\">    &#x2F;&#x2F; mainWindow.webContents.openDevTools()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Emitted when the window is closed.</span><br><span class=\"line\">    mainWindow.on(&#39;closed&#39;, function () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; Dereference the window object, usually you would store windows</span><br><span class=\"line\">        &#x2F;&#x2F; in an array if your app supports multi windows, this is the time</span><br><span class=\"line\">        &#x2F;&#x2F; when you should delete the corresponding element.</span><br><span class=\"line\">        mainWindow &#x3D; null</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; This method will be called when Electron has finished</span><br><span class=\"line\">&#x2F;&#x2F; initialization and is ready to create browser windows.</span><br><span class=\"line\">&#x2F;&#x2F; Some APIs can only be used after this event occurs.</span><br><span class=\"line\">app.on(&#39;ready&#39;, createWindow)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Quit when all windows are closed.</span><br><span class=\"line\">app.on(&#39;window-all-closed&#39;, function () &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; On macOS it is common for applications and their menu bar</span><br><span class=\"line\">    &#x2F;&#x2F; to stay active until the user quits explicitly with Cmd + Q</span><br><span class=\"line\">    if (process.platform !&#x3D;&#x3D; &#39;darwin&#39;) app.quit()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(&#39;activate&#39;, function () &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; On macOS it&#39;s common to re-create a window in the app when the</span><br><span class=\"line\">    &#x2F;&#x2F; dock icon is clicked and there are no other windows open.</span><br><span class=\"line\">    if (mainWindow &#x3D;&#x3D;&#x3D; null) createWindow()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; In this file you can include the rest of your app&#39;s specific main process</span><br><span class=\"line\">&#x2F;&#x2F; code. You can also put them in separate files and require them here.</span><br></pre></td></tr></table></figure>\n\n<p>このまま実行すると半透明で小さくてどのウィンドウより前に出るただ🍣が流れるウィンドウができてるはずです。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/d2ef021e-e0b8-de7c-38fb-74ca80adf223.png\" alt=\"SnapCrab_NoName_2019-8-22_0-1-26_No-00.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">SnapCrab_NoName_2019-8-22_0-1-26_No-00.png</div>\n            </figure>\n\n<p>ちなみに右クリックすることで閉じたり最大化できます。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/01f43431-50e5-9aba-9fbe-0322af15944a.png\" alt=\"SnapCrab_寿司が流れるだけのアプリ_2019-8-21_23-58-10_No-00.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">SnapCrab_寿司が流れるだけのアプリ_2019-8-21_23-58-10_No-00.png</div>\n            </figure>\n\n<p>とってもいらないアプリが完成しました。</p>\n<h2 id=\"electron-builderをいれる\"><a href=\"#electron-builderをいれる\" class=\"headerlink\" title=\"electron-builderをいれる\"></a>electron-builderをいれる</h2><p>これはyarnをインストールする必要があります。インストーラーに沿ってやればできます。<br>ちゃんとインストールできたかどうかは以下の文をいれてバージョンが出ればおｋです。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn -v</span><br></pre></td></tr></table></figure>\n\n<p>そしたら以下の文をいれて<code>electron-builder</code>をインストールします。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add electron-builder</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"package-jsonに書き足す\"><a href=\"#package-jsonに書き足す\" class=\"headerlink\" title=\"package.jsonに書き足す\"></a>package.jsonに書き足す</h2><p>どっちのpackage.jsonか？srcじゃない方。npm initで作成したほう。<br>開いてみて明らかに下の中身と違う場合は開くの間違えてます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;sushi_portable&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;寿司の絵文字を眺めるアプリ。&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;.&#x2F;src&#x2F;main.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;start&quot;: &quot;electron .&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;keywords&quot;: [],</span><br><span class=\"line\">  &quot;author&quot;: &quot;sushi&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;electron&quot;: &quot;^6.0.3&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>そしてすこし書き足します。buildから増えました。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;sushi_portable&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;寿司の絵文字を眺めるアプリ。&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;.&#x2F;src&#x2F;main.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;start&quot;: &quot;electron .&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;keywords&quot;: [],</span><br><span class=\"line\">  &quot;author&quot;: &quot;sushi&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;electron&quot;: &quot;^6.0.3&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;build&quot;: &#123;</span><br><span class=\"line\">    &quot;productName&quot;: &quot;寿司の絵文字眺めるやつ&quot;,</span><br><span class=\"line\">    &quot;appId&quot;: &quot;sushi.emoji&quot;,</span><br><span class=\"line\">    &quot;win&quot;: &#123;</span><br><span class=\"line\">      &quot;target&quot;: &quot;portable&quot;,</span><br><span class=\"line\">      &quot;icon&quot;: &quot;.&#x2F;src&#x2F;icon.ico&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>productNameが名前、appIdはアプリケーションID（Application User Model ID）らしいです？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;nsis&#96;&#96;&#96;にすればインストール形式になるそうです？。（要検証）</span><br><span class=\"line\">&#96;&#96;&#96;icon&#96;&#96;&#96;はアイコン画像のパスです。srcの中に入れればいいのですが、拡張子がicoなので画像ファイルを何らかの方法でicoに変換する必要があります。ただし、一つ条件があって画像サイズを256×256にする必要があるようです。</span><br><span class=\"line\"></span><br><span class=\"line\">## ポータブルアプリ作成</span><br><span class=\"line\">ターミナル（PowerShell・コマンドプロンプト）で以下の文を入力。</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;console</span><br><span class=\"line\">electron-builder build --win</span><br></pre></td></tr></table></figure>\n\n<p>あとは終わるまで待ちましょう。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/50abd5ca-91a3-2152-e577-5b82e9b24296.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>おわると<code>dist</code>という名前のフォルダができてるのでその中のにあるexeファイルをダブルクリックして少し待てばウィンドウが出てきます。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/9fdcb99d-00ab-b83d-71d7-1f1d9d7d90bb.png\" alt=\"SnapCrab_NoName_2019-8-22_0-30-47_No-00.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">SnapCrab_NoName_2019-8-22_0-30-47_No-00.png</div>\n            </figure>\n\n\n<p><strong>完成です！！！</strong></p>\n<h2 id=\"追記\"><a href=\"#追記\" class=\"headerlink\" title=\"追記\"></a>追記</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/f0d114e3-99ed-fb82-441e-19ac8a9097f8.png\" alt=\"SnapCrab_NoName_2019-8-22_0-39-35_No-00.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">SnapCrab_NoName_2019-8-22_0-39-35_No-00.png</div>\n            </figure>\n\n<p>ソースコードです→<a href=\"https://github.com/takusan23/SushiPortable\" target=\"_blank\" rel=\"noopener\">https://github.com/takusan23/SushiPortable</a></p>\n<h2 id=\"更に追記-2020-02-28\"><a href=\"#更に追記-2020-02-28\" class=\"headerlink\" title=\"更に追記　2020/02/28\"></a>更に追記　2020/02/28</h2><p>コメントでelectron-builderが見つからんってあったので調べたら<a href=\"https://www.electron.build/\" target=\"_blank\" rel=\"noopener\">公式サイト</a>と導入方法が違ったので追記しておきます。</p>\n<p>ちなみにyarnのバージョンは1.22.0です。</p>\n<p>とりあえずelectron-builderを消しましょう。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global remove electron-builder</span><br></pre></td></tr></table></figure>\n\n<p>消せたら以下の文を入力してなにもないことを確認します</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global list --depth=0</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/226b19ef-9f95-0116-fb30-471e25eb2d0f.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>次に公式と同じ方法でelectron-builderを入れます。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add electron-builder --dev</span><br></pre></td></tr></table></figure>\n\n<p>成功すれば<code>package.json</code>のdevDependenciesの中に</p>\n<figure class=\"highlight plain\"><figcaption><span>\"^22.3.2\"```が追加されているはずです。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ちなみにelectron-builderと入力しても無いって言われるだけです。</span><br><span class=\"line\">![image.png](https:&#x2F;&#x2F;qiita-image-store.s3.ap-northeast-1.amazonaws.com&#x2F;0&#x2F;409918&#x2F;b0192e15-4f4b-915d-4bef-0bfaa01386e6.png)</span><br><span class=\"line\"></span><br><span class=\"line\">次にpackage.jsonに書き足してなければ、</span><br><span class=\"line\">[package.jsonに書き足す](https:&#x2F;&#x2F;qiita.com&#x2F;takusan_23&#x2F;items&#x2F;0ae82e0a4a1ea6469bbd#packagejson%E3%81%AB%E6%9B%B8%E3%81%8D%E8%B6%B3%E3%81%99)で書き足してきてください。ここは同じ。</span><br><span class=\"line\"></span><br><span class=\"line\">最後に以下のコマンドを入力すれば処理が始まるはずです。</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;console</span><br><span class=\"line\">yarn electron-builder --win</span><br></pre></td></tr></table></figure>\n\n<p>electron-builderがうまく動かない場合は試してみてください。（私はどちらでも動いたのですが；；）</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/b41f1f15-2800-b2ce-b128-7b24c7a9c839.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>あと一応<code>package.json</code>置いときますね</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;ElectronBuilderSample&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;src&#x2F;main.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;keywords&quot;: [],</span><br><span class=\"line\">  &quot;author&quot;: &quot;takusan23&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;electron&quot;: &quot;^8.0.2&quot;,</span><br><span class=\"line\">    &quot;electron-builder&quot;: &quot;^22.3.2&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;build&quot;: &#123;</span><br><span class=\"line\">    &quot;productName&quot;: &quot;てすと&quot;,</span><br><span class=\"line\">    &quot;appId&quot;: &quot;aiueo.test&quot;,</span><br><span class=\"line\">    &quot;win&quot;: &#123;</span><br><span class=\"line\">      &quot;target&quot;: &quot;portable&quot;,</span><br><span class=\"line\">      &quot;icon&quot;: &quot;src&#x2F;icon.ico&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h3><p>exeダブルクリックから数秒～数十秒かかるのは仕様？わからん！</p>\n<h2 id=\"参考にしました。\"><a href=\"#参考にしました。\" class=\"headerlink\" title=\"参考にしました。\"></a>参考にしました。</h2><p><a href=\"https://qiita.com/SallyAcolyte/items/94ed26ab62b8b32b1b2c\" target=\"_blank\" rel=\"noopener\">https://qiita.com/SallyAcolyte/items/94ed26ab62b8b32b1b2c</a><br><a href=\"http://var.blog.jp/archives/78877702.html\" target=\"_blank\" rel=\"noopener\">http://var.blog.jp/archives/78877702.html</a></p>\n"
            },
            {
                "title": "【Electron / TypeScript】 ElectronでTypeScript",
                "author": "takusan_23",
                "slide": false,
                "_content": "次Electronでなにか作る時はTypeScript使おっかなー。\n\n# 本題\nTypeScriptってのをあんまり触ったこと無いけど型が決められるとかなんとか。\n\n# 参考にしました\nhttps://github.com/electron/electron-quick-start-typescript\n\nここを真似してやる。\n\n# package.jsonつくる\n\nNode.js入れておいてね。\nnpm versionは6.4.1です。\n\n適当にフォルダを作成し、ターミナルで以下のコードを。\n\n```terminal\nnpm init -y\n```\n\n```package.json``` が作成されていれば成功です。\n\n# Electron入れる\n\nターミナルで\n\n```terminal\nnpm install --save electron\n```\n\n# TypeScript入れる\n\nターミナルで\n\n```terminal\nnpm install -g typescript\n```\n\n# package.jsonを書き換える\n\npackage.jsonを開いて、\"scripts\"{}を書き換えます。\n\n```json:package.json\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"start\": \"npm run build && electron ./js/main.js\"\n  }\n```\n\nあとmainのところも変えます\n\n```json:package.json\n  \"main\": \"js/main.js\",\n```\n\n\n# tsconfig.json 作成\n\nターミナルで\n\n```terminal\ntsc --init\n```\n\nと入力してください。\ntsconfig.jsonが生成されていれば成功です。\n\nファイルの中身は公式通りに書き換えておきましょう。\n\n```json:tsconfig.json\n{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"noImplicitAny\": true,\n    \"sourceMap\": true,\n    \"outDir\": \"js\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"*\": [\"node_modules/*\"]\n    }\n  },\n  \"include\": [\n    \"src/**/*\"\n  ]\n}\n```\n\n本家ではoutDirがdistになってますが、Electron Builderの出力と被りそうなので変えときました。(ドキュメント見れば変えられそう。)\n\n# HTMLとTypeScriptかく\n\nsrcフォルダを作成して、\n\nindex.html と main.ts を作成してください。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/185fc1f6-72ec-00aa-b75d-503663a4696c.png)\n\n```html:index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>TypeScript</title>\n</head>\n<body>\n    <h1>TypeScriptですー</h1>\n</body>\n</html>\n```\n\n```typescript:main.ts\nimport { app, BrowserWindow } from \"electron\";\nimport * as path from \"path\";\n\nlet mainWindow: Electron.BrowserWindow;\n\nfunction createWindow() {\n    // Create the browser window.\n    mainWindow = new BrowserWindow({\n        height: 600,\n        webPreferences: {\n            nodeIntegration: true //trueにしておく。preload使ってもいいけど今回はパス。\n        },\n        width: 800,\n    });\n\n    // and load the index.html of the app.\n    mainWindow.loadFile(path.join(__dirname, \"../src/index.html\"));　//index.htmlはsrcフォルダ（main.jsはjsフォルダ）なのでパス気をつけて。\n\n    // Open the DevTools.\n    mainWindow.webContents.openDevTools();\n\n    // Emitted when the window is closed.\n    mainWindow.on(\"closed\", () => {\n        // Dereference the window object, usually you would store windows\n        // in an array if your app supports multi windows, this is the time\n        // when you should delete the corresponding element.\n        mainWindow = null;\n    });\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on(\"ready\", createWindow);\n\n// Quit when all windows are closed.\napp.on(\"window-all-closed\", () => {\n    // On OS X it is common for applications and their menu bar\n    // to stay active until the user quits explicitly with Cmd + Q\n    if (process.platform !== \"darwin\") {\n        app.quit();\n    }\n});\n\napp.on(\"activate\", () => {\n    // On OS X it\"s common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (mainWindow === null) {\n        createWindow();\n    }\n});\n\n// In this file you can include the rest of your app\"s specific main process\n// code. You can also put them in separate files and require them here.\n```\n\nmain.tsは参考どおり（ちょっと変えたけど）です→https://github.com/electron/electron-quick-start-typescript/blob/master/src/main.ts\n\n# 実行してみる\n\nターミナルで\n\n```terminal\nnpm start\n```\n\nと入力すると起動するはずです。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/9c327da2-1e15-6c66-b1fd-226fb39458c9.png)\n\n実行するとTypeScriptがJavaScriptに変換されて、jsフォルダの中に入ってると思います。\n\n# レンダラープロセスもTypeScriptで\n\nレンダラープロセスとメインプロセスがよくわらんって方、\nconsole.log()がデベロッパーツールの方に出ればレンダラープロセス、\nターミナルの方に出力されればメインプロセスです。\nあとはalert()はレンダラープロセスからしか使えないのでそんな感じで。\n\n\n## まずはHTMLを変えて\n\n```html:index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>TypeScript</title>\n</head>\n<body>\n    <h1>TypeScriptですー</h1>\n    <input type=\"button\" value=\"ダイアログ\" id=\"button\">\n    <!-- srcには変換後のJS指定しておく -->\n    <script src=\"../js/renderer.js\"></script>\n</body>\n</html>\n```\n\n## renderer.ts 作成\n今回はダイアログを出してみましょう。\n申し訳程度のTypeScript要素\n\n```typescript:renderer.ts\n//レンダラープロセスなのでremoteつける\nconst { dialog } = require('electron').remote\n\nconst button: HTMLElement = document.getElementById('button')\n\n//ダイアログの選択肢とか\nconst dialogList: string[] = [\"🍜\", \"🍣\", \"🥞\"]\n\n//押した時\nbutton.onclick = function () {\n    dialog.showMessageBox(null, {\n        type: \"info\",\n        message: \"TypeScriptだぞ\",\n        buttons: dialogList\n    })\n}\n```\n\nこれで実行してボタンを押すとダイアログが表示されると思います。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/41d52c79-08b5-8177-1df2-3616c4d74a7c.png)\n\n以上です。\n\n### ソースコード\nhttps://github.com/takusan23/ElectronTypeScriptSample\n",
                "source": "_posts/Electron TypeScript.md",
                "raw": "---\ntitle: 【Electron / TypeScript】 ElectronでTypeScript\ntags:\n- Electron\n- JavaScript\n- TypeScript\n- Node.js\nauthor: takusan_23\nslide: false\n---\n次Electronでなにか作る時はTypeScript使おっかなー。\n\n# 本題\nTypeScriptってのをあんまり触ったこと無いけど型が決められるとかなんとか。\n\n# 参考にしました\nhttps://github.com/electron/electron-quick-start-typescript\n\nここを真似してやる。\n\n# package.jsonつくる\n\nNode.js入れておいてね。\nnpm versionは6.4.1です。\n\n適当にフォルダを作成し、ターミナルで以下のコードを。\n\n```terminal\nnpm init -y\n```\n\n```package.json``` が作成されていれば成功です。\n\n# Electron入れる\n\nターミナルで\n\n```terminal\nnpm install --save electron\n```\n\n# TypeScript入れる\n\nターミナルで\n\n```terminal\nnpm install -g typescript\n```\n\n# package.jsonを書き換える\n\npackage.jsonを開いて、\"scripts\"{}を書き換えます。\n\n```json:package.json\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"start\": \"npm run build && electron ./js/main.js\"\n  }\n```\n\nあとmainのところも変えます\n\n```json:package.json\n  \"main\": \"js/main.js\",\n```\n\n\n# tsconfig.json 作成\n\nターミナルで\n\n```terminal\ntsc --init\n```\n\nと入力してください。\ntsconfig.jsonが生成されていれば成功です。\n\nファイルの中身は公式通りに書き換えておきましょう。\n\n```json:tsconfig.json\n{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"noImplicitAny\": true,\n    \"sourceMap\": true,\n    \"outDir\": \"js\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"*\": [\"node_modules/*\"]\n    }\n  },\n  \"include\": [\n    \"src/**/*\"\n  ]\n}\n```\n\n本家ではoutDirがdistになってますが、Electron Builderの出力と被りそうなので変えときました。(ドキュメント見れば変えられそう。)\n\n# HTMLとTypeScriptかく\n\nsrcフォルダを作成して、\n\nindex.html と main.ts を作成してください。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/185fc1f6-72ec-00aa-b75d-503663a4696c.png)\n\n```html:index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>TypeScript</title>\n</head>\n<body>\n    <h1>TypeScriptですー</h1>\n</body>\n</html>\n```\n\n```typescript:main.ts\nimport { app, BrowserWindow } from \"electron\";\nimport * as path from \"path\";\n\nlet mainWindow: Electron.BrowserWindow;\n\nfunction createWindow() {\n    // Create the browser window.\n    mainWindow = new BrowserWindow({\n        height: 600,\n        webPreferences: {\n            nodeIntegration: true //trueにしておく。preload使ってもいいけど今回はパス。\n        },\n        width: 800,\n    });\n\n    // and load the index.html of the app.\n    mainWindow.loadFile(path.join(__dirname, \"../src/index.html\"));　//index.htmlはsrcフォルダ（main.jsはjsフォルダ）なのでパス気をつけて。\n\n    // Open the DevTools.\n    mainWindow.webContents.openDevTools();\n\n    // Emitted when the window is closed.\n    mainWindow.on(\"closed\", () => {\n        // Dereference the window object, usually you would store windows\n        // in an array if your app supports multi windows, this is the time\n        // when you should delete the corresponding element.\n        mainWindow = null;\n    });\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on(\"ready\", createWindow);\n\n// Quit when all windows are closed.\napp.on(\"window-all-closed\", () => {\n    // On OS X it is common for applications and their menu bar\n    // to stay active until the user quits explicitly with Cmd + Q\n    if (process.platform !== \"darwin\") {\n        app.quit();\n    }\n});\n\napp.on(\"activate\", () => {\n    // On OS X it\"s common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (mainWindow === null) {\n        createWindow();\n    }\n});\n\n// In this file you can include the rest of your app\"s specific main process\n// code. You can also put them in separate files and require them here.\n```\n\nmain.tsは参考どおり（ちょっと変えたけど）です→https://github.com/electron/electron-quick-start-typescript/blob/master/src/main.ts\n\n# 実行してみる\n\nターミナルで\n\n```terminal\nnpm start\n```\n\nと入力すると起動するはずです。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/9c327da2-1e15-6c66-b1fd-226fb39458c9.png)\n\n実行するとTypeScriptがJavaScriptに変換されて、jsフォルダの中に入ってると思います。\n\n# レンダラープロセスもTypeScriptで\n\nレンダラープロセスとメインプロセスがよくわらんって方、\nconsole.log()がデベロッパーツールの方に出ればレンダラープロセス、\nターミナルの方に出力されればメインプロセスです。\nあとはalert()はレンダラープロセスからしか使えないのでそんな感じで。\n\n\n## まずはHTMLを変えて\n\n```html:index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>TypeScript</title>\n</head>\n<body>\n    <h1>TypeScriptですー</h1>\n    <input type=\"button\" value=\"ダイアログ\" id=\"button\">\n    <!-- srcには変換後のJS指定しておく -->\n    <script src=\"../js/renderer.js\"></script>\n</body>\n</html>\n```\n\n## renderer.ts 作成\n今回はダイアログを出してみましょう。\n申し訳程度のTypeScript要素\n\n```typescript:renderer.ts\n//レンダラープロセスなのでremoteつける\nconst { dialog } = require('electron').remote\n\nconst button: HTMLElement = document.getElementById('button')\n\n//ダイアログの選択肢とか\nconst dialogList: string[] = [\"🍜\", \"🍣\", \"🥞\"]\n\n//押した時\nbutton.onclick = function () {\n    dialog.showMessageBox(null, {\n        type: \"info\",\n        message: \"TypeScriptだぞ\",\n        buttons: dialogList\n    })\n}\n```\n\nこれで実行してボタンを押すとダイアログが表示されると思います。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/41d52c79-08b5-8177-1df2-3616c4d74a7c.png)\n\n以上です。\n\n### ソースコード\nhttps://github.com/takusan23/ElectronTypeScriptSample\n",
                "slug": "Electron TypeScript",
                "published": 1,
                "date": "2020-04-05T16:27:15.269Z",
                "updated": "2020-04-05T16:39:45.180Z",
                "comments": 1,
                "layout": "post",
                "photos": [],
                "link": "",
                "_id": "ck8r8f7c2000728vu21ntazvx",
                "content": "<p>次Electronでなにか作る時はTypeScript使おっかなー。</p>\n<h1 id=\"本題\"><a href=\"#本題\" class=\"headerlink\" title=\"本題\"></a>本題</h1><p>TypeScriptってのをあんまり触ったこと無いけど型が決められるとかなんとか。</p>\n<h1 id=\"参考にしました\"><a href=\"#参考にしました\" class=\"headerlink\" title=\"参考にしました\"></a>参考にしました</h1><p><a href=\"https://github.com/electron/electron-quick-start-typescript\" target=\"_blank\" rel=\"noopener\">https://github.com/electron/electron-quick-start-typescript</a></p>\n<p>ここを真似してやる。</p>\n<h1 id=\"package-jsonつくる\"><a href=\"#package-jsonつくる\" class=\"headerlink\" title=\"package.jsonつくる\"></a>package.jsonつくる</h1><p>Node.js入れておいてね。<br>npm versionは6.4.1です。</p>\n<p>適当にフォルダを作成し、ターミナルで以下のコードを。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><figcaption><span>が作成されていれば成功です。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># Electron入れる</span><br><span class=\"line\"></span><br><span class=\"line\">ターミナルで</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;terminal</span><br><span class=\"line\">npm install --save electron</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"TypeScript入れる\"><a href=\"#TypeScript入れる\" class=\"headerlink\" title=\"TypeScript入れる\"></a>TypeScript入れる</h1><p>ターミナルで</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g typescript</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"package-jsonを書き換える\"><a href=\"#package-jsonを書き換える\" class=\"headerlink\" title=\"package.jsonを書き換える\"></a>package.jsonを書き換える</h1><p>package.jsonを開いて、”scripts”{}を書き換えます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;build&quot;: &quot;tsc&quot;,</span><br><span class=\"line\">  &quot;start&quot;: &quot;npm run build &amp;&amp; electron .&#x2F;js&#x2F;main.js&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>あとmainのところも変えます</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;main&quot;: &quot;js&#x2F;main.js&quot;,</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"tsconfig-json-作成\"><a href=\"#tsconfig-json-作成\" class=\"headerlink\" title=\"tsconfig.json 作成\"></a>tsconfig.json 作成</h1><p>ターミナルで</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc --init</span><br></pre></td></tr></table></figure>\n\n<p>と入力してください。<br>tsconfig.jsonが生成されていれば成功です。</p>\n<p>ファイルの中身は公式通りに書き換えておきましょう。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;compilerOptions&quot;: &#123;</span><br><span class=\"line\">    &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class=\"line\">    &quot;noImplicitAny&quot;: true,</span><br><span class=\"line\">    &quot;sourceMap&quot;: true,</span><br><span class=\"line\">    &quot;outDir&quot;: &quot;js&quot;,</span><br><span class=\"line\">    &quot;baseUrl&quot;: &quot;.&quot;,</span><br><span class=\"line\">    &quot;paths&quot;: &#123;</span><br><span class=\"line\">      &quot;*&quot;: [&quot;node_modules&#x2F;*&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;include&quot;: [</span><br><span class=\"line\">    &quot;src&#x2F;**&#x2F;*&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本家ではoutDirがdistになってますが、Electron Builderの出力と被りそうなので変えときました。(ドキュメント見れば変えられそう。)</p>\n<h1 id=\"HTMLとTypeScriptかく\"><a href=\"#HTMLとTypeScriptかく\" class=\"headerlink\" title=\"HTMLとTypeScriptかく\"></a>HTMLとTypeScriptかく</h1><p>srcフォルダを作成して、</p>\n<p>index.html と main.ts を作成してください。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/185fc1f6-72ec-00aa-b75d-503663a4696c.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;TypeScript&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;h1&gt;TypeScriptですー&lt;&#x2F;h1&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; app, BrowserWindow &#125; from &quot;electron&quot;;</span><br><span class=\"line\">import * as path from &quot;path&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">let mainWindow: Electron.BrowserWindow;</span><br><span class=\"line\"></span><br><span class=\"line\">function createWindow() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Create the browser window.</span><br><span class=\"line\">    mainWindow &#x3D; new BrowserWindow(&#123;</span><br><span class=\"line\">        height: 600,</span><br><span class=\"line\">        webPreferences: &#123;</span><br><span class=\"line\">            nodeIntegration: true &#x2F;&#x2F;trueにしておく。preload使ってもいいけど今回はパス。</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        width: 800,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; and load the index.html of the app.</span><br><span class=\"line\">    mainWindow.loadFile(path.join(__dirname, &quot;..&#x2F;src&#x2F;index.html&quot;));　&#x2F;&#x2F;index.htmlはsrcフォルダ（main.jsはjsフォルダ）なのでパス気をつけて。</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Open the DevTools.</span><br><span class=\"line\">    mainWindow.webContents.openDevTools();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Emitted when the window is closed.</span><br><span class=\"line\">    mainWindow.on(&quot;closed&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; Dereference the window object, usually you would store windows</span><br><span class=\"line\">        &#x2F;&#x2F; in an array if your app supports multi windows, this is the time</span><br><span class=\"line\">        &#x2F;&#x2F; when you should delete the corresponding element.</span><br><span class=\"line\">        mainWindow &#x3D; null;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; This method will be called when Electron has finished</span><br><span class=\"line\">&#x2F;&#x2F; initialization and is ready to create browser windows.</span><br><span class=\"line\">&#x2F;&#x2F; Some APIs can only be used after this event occurs.</span><br><span class=\"line\">app.on(&quot;ready&quot;, createWindow);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Quit when all windows are closed.</span><br><span class=\"line\">app.on(&quot;window-all-closed&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; On OS X it is common for applications and their menu bar</span><br><span class=\"line\">    &#x2F;&#x2F; to stay active until the user quits explicitly with Cmd + Q</span><br><span class=\"line\">    if (process.platform !&#x3D;&#x3D; &quot;darwin&quot;) &#123;</span><br><span class=\"line\">        app.quit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(&quot;activate&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; On OS X it&quot;s common to re-create a window in the app when the</span><br><span class=\"line\">    &#x2F;&#x2F; dock icon is clicked and there are no other windows open.</span><br><span class=\"line\">    if (mainWindow &#x3D;&#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">        createWindow();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; In this file you can include the rest of your app&quot;s specific main process</span><br><span class=\"line\">&#x2F;&#x2F; code. You can also put them in separate files and require them here.</span><br></pre></td></tr></table></figure>\n\n<p>main.tsは参考どおり（ちょっと変えたけど）です→<a href=\"https://github.com/electron/electron-quick-start-typescript/blob/master/src/main.ts\" target=\"_blank\" rel=\"noopener\">https://github.com/electron/electron-quick-start-typescript/blob/master/src/main.ts</a></p>\n<h1 id=\"実行してみる\"><a href=\"#実行してみる\" class=\"headerlink\" title=\"実行してみる\"></a>実行してみる</h1><p>ターミナルで</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<p>と入力すると起動するはずです。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/9c327da2-1e15-6c66-b1fd-226fb39458c9.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>実行するとTypeScriptがJavaScriptに変換されて、jsフォルダの中に入ってると思います。</p>\n<h1 id=\"レンダラープロセスもTypeScriptで\"><a href=\"#レンダラープロセスもTypeScriptで\" class=\"headerlink\" title=\"レンダラープロセスもTypeScriptで\"></a>レンダラープロセスもTypeScriptで</h1><p>レンダラープロセスとメインプロセスがよくわらんって方、<br>console.log()がデベロッパーツールの方に出ればレンダラープロセス、<br>ターミナルの方に出力されればメインプロセスです。<br>あとはalert()はレンダラープロセスからしか使えないのでそんな感じで。</p>\n<h2 id=\"まずはHTMLを変えて\"><a href=\"#まずはHTMLを変えて\" class=\"headerlink\" title=\"まずはHTMLを変えて\"></a>まずはHTMLを変えて</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;TypeScript&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;h1&gt;TypeScriptですー&lt;&#x2F;h1&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;ダイアログ&quot; id&#x3D;&quot;button&quot;&gt;</span><br><span class=\"line\">    &lt;!-- srcには変換後のJS指定しておく --&gt;</span><br><span class=\"line\">    &lt;script src&#x3D;&quot;..&#x2F;js&#x2F;renderer.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"renderer-ts-作成\"><a href=\"#renderer-ts-作成\" class=\"headerlink\" title=\"renderer.ts 作成\"></a>renderer.ts 作成</h2><p>今回はダイアログを出してみましょう。<br>申し訳程度のTypeScript要素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;レンダラープロセスなのでremoteつける</span><br><span class=\"line\">const &#123; dialog &#125; &#x3D; require(&#39;electron&#39;).remote</span><br><span class=\"line\"></span><br><span class=\"line\">const button: HTMLElement &#x3D; document.getElementById(&#39;button&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;ダイアログの選択肢とか</span><br><span class=\"line\">const dialogList: string[] &#x3D; [&quot;🍜&quot;, &quot;🍣&quot;, &quot;🥞&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;押した時</span><br><span class=\"line\">button.onclick &#x3D; function () &#123;</span><br><span class=\"line\">    dialog.showMessageBox(null, &#123;</span><br><span class=\"line\">        type: &quot;info&quot;,</span><br><span class=\"line\">        message: &quot;TypeScriptだぞ&quot;,</span><br><span class=\"line\">        buttons: dialogList</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>これで実行してボタンを押すとダイアログが表示されると思います。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/41d52c79-08b5-8177-1df2-3616c4d74a7c.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>以上です。</p>\n<h3 id=\"ソースコード\"><a href=\"#ソースコード\" class=\"headerlink\" title=\"ソースコード\"></a>ソースコード</h3><p><a href=\"https://github.com/takusan23/ElectronTypeScriptSample\" target=\"_blank\" rel=\"noopener\">https://github.com/takusan23/ElectronTypeScriptSample</a></p>\n",
                "site": {
                    "data": {}
                },
                "excerpt": "",
                "more": "<p>次Electronでなにか作る時はTypeScript使おっかなー。</p>\n<h1 id=\"本題\"><a href=\"#本題\" class=\"headerlink\" title=\"本題\"></a>本題</h1><p>TypeScriptってのをあんまり触ったこと無いけど型が決められるとかなんとか。</p>\n<h1 id=\"参考にしました\"><a href=\"#参考にしました\" class=\"headerlink\" title=\"参考にしました\"></a>参考にしました</h1><p><a href=\"https://github.com/electron/electron-quick-start-typescript\" target=\"_blank\" rel=\"noopener\">https://github.com/electron/electron-quick-start-typescript</a></p>\n<p>ここを真似してやる。</p>\n<h1 id=\"package-jsonつくる\"><a href=\"#package-jsonつくる\" class=\"headerlink\" title=\"package.jsonつくる\"></a>package.jsonつくる</h1><p>Node.js入れておいてね。<br>npm versionは6.4.1です。</p>\n<p>適当にフォルダを作成し、ターミナルで以下のコードを。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><figcaption><span>が作成されていれば成功です。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># Electron入れる</span><br><span class=\"line\"></span><br><span class=\"line\">ターミナルで</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;terminal</span><br><span class=\"line\">npm install --save electron</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"TypeScript入れる\"><a href=\"#TypeScript入れる\" class=\"headerlink\" title=\"TypeScript入れる\"></a>TypeScript入れる</h1><p>ターミナルで</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g typescript</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"package-jsonを書き換える\"><a href=\"#package-jsonを書き換える\" class=\"headerlink\" title=\"package.jsonを書き換える\"></a>package.jsonを書き換える</h1><p>package.jsonを開いて、”scripts”{}を書き換えます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;build&quot;: &quot;tsc&quot;,</span><br><span class=\"line\">  &quot;start&quot;: &quot;npm run build &amp;&amp; electron .&#x2F;js&#x2F;main.js&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>あとmainのところも変えます</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;main&quot;: &quot;js&#x2F;main.js&quot;,</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"tsconfig-json-作成\"><a href=\"#tsconfig-json-作成\" class=\"headerlink\" title=\"tsconfig.json 作成\"></a>tsconfig.json 作成</h1><p>ターミナルで</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc --init</span><br></pre></td></tr></table></figure>\n\n<p>と入力してください。<br>tsconfig.jsonが生成されていれば成功です。</p>\n<p>ファイルの中身は公式通りに書き換えておきましょう。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;compilerOptions&quot;: &#123;</span><br><span class=\"line\">    &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class=\"line\">    &quot;noImplicitAny&quot;: true,</span><br><span class=\"line\">    &quot;sourceMap&quot;: true,</span><br><span class=\"line\">    &quot;outDir&quot;: &quot;js&quot;,</span><br><span class=\"line\">    &quot;baseUrl&quot;: &quot;.&quot;,</span><br><span class=\"line\">    &quot;paths&quot;: &#123;</span><br><span class=\"line\">      &quot;*&quot;: [&quot;node_modules&#x2F;*&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;include&quot;: [</span><br><span class=\"line\">    &quot;src&#x2F;**&#x2F;*&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本家ではoutDirがdistになってますが、Electron Builderの出力と被りそうなので変えときました。(ドキュメント見れば変えられそう。)</p>\n<h1 id=\"HTMLとTypeScriptかく\"><a href=\"#HTMLとTypeScriptかく\" class=\"headerlink\" title=\"HTMLとTypeScriptかく\"></a>HTMLとTypeScriptかく</h1><p>srcフォルダを作成して、</p>\n<p>index.html と main.ts を作成してください。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/185fc1f6-72ec-00aa-b75d-503663a4696c.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;TypeScript&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;h1&gt;TypeScriptですー&lt;&#x2F;h1&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; app, BrowserWindow &#125; from &quot;electron&quot;;</span><br><span class=\"line\">import * as path from &quot;path&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">let mainWindow: Electron.BrowserWindow;</span><br><span class=\"line\"></span><br><span class=\"line\">function createWindow() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Create the browser window.</span><br><span class=\"line\">    mainWindow &#x3D; new BrowserWindow(&#123;</span><br><span class=\"line\">        height: 600,</span><br><span class=\"line\">        webPreferences: &#123;</span><br><span class=\"line\">            nodeIntegration: true &#x2F;&#x2F;trueにしておく。preload使ってもいいけど今回はパス。</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        width: 800,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; and load the index.html of the app.</span><br><span class=\"line\">    mainWindow.loadFile(path.join(__dirname, &quot;..&#x2F;src&#x2F;index.html&quot;));　&#x2F;&#x2F;index.htmlはsrcフォルダ（main.jsはjsフォルダ）なのでパス気をつけて。</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Open the DevTools.</span><br><span class=\"line\">    mainWindow.webContents.openDevTools();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Emitted when the window is closed.</span><br><span class=\"line\">    mainWindow.on(&quot;closed&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; Dereference the window object, usually you would store windows</span><br><span class=\"line\">        &#x2F;&#x2F; in an array if your app supports multi windows, this is the time</span><br><span class=\"line\">        &#x2F;&#x2F; when you should delete the corresponding element.</span><br><span class=\"line\">        mainWindow &#x3D; null;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; This method will be called when Electron has finished</span><br><span class=\"line\">&#x2F;&#x2F; initialization and is ready to create browser windows.</span><br><span class=\"line\">&#x2F;&#x2F; Some APIs can only be used after this event occurs.</span><br><span class=\"line\">app.on(&quot;ready&quot;, createWindow);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Quit when all windows are closed.</span><br><span class=\"line\">app.on(&quot;window-all-closed&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; On OS X it is common for applications and their menu bar</span><br><span class=\"line\">    &#x2F;&#x2F; to stay active until the user quits explicitly with Cmd + Q</span><br><span class=\"line\">    if (process.platform !&#x3D;&#x3D; &quot;darwin&quot;) &#123;</span><br><span class=\"line\">        app.quit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(&quot;activate&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; On OS X it&quot;s common to re-create a window in the app when the</span><br><span class=\"line\">    &#x2F;&#x2F; dock icon is clicked and there are no other windows open.</span><br><span class=\"line\">    if (mainWindow &#x3D;&#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">        createWindow();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; In this file you can include the rest of your app&quot;s specific main process</span><br><span class=\"line\">&#x2F;&#x2F; code. You can also put them in separate files and require them here.</span><br></pre></td></tr></table></figure>\n\n<p>main.tsは参考どおり（ちょっと変えたけど）です→<a href=\"https://github.com/electron/electron-quick-start-typescript/blob/master/src/main.ts\" target=\"_blank\" rel=\"noopener\">https://github.com/electron/electron-quick-start-typescript/blob/master/src/main.ts</a></p>\n<h1 id=\"実行してみる\"><a href=\"#実行してみる\" class=\"headerlink\" title=\"実行してみる\"></a>実行してみる</h1><p>ターミナルで</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<p>と入力すると起動するはずです。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/9c327da2-1e15-6c66-b1fd-226fb39458c9.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>実行するとTypeScriptがJavaScriptに変換されて、jsフォルダの中に入ってると思います。</p>\n<h1 id=\"レンダラープロセスもTypeScriptで\"><a href=\"#レンダラープロセスもTypeScriptで\" class=\"headerlink\" title=\"レンダラープロセスもTypeScriptで\"></a>レンダラープロセスもTypeScriptで</h1><p>レンダラープロセスとメインプロセスがよくわらんって方、<br>console.log()がデベロッパーツールの方に出ればレンダラープロセス、<br>ターミナルの方に出力されればメインプロセスです。<br>あとはalert()はレンダラープロセスからしか使えないのでそんな感じで。</p>\n<h2 id=\"まずはHTMLを変えて\"><a href=\"#まずはHTMLを変えて\" class=\"headerlink\" title=\"まずはHTMLを変えて\"></a>まずはHTMLを変えて</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;TypeScript&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;h1&gt;TypeScriptですー&lt;&#x2F;h1&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;ダイアログ&quot; id&#x3D;&quot;button&quot;&gt;</span><br><span class=\"line\">    &lt;!-- srcには変換後のJS指定しておく --&gt;</span><br><span class=\"line\">    &lt;script src&#x3D;&quot;..&#x2F;js&#x2F;renderer.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"renderer-ts-作成\"><a href=\"#renderer-ts-作成\" class=\"headerlink\" title=\"renderer.ts 作成\"></a>renderer.ts 作成</h2><p>今回はダイアログを出してみましょう。<br>申し訳程度のTypeScript要素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;レンダラープロセスなのでremoteつける</span><br><span class=\"line\">const &#123; dialog &#125; &#x3D; require(&#39;electron&#39;).remote</span><br><span class=\"line\"></span><br><span class=\"line\">const button: HTMLElement &#x3D; document.getElementById(&#39;button&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;ダイアログの選択肢とか</span><br><span class=\"line\">const dialogList: string[] &#x3D; [&quot;🍜&quot;, &quot;🍣&quot;, &quot;🥞&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;押した時</span><br><span class=\"line\">button.onclick &#x3D; function () &#123;</span><br><span class=\"line\">    dialog.showMessageBox(null, &#123;</span><br><span class=\"line\">        type: &quot;info&quot;,</span><br><span class=\"line\">        message: &quot;TypeScriptだぞ&quot;,</span><br><span class=\"line\">        buttons: dialogList</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>これで実行してボタンを押すとダイアログが表示されると思います。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/41d52c79-08b5-8177-1df2-3616c4d74a7c.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>以上です。</p>\n<h3 id=\"ソースコード\"><a href=\"#ソースコード\" class=\"headerlink\" title=\"ソースコード\"></a>ソースコード</h3><p><a href=\"https://github.com/takusan23/ElectronTypeScriptSample\" target=\"_blank\" rel=\"noopener\">https://github.com/takusan23/ElectronTypeScriptSample</a></p>\n"
            },
            {
                "title": "【Android】 Material Components のバージョンを 1.0.0 から 1.1.0-alpha08 にして、Theme.MaterialComponentsと戦った話。",
                "author": "takusan_23",
                "slide": false,
                "_content": "こんばんは。\n虫（蛾？かどうかもわからん）が家に入ってきて怖いです。\n今回はタイトル通りMaterial Componentsのバージョンアップをして見る話です。\n\n# なぜアップデートしようとしたのか\nA. Snackbarの位置をFloating Action Buttonの上に表示させたかったから。\n[Snackbarsのガイドライン](https://material.io/design/components/snackbars.html#placement)の\nSnackbars and floating action buttons (FABs)\nでFABの上に表示させるのが正しいらしい。\nそれで真似ようと思ったのですが、古いのか```setAnchorView（どのViewの上に表示させるか？）```が見つからなかったのでアップデートしようというのが理由。\n\n# ところで最新バージョンはどこで知れるのか？\n\nこれ？\nhttps://github.com/material-components/material-components-android/releases\n\n作成日時では1.1.0-alpha08が最新ですので入れてみようと思います。\n最悪GitHubのちから？を借りて戻せばいいので挑戦です。\n\n# build.gradleを書き換える\n\n```gradle\n    //implementation 'com.google.android.material:material:1.0.0'\n    implementation 'com.google.android.material:material:1.1.0-alpha08'\n```\n##出会った問題\n\n###レイアウトのエラー\n下の方に書いてあった。\n\n```\nCaused by: java.lang.IllegalArgumentException: The style on this component requires your app theme to be Theme.MaterialComponents (or a descendant).\n```\n\n調べるとテーマがTheme.MaterialComponents系を使わないとだめだよ！ってことらしいです。\nこれを解決する方法は2つ。\n#### 解決策その１：レイアウト（xml）ファイルで親のレイアウトの中に```android:theme=\"@style/Theme.MaterialComponents\"```を書き足す。\nこんな感じに\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:theme=\"@style/Theme.MaterialComponents\"> <!--この行を付け足す。-->\n    <com.google.android.material.textfield.TextInputLayout\n        android:id=\"@+id/name_TextInputLayout\"\n        style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n        <EditText\n            android:id=\"@+id/name_editText\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:importantForAutofill=\"no\"\n            android:inputType=\"textMultiLine\"\n            android:singleLine=\"true\" />\n    </com.google.android.material.textfield.TextInputLayout>\n</LinearLayout>\n```\n\nこれで一応通るようになる。TextInputLayoutだけ使いたい！！！とかのときはTextInputLayoutの中に```android:theme=\"@style/Theme.MaterialComponents\"```を書き足せば大丈夫です。\n\n##### メリット\nかんたん。TextInputLayoutだけ使いたいなんかはこれでいい気がする。\n改善した方でもう満足した方はお疲れさまです。\n\n#### 解決策その２：styles.xmlを書き換える。\nstack overflowなんかではこっちが多いね。でも**この方法は結構きつい。**ちなみに私はこっちを使った。\nなぜならアプリの外観を結構変えることになる。\n書き換える場所はparentのところ。こうする```parent=\"Theme.MaterialComponents.Light.DarkActionBar\"```。\n以下例です。\n\n```xml\n    <!-- Base application theme. -->\n    <style name=\"AppTheme\" parent=\"Theme.MaterialComponents.Light.DarkActionBar\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimary</item>\n        <item name=\"colorAccent\">@color/colorPrimaryDark</item>\n    </style>\n```\n\nどうでしょう。結構変わったと思いますよ？\n\nで、ここからは**Theme.MaterialComponents**との戦いです。\n\n# Theme.MaterialComponents にして変わったところ。\n\n## 良かったところ\n\n- Snackbarの表示方法が変わった\n    - 下からすーっと表示？→ふわっと表示？する感じに（自分で見たほうがはやい）\n    - スペースができるようになった。（下に空間ができるようになった）\n\n![Screenshot_20190726-033304_Material_Test.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/c8961ea9-1823-0c05-938a-be07d81428de.png)\n\n\nほかにもあるかもだけど今回は時間無いので飛ばします。\n\n## 直す必要があったところ\n\n### BottonにBackgroundが設定されてしまう問題の解決方法\n\n参考\nhttps://stackoverflow.com/questions/52743190/when-use-theme-materialcomponents-light-noactionbar-style-set-button-background\n\nButtonはButtonでも```androidx.appcompat.widget.AppCompatButton```に変えてあげれば解決です。\n修正前\n\n```xml\n    <Button\n            android:layout_width=\"wrap_content\"\n            android:text=\"snackbar\"\n            android:id=\"@+id/snackbar_button\"\n            android:layout_height=\"wrap_content\"/>\n```\n\n修正後\n\n```xml\n    <androidx.appcompat.widget.AppCompatButton\n            android:layout_width=\"wrap_content\"\n            android:text=\"snackbar\"\n            android:id=\"@+id/snackbar_button\"\n            android:layout_height=\"wrap_content\"/>\n```\n\nちなみに私はBackgroundにボタンの枠ができる用に設定してたんですけど・・\n```style=\"@style/Widget.MaterialComponents.Button.OutlinedButton\"```\nを指定すれば枠がつくので私はstyleを書き足す形で対応しました。これだと押した時に波紋も出るのでいい感じ。\n\n![Screenshot_20190726-033945_Material_Test.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/1885d4f0-9209-6fa8-bb9c-7cf767fb838a.png)\n\n### AlertDialogのボタンがおかしくなる問題の解決方法\n参考にしました。\nhttps://stackoverflow.com/questions/52829954/materialcomponents-theme-alert-dialog-buttons\n\nこの様になってる場合は\n![Screenshot_20190726-034620_Material_Test.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/64e01862-f158-3d59-2c7f-73f72d50fee9.png)\n\n\nインポートの部分から```import android.app.AlertDialog```を見つけてきてそれを```import androidx.appcompat.app.AlertDialog```に書き換えれば直ります。\n\n```kotlin\n//import android.app.AlertDialog\nimport androidx.appcompat.app.AlertDialog\n```\n\nこれで大丈夫そうですね。\n![Screenshot_20190726-035018_Material_Test.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/f2a18f6c-513e-0537-e91c-356ca25407aa.png)\n\n今のところはこんな感じですね。\n\n# お疲れさまです\n最後に私のやりたかったFABの上にSnackbarを出すやり方を書いて終わろうと思います。\nやり方は普通にSnackbarを作り、```setAnchorView```のカッコの中にFABやSnackbarの下になるViewを入れてあげればおっけーです。\n例です。\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        snackbar_button.setOnClickListener {\n            Snackbar.make(findViewById(android.R.id.content), \"すなっくばー！\", Snackbar.LENGTH_LONG).show()\n        }\n\n        alert_dialog.setOnClickListener {\n            AlertDialog.Builder(this)\n                .setTitle(\"ボタンが\")\n                .setMessage(\"おかしくない！！！\")\n                .setPositiveButton(\"これでいい\") { dialogInterface: DialogInterface, i: Int ->\n\n                }\n                .setNegativeButton(\"だいじょうぶ\", null)\n                .show();\n        }\n\n        fab.setOnClickListener {\n            val snackbar = Snackbar.make(fab,\"ボタンの上からこんにちは\",Snackbar.LENGTH_LONG)\n            snackbar.anchorView = fab\n            snackbar.show()\n        }\n    }\n}\n```\n\nレイアウト\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.coordinatorlayout.widget.CoordinatorLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\">\n\n    <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:gravity=\"center\"\n            android:layout_height=\"match_parent\"\n            android:orientation=\"vertical\">\n\n        <Button\n                style=\"@style/Widget.MaterialComponents.Button.OutlinedButton\"\n                android:layout_width=\"wrap_content\"\n                android:text=\"snackbar\"\n                android:id=\"@+id/snackbar_button\"\n                android:layout_height=\"wrap_content\"/>\n\n        <Button\n                style=\"@style/Widget.MaterialComponents.Button.OutlinedButton\"\n                android:layout_width=\"wrap_content\"\n                android:text=\"AlertDialog\"\n                android:id=\"@+id/alert_dialog\"\n                android:layout_height=\"wrap_content\"/>\n\n    </LinearLayout>\n\n    <com.google.android.material.floatingactionbutton.FloatingActionButton\n            android:id=\"@+id/fab\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"bottom|end\"\n            android:layout_margin=\"16dp\"\n            app:srcCompat=\"@drawable/ic_laptop_windows_black_24dp\"/>\n\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n```\n\n実行するとこんな感じ\n![Screenshot_20190726-035632_Material_Test.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/58fff32c-b13c-7284-7f0c-38bb292ab384.png)\n\n\nお疲れさまでした！\nどうでもいいですが書いてる途中でサブ機の中古レッツノートくんがいきなりよくわからん画面になりましたが再起動したら直りました。\n",
                "source": "_posts/MaterialDesign.md",
                "raw": "---\ntitle: 【Android】 Material Components のバージョンを 1.0.0 から 1.1.0-alpha08 にして、Theme.MaterialComponentsと戦った話。\ntags:\n- Android\n- MaterialDesign\n- Kotlin\nauthor: takusan_23\nslide: false\n---\nこんばんは。\n虫（蛾？かどうかもわからん）が家に入ってきて怖いです。\n今回はタイトル通りMaterial Componentsのバージョンアップをして見る話です。\n\n# なぜアップデートしようとしたのか\nA. Snackbarの位置をFloating Action Buttonの上に表示させたかったから。\n[Snackbarsのガイドライン](https://material.io/design/components/snackbars.html#placement)の\nSnackbars and floating action buttons (FABs)\nでFABの上に表示させるのが正しいらしい。\nそれで真似ようと思ったのですが、古いのか```setAnchorView（どのViewの上に表示させるか？）```が見つからなかったのでアップデートしようというのが理由。\n\n# ところで最新バージョンはどこで知れるのか？\n\nこれ？\nhttps://github.com/material-components/material-components-android/releases\n\n作成日時では1.1.0-alpha08が最新ですので入れてみようと思います。\n最悪GitHubのちから？を借りて戻せばいいので挑戦です。\n\n# build.gradleを書き換える\n\n```gradle\n    //implementation 'com.google.android.material:material:1.0.0'\n    implementation 'com.google.android.material:material:1.1.0-alpha08'\n```\n##出会った問題\n\n###レイアウトのエラー\n下の方に書いてあった。\n\n```\nCaused by: java.lang.IllegalArgumentException: The style on this component requires your app theme to be Theme.MaterialComponents (or a descendant).\n```\n\n調べるとテーマがTheme.MaterialComponents系を使わないとだめだよ！ってことらしいです。\nこれを解決する方法は2つ。\n#### 解決策その１：レイアウト（xml）ファイルで親のレイアウトの中に```android:theme=\"@style/Theme.MaterialComponents\"```を書き足す。\nこんな感じに\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:theme=\"@style/Theme.MaterialComponents\"> <!--この行を付け足す。-->\n    <com.google.android.material.textfield.TextInputLayout\n        android:id=\"@+id/name_TextInputLayout\"\n        style=\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n        <EditText\n            android:id=\"@+id/name_editText\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:importantForAutofill=\"no\"\n            android:inputType=\"textMultiLine\"\n            android:singleLine=\"true\" />\n    </com.google.android.material.textfield.TextInputLayout>\n</LinearLayout>\n```\n\nこれで一応通るようになる。TextInputLayoutだけ使いたい！！！とかのときはTextInputLayoutの中に```android:theme=\"@style/Theme.MaterialComponents\"```を書き足せば大丈夫です。\n\n##### メリット\nかんたん。TextInputLayoutだけ使いたいなんかはこれでいい気がする。\n改善した方でもう満足した方はお疲れさまです。\n\n#### 解決策その２：styles.xmlを書き換える。\nstack overflowなんかではこっちが多いね。でも**この方法は結構きつい。**ちなみに私はこっちを使った。\nなぜならアプリの外観を結構変えることになる。\n書き換える場所はparentのところ。こうする```parent=\"Theme.MaterialComponents.Light.DarkActionBar\"```。\n以下例です。\n\n```xml\n    <!-- Base application theme. -->\n    <style name=\"AppTheme\" parent=\"Theme.MaterialComponents.Light.DarkActionBar\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimary</item>\n        <item name=\"colorAccent\">@color/colorPrimaryDark</item>\n    </style>\n```\n\nどうでしょう。結構変わったと思いますよ？\n\nで、ここからは**Theme.MaterialComponents**との戦いです。\n\n# Theme.MaterialComponents にして変わったところ。\n\n## 良かったところ\n\n- Snackbarの表示方法が変わった\n    - 下からすーっと表示？→ふわっと表示？する感じに（自分で見たほうがはやい）\n    - スペースができるようになった。（下に空間ができるようになった）\n\n![Screenshot_20190726-033304_Material_Test.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/c8961ea9-1823-0c05-938a-be07d81428de.png)\n\n\nほかにもあるかもだけど今回は時間無いので飛ばします。\n\n## 直す必要があったところ\n\n### BottonにBackgroundが設定されてしまう問題の解決方法\n\n参考\nhttps://stackoverflow.com/questions/52743190/when-use-theme-materialcomponents-light-noactionbar-style-set-button-background\n\nButtonはButtonでも```androidx.appcompat.widget.AppCompatButton```に変えてあげれば解決です。\n修正前\n\n```xml\n    <Button\n            android:layout_width=\"wrap_content\"\n            android:text=\"snackbar\"\n            android:id=\"@+id/snackbar_button\"\n            android:layout_height=\"wrap_content\"/>\n```\n\n修正後\n\n```xml\n    <androidx.appcompat.widget.AppCompatButton\n            android:layout_width=\"wrap_content\"\n            android:text=\"snackbar\"\n            android:id=\"@+id/snackbar_button\"\n            android:layout_height=\"wrap_content\"/>\n```\n\nちなみに私はBackgroundにボタンの枠ができる用に設定してたんですけど・・\n```style=\"@style/Widget.MaterialComponents.Button.OutlinedButton\"```\nを指定すれば枠がつくので私はstyleを書き足す形で対応しました。これだと押した時に波紋も出るのでいい感じ。\n\n![Screenshot_20190726-033945_Material_Test.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/1885d4f0-9209-6fa8-bb9c-7cf767fb838a.png)\n\n### AlertDialogのボタンがおかしくなる問題の解決方法\n参考にしました。\nhttps://stackoverflow.com/questions/52829954/materialcomponents-theme-alert-dialog-buttons\n\nこの様になってる場合は\n![Screenshot_20190726-034620_Material_Test.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/64e01862-f158-3d59-2c7f-73f72d50fee9.png)\n\n\nインポートの部分から```import android.app.AlertDialog```を見つけてきてそれを```import androidx.appcompat.app.AlertDialog```に書き換えれば直ります。\n\n```kotlin\n//import android.app.AlertDialog\nimport androidx.appcompat.app.AlertDialog\n```\n\nこれで大丈夫そうですね。\n![Screenshot_20190726-035018_Material_Test.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/f2a18f6c-513e-0537-e91c-356ca25407aa.png)\n\n今のところはこんな感じですね。\n\n# お疲れさまです\n最後に私のやりたかったFABの上にSnackbarを出すやり方を書いて終わろうと思います。\nやり方は普通にSnackbarを作り、```setAnchorView```のカッコの中にFABやSnackbarの下になるViewを入れてあげればおっけーです。\n例です。\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        snackbar_button.setOnClickListener {\n            Snackbar.make(findViewById(android.R.id.content), \"すなっくばー！\", Snackbar.LENGTH_LONG).show()\n        }\n\n        alert_dialog.setOnClickListener {\n            AlertDialog.Builder(this)\n                .setTitle(\"ボタンが\")\n                .setMessage(\"おかしくない！！！\")\n                .setPositiveButton(\"これでいい\") { dialogInterface: DialogInterface, i: Int ->\n\n                }\n                .setNegativeButton(\"だいじょうぶ\", null)\n                .show();\n        }\n\n        fab.setOnClickListener {\n            val snackbar = Snackbar.make(fab,\"ボタンの上からこんにちは\",Snackbar.LENGTH_LONG)\n            snackbar.anchorView = fab\n            snackbar.show()\n        }\n    }\n}\n```\n\nレイアウト\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.coordinatorlayout.widget.CoordinatorLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\">\n\n    <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:gravity=\"center\"\n            android:layout_height=\"match_parent\"\n            android:orientation=\"vertical\">\n\n        <Button\n                style=\"@style/Widget.MaterialComponents.Button.OutlinedButton\"\n                android:layout_width=\"wrap_content\"\n                android:text=\"snackbar\"\n                android:id=\"@+id/snackbar_button\"\n                android:layout_height=\"wrap_content\"/>\n\n        <Button\n                style=\"@style/Widget.MaterialComponents.Button.OutlinedButton\"\n                android:layout_width=\"wrap_content\"\n                android:text=\"AlertDialog\"\n                android:id=\"@+id/alert_dialog\"\n                android:layout_height=\"wrap_content\"/>\n\n    </LinearLayout>\n\n    <com.google.android.material.floatingactionbutton.FloatingActionButton\n            android:id=\"@+id/fab\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"bottom|end\"\n            android:layout_margin=\"16dp\"\n            app:srcCompat=\"@drawable/ic_laptop_windows_black_24dp\"/>\n\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n```\n\n実行するとこんな感じ\n![Screenshot_20190726-035632_Material_Test.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/58fff32c-b13c-7284-7f0c-38bb292ab384.png)\n\n\nお疲れさまでした！\nどうでもいいですが書いてる途中でサブ機の中古レッツノートくんがいきなりよくわからん画面になりましたが再起動したら直りました。\n",
                "slug": "MaterialDesign",
                "published": 1,
                "date": "2020-04-05T16:27:15.335Z",
                "updated": "2020-04-05T16:40:02.099Z",
                "comments": 1,
                "layout": "post",
                "photos": [],
                "link": "",
                "_id": "ck8r8f7c2000828vu3ecq1kys",
                "content": "<p>こんばんは。<br>虫（蛾？かどうかもわからん）が家に入ってきて怖いです。<br>今回はタイトル通りMaterial Componentsのバージョンアップをして見る話です。</p>\n<h1 id=\"なぜアップデートしようとしたのか\"><a href=\"#なぜアップデートしようとしたのか\" class=\"headerlink\" title=\"なぜアップデートしようとしたのか\"></a>なぜアップデートしようとしたのか</h1><p>A. Snackbarの位置をFloating Action Buttonの上に表示させたかったから。<br><a href=\"https://material.io/design/components/snackbars.html#placement\" target=\"_blank\" rel=\"noopener\">Snackbarsのガイドライン</a>の<br>Snackbars and floating action buttons (FABs)<br>でFABの上に表示させるのが正しいらしい。<br>それで真似ようと思ったのですが、古いのか<code>setAnchorView（どのViewの上に表示させるか？）</code>が見つからなかったのでアップデートしようというのが理由。</p>\n<h1 id=\"ところで最新バージョンはどこで知れるのか？\"><a href=\"#ところで最新バージョンはどこで知れるのか？\" class=\"headerlink\" title=\"ところで最新バージョンはどこで知れるのか？\"></a>ところで最新バージョンはどこで知れるのか？</h1><p>これ？<br><a href=\"https://github.com/material-components/material-components-android/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/material-components/material-components-android/releases</a></p>\n<p>作成日時では1.1.0-alpha08が最新ですので入れてみようと思います。<br>最悪GitHubのちから？を借りて戻せばいいので挑戦です。</p>\n<h1 id=\"build-gradleを書き換える\"><a href=\"#build-gradleを書き換える\" class=\"headerlink\" title=\"build.gradleを書き換える\"></a>build.gradleを書き換える</h1><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//implementation 'com.google.android.material:material:1.0.0'</span></span><br><span class=\"line\">implementation <span class=\"string\">'com.google.android.material:material:1.1.0-alpha08'</span></span><br></pre></td></tr></table></figure>\n<p>##出会った問題</p>\n<p>###レイアウトのエラー<br>下の方に書いてあった。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: java.lang.IllegalArgumentException: The style on this component requires your app theme to be Theme.MaterialComponents (or a descendant).</span><br></pre></td></tr></table></figure>\n\n<p>調べるとテーマがTheme.MaterialComponents系を使わないとだめだよ！ってことらしいです。<br>これを解決する方法は2つ。</p>\n<h4 id=\"解決策その１：レイアウト（xml）ファイルで親のレイアウトの中にandroid-theme-quot-style-Theme-MaterialComponents-quot-を書き足す。\"><a href=\"#解決策その１：レイアウト（xml）ファイルで親のレイアウトの中にandroid-theme-quot-style-Theme-MaterialComponents-quot-を書き足す。\" class=\"headerlink\" title=\"解決策その１：レイアウト（xml）ファイルで親のレイアウトの中にandroid:theme=&quot;@style/Theme.MaterialComponents&quot;を書き足す。\"></a>解決策その１：レイアウト（xml）ファイルで親のレイアウトの中に<code>android:theme=&quot;@style/Theme.MaterialComponents&quot;</code>を書き足す。</h4><p>こんな感じに</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/Theme.MaterialComponents\"</span>&gt;</span> <span class=\"comment\">&lt;!--この行を付け足す。--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.textfield.TextInputLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/name_TextInputLayout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/name_editText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:importantForAutofill</span>=<span class=\"string\">\"no\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:inputType</span>=<span class=\"string\">\"textMultiLine\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">com.google.android.material.textfield.TextInputLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>これで一応通るようになる。TextInputLayoutだけ使いたい！！！とかのときはTextInputLayoutの中に<code>android:theme=&quot;@style/Theme.MaterialComponents&quot;</code>を書き足せば大丈夫です。</p>\n<h5 id=\"メリット\"><a href=\"#メリット\" class=\"headerlink\" title=\"メリット\"></a>メリット</h5><p>かんたん。TextInputLayoutだけ使いたいなんかはこれでいい気がする。<br>改善した方でもう満足した方はお疲れさまです。</p>\n<h4 id=\"解決策その２：styles-xmlを書き換える。\"><a href=\"#解決策その２：styles-xmlを書き換える。\" class=\"headerlink\" title=\"解決策その２：styles.xmlを書き換える。\"></a>解決策その２：styles.xmlを書き換える。</h4><p>stack overflowなんかではこっちが多いね。でも<strong>この方法は結構きつい。</strong>ちなみに私はこっちを使った。<br>なぜならアプリの外観を結構変えることになる。<br>書き換える場所はparentのところ。こうする<code>parent=&quot;Theme.MaterialComponents.Light.DarkActionBar&quot;</code>。<br>以下例です。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Base application theme. --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.MaterialComponents.Light.DarkActionBar\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"comment\">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;</span>@color/colorPrimary<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;</span>@color/colorPrimary<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>@color/colorPrimaryDark<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>どうでしょう。結構変わったと思いますよ？</p>\n<p>で、ここからは<strong>Theme.MaterialComponents</strong>との戦いです。</p>\n<h1 id=\"Theme-MaterialComponents-にして変わったところ。\"><a href=\"#Theme-MaterialComponents-にして変わったところ。\" class=\"headerlink\" title=\"Theme.MaterialComponents にして変わったところ。\"></a>Theme.MaterialComponents にして変わったところ。</h1><h2 id=\"良かったところ\"><a href=\"#良かったところ\" class=\"headerlink\" title=\"良かったところ\"></a>良かったところ</h2><ul>\n<li>Snackbarの表示方法が変わった<ul>\n<li>下からすーっと表示？→ふわっと表示？する感じに（自分で見たほうがはやい）</li>\n<li>スペースができるようになった。（下に空間ができるようになった）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/c8961ea9-1823-0c05-938a-be07d81428de.png\" alt=\"Screenshot_20190726-033304_Material_Test.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20190726-033304_Material_Test.png</div>\n            </figure>\n\n\n<p>ほかにもあるかもだけど今回は時間無いので飛ばします。</p>\n<h2 id=\"直す必要があったところ\"><a href=\"#直す必要があったところ\" class=\"headerlink\" title=\"直す必要があったところ\"></a>直す必要があったところ</h2><h3 id=\"BottonにBackgroundが設定されてしまう問題の解決方法\"><a href=\"#BottonにBackgroundが設定されてしまう問題の解決方法\" class=\"headerlink\" title=\"BottonにBackgroundが設定されてしまう問題の解決方法\"></a>BottonにBackgroundが設定されてしまう問題の解決方法</h3><p>参考<br><a href=\"https://stackoverflow.com/questions/52743190/when-use-theme-materialcomponents-light-noactionbar-style-set-button-background\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/52743190/when-use-theme-materialcomponents-light-noactionbar-style-set-button-background</a></p>\n<p>ButtonはButtonでも<code>androidx.appcompat.widget.AppCompatButton</code>に変えてあげれば解決です。<br>修正前</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"snackbar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/snackbar_button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修正後</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.appcompat.widget.AppCompatButton</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"snackbar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/snackbar_button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>ちなみに私はBackgroundにボタンの枠ができる用に設定してたんですけど・・</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">を指定すれば枠がつくので私はstyleを書き足す形で対応しました。これだと押した時に波紋も出るのでいい感じ。</span><br><span class=\"line\"></span><br><span class=\"line\">![Screenshot_20190726-033945_Material_Test.png](https:&#x2F;&#x2F;qiita-image-store.s3.ap-northeast-1.amazonaws.com&#x2F;0&#x2F;409918&#x2F;1885d4f0-9209-6fa8-bb9c-7cf767fb838a.png)</span><br><span class=\"line\"></span><br><span class=\"line\">### AlertDialogのボタンがおかしくなる問題の解決方法</span><br><span class=\"line\">参考にしました。</span><br><span class=\"line\">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;52829954&#x2F;materialcomponents-theme-alert-dialog-buttons</span><br><span class=\"line\"></span><br><span class=\"line\">この様になってる場合は</span><br><span class=\"line\">![Screenshot_20190726-034620_Material_Test.png](https:&#x2F;&#x2F;qiita-image-store.s3.ap-northeast-1.amazonaws.com&#x2F;0&#x2F;409918&#x2F;64e01862-f158-3d59-2c7f-73f72d50fee9.png)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">インポートの部分から&#96;&#96;&#96;import android.app.AlertDialog&#96;&#96;&#96;を見つけてきてそれを&#96;&#96;&#96;import androidx.appcompat.app.AlertDialog&#96;&#96;&#96;に書き換えれば直ります。</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;kotlin</span><br><span class=\"line\">&#x2F;&#x2F;import android.app.AlertDialog</span><br><span class=\"line\">import androidx.appcompat.app.AlertDialog</span><br></pre></td></tr></table></figure>\n\n<p>これで大丈夫そうですね。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/f2a18f6c-513e-0537-e91c-356ca25407aa.png\" alt=\"Screenshot_20190726-035018_Material_Test.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20190726-035018_Material_Test.png</div>\n            </figure>\n\n<p>今のところはこんな感じですね。</p>\n<h1 id=\"お疲れさまです\"><a href=\"#お疲れさまです\" class=\"headerlink\" title=\"お疲れさまです\"></a>お疲れさまです</h1><p>最後に私のやりたかったFABの上にSnackbarを出すやり方を書いて終わろうと思います。<br>やり方は普通にSnackbarを作り、<code>setAnchorView</code>のカッコの中にFABやSnackbarの下になるViewを入れてあげればおっけーです。<br>例です。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\"></span><br><span class=\"line\">        snackbar_button.setOnClickListener &#123;</span><br><span class=\"line\">            Snackbar.make(findViewById(android.R.id.content), <span class=\"string\">\"すなっくばー！\"</span>, Snackbar.LENGTH_LONG).show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        alert_dialog.setOnClickListener &#123;</span><br><span class=\"line\">            AlertDialog.Builder(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">                .setTitle(<span class=\"string\">\"ボタンが\"</span>)</span><br><span class=\"line\">                .setMessage(<span class=\"string\">\"おかしくない！！！\"</span>)</span><br><span class=\"line\">                .setPositiveButton(<span class=\"string\">\"これでいい\"</span>) &#123; dialogInterface: DialogInterface, i: <span class=\"built_in\">Int</span> -&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                .setNegativeButton(<span class=\"string\">\"だいじょうぶ\"</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">                .show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        fab.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> snackbar = Snackbar.make(fab,<span class=\"string\">\"ボタンの上からこんにちは\"</span>,Snackbar.LENGTH_LONG)</span><br><span class=\"line\">            snackbar.anchorView = fab</span><br><span class=\"line\">            snackbar.show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>レイアウト</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.coordinatorlayout.widget.CoordinatorLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:context</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Widget.MaterialComponents.Button.OutlinedButton\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"snackbar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/snackbar_button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Widget.MaterialComponents.Button.OutlinedButton\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"AlertDialog\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/alert_dialog\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.floatingactionbutton.FloatingActionButton</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fab\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"bottom|end\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"16dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:srcCompat</span>=<span class=\"string\">\"@drawable/ic_laptop_windows_black_24dp\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>実行するとこんな感じ</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/58fff32c-b13c-7284-7f0c-38bb292ab384.png\" alt=\"Screenshot_20190726-035632_Material_Test.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20190726-035632_Material_Test.png</div>\n            </figure>\n\n\n<p>お疲れさまでした！<br>どうでもいいですが書いてる途中でサブ機の中古レッツノートくんがいきなりよくわからん画面になりましたが再起動したら直りました。</p>\n",
                "site": {
                    "data": {}
                },
                "excerpt": "",
                "more": "<p>こんばんは。<br>虫（蛾？かどうかもわからん）が家に入ってきて怖いです。<br>今回はタイトル通りMaterial Componentsのバージョンアップをして見る話です。</p>\n<h1 id=\"なぜアップデートしようとしたのか\"><a href=\"#なぜアップデートしようとしたのか\" class=\"headerlink\" title=\"なぜアップデートしようとしたのか\"></a>なぜアップデートしようとしたのか</h1><p>A. Snackbarの位置をFloating Action Buttonの上に表示させたかったから。<br><a href=\"https://material.io/design/components/snackbars.html#placement\" target=\"_blank\" rel=\"noopener\">Snackbarsのガイドライン</a>の<br>Snackbars and floating action buttons (FABs)<br>でFABの上に表示させるのが正しいらしい。<br>それで真似ようと思ったのですが、古いのか<code>setAnchorView（どのViewの上に表示させるか？）</code>が見つからなかったのでアップデートしようというのが理由。</p>\n<h1 id=\"ところで最新バージョンはどこで知れるのか？\"><a href=\"#ところで最新バージョンはどこで知れるのか？\" class=\"headerlink\" title=\"ところで最新バージョンはどこで知れるのか？\"></a>ところで最新バージョンはどこで知れるのか？</h1><p>これ？<br><a href=\"https://github.com/material-components/material-components-android/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/material-components/material-components-android/releases</a></p>\n<p>作成日時では1.1.0-alpha08が最新ですので入れてみようと思います。<br>最悪GitHubのちから？を借りて戻せばいいので挑戦です。</p>\n<h1 id=\"build-gradleを書き換える\"><a href=\"#build-gradleを書き換える\" class=\"headerlink\" title=\"build.gradleを書き換える\"></a>build.gradleを書き換える</h1><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//implementation 'com.google.android.material:material:1.0.0'</span></span><br><span class=\"line\">implementation <span class=\"string\">'com.google.android.material:material:1.1.0-alpha08'</span></span><br></pre></td></tr></table></figure>\n<p>##出会った問題</p>\n<p>###レイアウトのエラー<br>下の方に書いてあった。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: java.lang.IllegalArgumentException: The style on this component requires your app theme to be Theme.MaterialComponents (or a descendant).</span><br></pre></td></tr></table></figure>\n\n<p>調べるとテーマがTheme.MaterialComponents系を使わないとだめだよ！ってことらしいです。<br>これを解決する方法は2つ。</p>\n<h4 id=\"解決策その１：レイアウト（xml）ファイルで親のレイアウトの中にandroid-theme-quot-style-Theme-MaterialComponents-quot-を書き足す。\"><a href=\"#解決策その１：レイアウト（xml）ファイルで親のレイアウトの中にandroid-theme-quot-style-Theme-MaterialComponents-quot-を書き足す。\" class=\"headerlink\" title=\"解決策その１：レイアウト（xml）ファイルで親のレイアウトの中にandroid:theme=&quot;@style/Theme.MaterialComponents&quot;を書き足す。\"></a>解決策その１：レイアウト（xml）ファイルで親のレイアウトの中に<code>android:theme=&quot;@style/Theme.MaterialComponents&quot;</code>を書き足す。</h4><p>こんな感じに</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/Theme.MaterialComponents\"</span>&gt;</span> <span class=\"comment\">&lt;!--この行を付け足す。--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.textfield.TextInputLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/name_TextInputLayout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/name_editText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:importantForAutofill</span>=<span class=\"string\">\"no\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:inputType</span>=<span class=\"string\">\"textMultiLine\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">com.google.android.material.textfield.TextInputLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>これで一応通るようになる。TextInputLayoutだけ使いたい！！！とかのときはTextInputLayoutの中に<code>android:theme=&quot;@style/Theme.MaterialComponents&quot;</code>を書き足せば大丈夫です。</p>\n<h5 id=\"メリット\"><a href=\"#メリット\" class=\"headerlink\" title=\"メリット\"></a>メリット</h5><p>かんたん。TextInputLayoutだけ使いたいなんかはこれでいい気がする。<br>改善した方でもう満足した方はお疲れさまです。</p>\n<h4 id=\"解決策その２：styles-xmlを書き換える。\"><a href=\"#解決策その２：styles-xmlを書き換える。\" class=\"headerlink\" title=\"解決策その２：styles.xmlを書き換える。\"></a>解決策その２：styles.xmlを書き換える。</h4><p>stack overflowなんかではこっちが多いね。でも<strong>この方法は結構きつい。</strong>ちなみに私はこっちを使った。<br>なぜならアプリの外観を結構変えることになる。<br>書き換える場所はparentのところ。こうする<code>parent=&quot;Theme.MaterialComponents.Light.DarkActionBar&quot;</code>。<br>以下例です。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Base application theme. --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.MaterialComponents.Light.DarkActionBar\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"comment\">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;</span>@color/colorPrimary<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;</span>@color/colorPrimary<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>@color/colorPrimaryDark<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>どうでしょう。結構変わったと思いますよ？</p>\n<p>で、ここからは<strong>Theme.MaterialComponents</strong>との戦いです。</p>\n<h1 id=\"Theme-MaterialComponents-にして変わったところ。\"><a href=\"#Theme-MaterialComponents-にして変わったところ。\" class=\"headerlink\" title=\"Theme.MaterialComponents にして変わったところ。\"></a>Theme.MaterialComponents にして変わったところ。</h1><h2 id=\"良かったところ\"><a href=\"#良かったところ\" class=\"headerlink\" title=\"良かったところ\"></a>良かったところ</h2><ul>\n<li>Snackbarの表示方法が変わった<ul>\n<li>下からすーっと表示？→ふわっと表示？する感じに（自分で見たほうがはやい）</li>\n<li>スペースができるようになった。（下に空間ができるようになった）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/c8961ea9-1823-0c05-938a-be07d81428de.png\" alt=\"Screenshot_20190726-033304_Material_Test.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20190726-033304_Material_Test.png</div>\n            </figure>\n\n\n<p>ほかにもあるかもだけど今回は時間無いので飛ばします。</p>\n<h2 id=\"直す必要があったところ\"><a href=\"#直す必要があったところ\" class=\"headerlink\" title=\"直す必要があったところ\"></a>直す必要があったところ</h2><h3 id=\"BottonにBackgroundが設定されてしまう問題の解決方法\"><a href=\"#BottonにBackgroundが設定されてしまう問題の解決方法\" class=\"headerlink\" title=\"BottonにBackgroundが設定されてしまう問題の解決方法\"></a>BottonにBackgroundが設定されてしまう問題の解決方法</h3><p>参考<br><a href=\"https://stackoverflow.com/questions/52743190/when-use-theme-materialcomponents-light-noactionbar-style-set-button-background\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/52743190/when-use-theme-materialcomponents-light-noactionbar-style-set-button-background</a></p>\n<p>ButtonはButtonでも<code>androidx.appcompat.widget.AppCompatButton</code>に変えてあげれば解決です。<br>修正前</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"snackbar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/snackbar_button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修正後</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.appcompat.widget.AppCompatButton</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"snackbar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/snackbar_button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>ちなみに私はBackgroundにボタンの枠ができる用に設定してたんですけど・・</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">を指定すれば枠がつくので私はstyleを書き足す形で対応しました。これだと押した時に波紋も出るのでいい感じ。</span><br><span class=\"line\"></span><br><span class=\"line\">![Screenshot_20190726-033945_Material_Test.png](https:&#x2F;&#x2F;qiita-image-store.s3.ap-northeast-1.amazonaws.com&#x2F;0&#x2F;409918&#x2F;1885d4f0-9209-6fa8-bb9c-7cf767fb838a.png)</span><br><span class=\"line\"></span><br><span class=\"line\">### AlertDialogのボタンがおかしくなる問題の解決方法</span><br><span class=\"line\">参考にしました。</span><br><span class=\"line\">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;52829954&#x2F;materialcomponents-theme-alert-dialog-buttons</span><br><span class=\"line\"></span><br><span class=\"line\">この様になってる場合は</span><br><span class=\"line\">![Screenshot_20190726-034620_Material_Test.png](https:&#x2F;&#x2F;qiita-image-store.s3.ap-northeast-1.amazonaws.com&#x2F;0&#x2F;409918&#x2F;64e01862-f158-3d59-2c7f-73f72d50fee9.png)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">インポートの部分から&#96;&#96;&#96;import android.app.AlertDialog&#96;&#96;&#96;を見つけてきてそれを&#96;&#96;&#96;import androidx.appcompat.app.AlertDialog&#96;&#96;&#96;に書き換えれば直ります。</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;kotlin</span><br><span class=\"line\">&#x2F;&#x2F;import android.app.AlertDialog</span><br><span class=\"line\">import androidx.appcompat.app.AlertDialog</span><br></pre></td></tr></table></figure>\n\n<p>これで大丈夫そうですね。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/f2a18f6c-513e-0537-e91c-356ca25407aa.png\" alt=\"Screenshot_20190726-035018_Material_Test.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20190726-035018_Material_Test.png</div>\n            </figure>\n\n<p>今のところはこんな感じですね。</p>\n<h1 id=\"お疲れさまです\"><a href=\"#お疲れさまです\" class=\"headerlink\" title=\"お疲れさまです\"></a>お疲れさまです</h1><p>最後に私のやりたかったFABの上にSnackbarを出すやり方を書いて終わろうと思います。<br>やり方は普通にSnackbarを作り、<code>setAnchorView</code>のカッコの中にFABやSnackbarの下になるViewを入れてあげればおっけーです。<br>例です。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\"></span><br><span class=\"line\">        snackbar_button.setOnClickListener &#123;</span><br><span class=\"line\">            Snackbar.make(findViewById(android.R.id.content), <span class=\"string\">\"すなっくばー！\"</span>, Snackbar.LENGTH_LONG).show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        alert_dialog.setOnClickListener &#123;</span><br><span class=\"line\">            AlertDialog.Builder(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">                .setTitle(<span class=\"string\">\"ボタンが\"</span>)</span><br><span class=\"line\">                .setMessage(<span class=\"string\">\"おかしくない！！！\"</span>)</span><br><span class=\"line\">                .setPositiveButton(<span class=\"string\">\"これでいい\"</span>) &#123; dialogInterface: DialogInterface, i: <span class=\"built_in\">Int</span> -&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                .setNegativeButton(<span class=\"string\">\"だいじょうぶ\"</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\">                .show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        fab.setOnClickListener &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> snackbar = Snackbar.make(fab,<span class=\"string\">\"ボタンの上からこんにちは\"</span>,Snackbar.LENGTH_LONG)</span><br><span class=\"line\">            snackbar.anchorView = fab</span><br><span class=\"line\">            snackbar.show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>レイアウト</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.coordinatorlayout.widget.CoordinatorLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:context</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Widget.MaterialComponents.Button.OutlinedButton\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"snackbar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/snackbar_button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">style</span>=<span class=\"string\">\"@style/Widget.MaterialComponents.Button.OutlinedButton\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"AlertDialog\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/alert_dialog\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.floatingactionbutton.FloatingActionButton</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fab\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"bottom|end\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"16dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:srcCompat</span>=<span class=\"string\">\"@drawable/ic_laptop_windows_black_24dp\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>実行するとこんな感じ</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/58fff32c-b13c-7284-7f0c-38bb292ab384.png\" alt=\"Screenshot_20190726-035632_Material_Test.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20190726-035632_Material_Test.png</div>\n            </figure>\n\n\n<p>お疲れさまでした！<br>どうでもいいですが書いてる途中でサブ機の中古レッツノートくんがいきなりよくわからん画面になりましたが再起動したら直りました。</p>\n"
            },
            {
                "title": "【Android / MediaProjection / Kotlin】Androidで画面録画をする",
                "author": "takusan_23",
                "slide": false,
                "_content": "どうもこんばんは。テスト期間つらい。\n今回は画面を録画できるアプリを作ってみようと思います。\n\n## 画面録画の歴史？\nここではRoot化で利用できる画面録画はなしの方向で。Root取れば内部音声が取れるって聞いたことある。\nあと外部出力端子を利用して録画する話もなしの方向で。\n私が知ってる限りでは\n\nXperia Z3 / Z3 Compact でスクリーンレコーダーが搭載された（4.4）。\n（ですがいつの間にかスクリーンレコーダー機能はなくなったそうです。（Xperia 1で復活したらしい））\n（あとスモールアプリとかどこ行ったの？）\n↓\n5.0で「MediaProjection API」が追加されてサードパーティアプリでも録画ができるようになった。\nGoogle Play ゲームで画面録画機能が追加されたりした。\nしかしこの手の画面録画アプリは音声をマイクから撮っているので端末の音以外が入ってしまう。\n↓\n（Samsungとかが内部音声が取れるアプリを独自で追加しているらしい？）\n↓\n10.0で端末の内部音声を取れる「AudioPlaybackCapture API」が追加された。\n今回は触れません。というか実装方法がわからなかった。残念。😥\n\n## 端末紹介\n|                   |            |\n|-------------------|------------|\n| 端末              | Pixel 3 XL |\n| Androidバージョン | 10         |\n| compileSdkVersion | 29         |\n\n## 作るもの\n画面録画してmp4で保存する。\n音声はマイクから取ることにする。\n\n\n# 実装\n本題です。ここまで長かったね。\n## Android 10でも動くように\n保存先を対象範囲別ストレージにする。\nServiceにAndroid 10から追加された属性「foregroundServiceType」を書き足す。\n## 流れ\n\n権限があるか確認する（マイクの録音）\n↓\n画面録画していいか聞く。\n↓\n許可が得られたらServiceを起動する。\n↓\nServiceの中で画面録画を行う。\n\nServiceが終了すると同時に録画も終了させる。\n\n## レイアウト\nActivityはMainActivityだけです。\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:gravity=\"center\"\n    android:orientation=\"vertical\"\n    tools:context=\".MainActivity\">\n\n\n    <Button\n        android:id=\"@+id/rec_button\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"録画\" />\n\n    <Button\n        android:id=\"@+id/stop_button\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"停止\" />\n</LinearLayout>\n```\n\n## Manifest\n必要な権限は\n\n| 権限               | 説明                 |\n|--------------------|----------------------|\n| FOREGROUND_SERVICE | サービスの実行に必要 |\n| RECORD_AUDIO       | マイクを使うのに必要 |\n\nこの段階では「ScreenRecordService」は作成してないので赤くなるけど後で作るのでおｋ。\n**android:foregroundServiceType=\"mediaProjection\"**を忘れずに\n\n```xml:AndroidManifest.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"io.github.takusan23.screenrecordsample\">\n\n    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\"/>\n    <uses-permission android:name=\"android.permission.RECORD_AUDIO\"/>\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n        <service android:name=\".ScreenRecordService\" android:foregroundServiceType=\"mediaProjection\"/>\n    </application>\n\n</manifest>\n```\n\n## 権限をもらう\n録画のボタンを押したらまずマイクへのアクセス権があるか確認します。\nない場合は権限をリクエストするダイアログを表示させます。\n\n権限がある場合は録画を開始するダイアログを表示させます。\n\n```kotlin:MainActivity.kt\n    //リクエストの結果\n    val code = 512\n    val permissionCode = 810\n    lateinit var projectionManager: MediaProjectionManager\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        projectionManager =\n            getSystemService(Context.MEDIA_PROJECTION_SERVICE) as MediaProjectionManager\n\n        //画面録画をしてもいいか聞く\n        rec_button.setOnClickListener {\n            //その前にマイクへアクセスしていいか尋ねる\n            if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO)\n                != PackageManager.PERMISSION_GRANTED\n            ) {\n                requestPermissions(arrayOf(Manifest.permission.RECORD_AUDIO), permissionCode)\n            } else {\n                //マイクの権限があるので画面録画リクエスト\n                //ダイアログを出す\n                startActivityForResult(projectionManager.createScreenCaptureIntent(), code)\n            }\n        }\n        //停止ボタンで止められるように\n        stop_button.setOnClickListener {\n            val intent = Intent(this, ScreenRecordService::class.java)\n            stopService(intent)\n        }\n    }\n\n    //権限の結果受け取る\n    override fun onRequestPermissionsResult(\n        requestCode: Int,\n        permissions: Array<out String>,\n        grantResults: IntArray\n    ) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        if (requestCode == permissionCode) {\n            //マイクへアクセス権げっと\n            Toast.makeText(this, \"権限が付与されました。\", Toast.LENGTH_SHORT).show()\n        }\n    }\n```\n\n## 画面録画をするServiceを起動させる\nところでAndroidの画面録画をするコードとかをいろいろ参考にしたわけですが、Android 10で追加された属性「foregroundServiceType」のせいかActivityでは画面録画が出来ないっぽいんですよね。\nなので仕方なくServiceで。まあServiceで実装したほうが広く使えそうだもんね。\n\nMainActivity.ktに「onActivityResult」を追加します。\n\n```kotlin:MainActivity.kt\n    //画面録画の合否を受け取る\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        //成功＋結果が画面録画の物か\n        if (resultCode == Activity.RESULT_OK && requestCode == code) {\n            //Service起動\n            //Manifestに「android:foregroundServiceType=\"mediaProjection\"」を付け足しておく\n            val intent = Intent(this, ScreenRecordService::class.java)\n            intent.putExtra(\"code\", resultCode) //必要なのは結果。startActivityForResultのrequestCodeではない。\n            intent.putExtra(\"data\", data)\n            //画面の大きさも一緒に入れる\n            val metrics = resources.displayMetrics;\n            intent.putExtra(\"height\", metrics.heightPixels)\n            intent.putExtra(\"width\", metrics.widthPixels)\n            intent.putExtra(\"dpi\", metrics.densityDpi)\n\n            startForegroundService(intent)\n        }\n    }\n```\n## Service作成\nそれから「ScreenRecordService.kt」を作成して下さい。\n作成したら以下のように。\nsetSmallIconが赤くなると思います。これはベクターアセットから追加したためです。\nなので画像のようにして見つけて下さい。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/f504e4f1-57ae-e459-8f51-eb96af80bfea.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/ebe8ef29-bd69-3afc-6aec-100a92f9322f.png)\n\n```kotlin:ScreenRecordService.kt\nclass ScreenRecordService : Service() {\n    //Intentに詰めたデータを受け取る\n    var data: Intent? = null\n    var code = Activity.RESULT_OK\n\n    //画面録画で使う\n    lateinit var mediaRecorder: MediaRecorder\n    lateinit var projectionManager: MediaProjectionManager\n    lateinit var projection: MediaProjection\n    lateinit var virtualDisplay: VirtualDisplay\n\n    //画面の大きさ\n    //Pixel 3 XLだとなんかおかしくなる\n    var height = 2800\n    var width = 1400\n    var dpi = 1000\n\n\n    override fun onBind(p0: Intent?): IBinder? {\n        return null\n    }\n\n    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n\n        //データ受け取る\n        data = intent?.getParcelableExtra(\"data\")\n        code = intent?.getIntExtra(\"code\", Activity.RESULT_OK) ?: Activity.RESULT_OK\n\n        //画面の大きさ\n        //   height = intent?.getIntExtra(\"height\", 1000) ?: 1000\n        //   width = intent?.getIntExtra(\"width\", 1000) ?: 1000\n        dpi = intent?.getIntExtra(\"dpi\", 1000) ?: 1000\n\n        //通知を出す。\n        val notificationManager =\n            getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        //通知チャンネル\n        val channelID = \"rec_notify\"\n        //通知チャンネルが存在しないときは登録する\n        if (notificationManager.getNotificationChannel(channelID) == null) {\n            val channel =\n                NotificationChannel(channelID, \"録画サービス起動中通知\", NotificationManager.IMPORTANCE_HIGH)\n            notificationManager.createNotificationChannel(channel)\n        }\n        //通知作成\n        val notification = Notification.Builder(applicationContext, channelID)\n            .setContentText(\"録画中です。\")\n            .setContentTitle(\"画面録画\")\n            .setSmallIcon(R.drawable.ic_cast_black_24dp)    //アイコンはベクターアセットから\n            .build()\n\n        startForeground(1, notification)\n\n        //録画開始\n        startRec()\n\n        return START_NOT_STICKY\n    }\n\n    //Service終了と同時に録画終了\n    override fun onDestroy() {\n        super.onDestroy()\n        stopRec()\n    }\n\n}\n```\n\n## 画面録画\nScreenRecordService.ktに付け足してください。\nここはよくわからんのであまり言えませんが、「setVideoEncodingBitRate」を高くすれば画質アップ＆ファイルサイズアップです。\nファイル名は数字.mp4になります。```${System.currentTimeMillis()}.mp4```の部分がファイル名になっているので変えたい場合はどうぞ。\n保存先は**Android/data/io.github.takusan23.screenrecordsample/file**の中です。\n\n\n```kotlin:ScreenRecordService.kt\n    //録画開始\n    fun startRec() {\n        if (data != null) {\n            projectionManager =\n                getSystemService(Context.MEDIA_PROJECTION_SERVICE) as MediaProjectionManager\n            //codeはActivity.RESULT_OKとかが入る。\n            projection =\n                projectionManager.getMediaProjection(code, data!!)\n\n            mediaRecorder = MediaRecorder()\n            mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC)\n            mediaRecorder.setVideoSource(MediaRecorder.VideoSource.SURFACE)\n            mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4)\n            mediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264)\n            mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB)\n            mediaRecorder.setVideoEncodingBitRate(1080 * 10000) //1080は512ぐらいにしといたほうが小さくできる\n            mediaRecorder.setVideoFrameRate(30)\n            mediaRecorder.setVideoSize(width, height)\n            mediaRecorder.setAudioSamplingRate(44100)\n            mediaRecorder.setOutputFile(getFilePath())\n            mediaRecorder.prepare()\n\n            virtualDisplay = projection.createVirtualDisplay(\n                \"recode\",\n                width,\n                height,\n                dpi,\n                DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR,\n                mediaRecorder.surface,\n                null,\n                null\n            )\n\n            //開始\n            mediaRecorder.start()\n        }\n    }\n\n    //録画止める\n    fun stopRec() {\n        mediaRecorder.stop()\n        mediaRecorder.release()\n        virtualDisplay.release()\n        projection.stop()\n    }\n\n    //保存先取得。今回は対象範囲別ストレージに保存する\n    fun getFilePath(): File {\n        //ScopedStorageで作られるサンドボックスへのぱす\n        val scopedStoragePath = getExternalFilesDir(null)\n        //写真ファイル作成\n        val file = File(\"${scopedStoragePath?.path}/${System.currentTimeMillis()}.mp4\")\n        return file\n    }\n```\n\n## 完成！\n開始ボタン押した。\n![Screenshot_20191010-200940.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/8942a6c6-0950-3c74-128a-a0fed4934bab.png)\n\n「今すぐ開始」を押した。\nステータスバーのバイブアイコンの隣にキャスト中のアイコンが出てますね。\n![Screenshot_20191010-200946.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/174fed18-0694-8111-6287-94f26c3bfd7b.png)\n\n停止ボタンを押して作成した動画ファイルを見た\n![Screenshot_20191010-201017.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/62653173-7209-4a74-9ff6-63f8eb695d83.png)\n\n## Pixel 3 XL で遭遇した問題\n### 動画の大きさがおかしい問題\nよくわからないので以下のように書き換えておきました。\n本来はこの値を固定するべきでは無いと思いますがPixel 3 XLでしか動かさないので別にいいや。\n\n```kotlin:ScreenRecordService.kt\n    //画面の大きさ\n    //Pixel 3 XLだとなんかおかしくなる\n    var height = 2800\n    var width = 1400\n    var dpi = 1000\n\n   //以下省略\n\n    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n\n        //データ受け取る\n        data = intent?.getParcelableExtra(\"data\")\n        code = intent?.getIntExtra(\"code\", Activity.RESULT_OK) ?: Activity.RESULT_OK\n\n        //画面の大きさ\n        //   height = intent?.getIntExtra(\"height\", 1000) ?: 1000\n        //   width = intent?.getIntExtra(\"width\", 1000) ?: 1000\n        dpi = intent?.getIntExtra(\"dpi\", 1000) ?: 1000\n\n       //以下省略\n```\n\n## 内部音声は取れないの？\nAndroid 10から「AudioPlaybackCapture API」が追加されましたが\n内部音声はMediaRecorderではなくAudioRecordを使わないと録音できない。残念。\nAudioRecordの保存とかどうやるんだろう。\nきっとそのうち出てくると思うのでしばらく待つことにする。\n\n## 終わりに\nRootなしで内部音声が取れるのは期待ですね。\nこの記事を書いてるときに思い出しましたが、Android Q Beta 3ぐらいのときAndroidに標準で画面録画が搭載されそうになった（開発者オプションの機能フラグで有効にしないといけない）。\nBeta版の段階では電源ボタン長押しで表示されるスクリーンショットを取るボタンを長押しすれば利用できたそう。（残念ながら私の環境では落ちて使えなかった。）\nけど正式版では実装されなかった。ぜひ標準で欲しい機能なんだけどなあ。\n\nそれと\nPixel 4　と　docomo の発表会が楽しみですね！\n\n書きたいことは多分全部書いたので、\n以上です。おつ。８８８８８８８８８８８８８８８８８８\n\n## GitHub\nhttps://github.com/takusan23/ScreenRecordSample\n試してみたい方どうぞ～\n",
                "source": "_posts/MediaProjection.md",
                "raw": "---\ntitle: 【Android / MediaProjection / Kotlin】Androidで画面録画をする\ntags:\n- Android\n- MediaProjection\n- 画面録画\n- AndroidQ\n- Kotlin\nauthor: takusan_23\nslide: false\n---\nどうもこんばんは。テスト期間つらい。\n今回は画面を録画できるアプリを作ってみようと思います。\n\n## 画面録画の歴史？\nここではRoot化で利用できる画面録画はなしの方向で。Root取れば内部音声が取れるって聞いたことある。\nあと外部出力端子を利用して録画する話もなしの方向で。\n私が知ってる限りでは\n\nXperia Z3 / Z3 Compact でスクリーンレコーダーが搭載された（4.4）。\n（ですがいつの間にかスクリーンレコーダー機能はなくなったそうです。（Xperia 1で復活したらしい））\n（あとスモールアプリとかどこ行ったの？）\n↓\n5.0で「MediaProjection API」が追加されてサードパーティアプリでも録画ができるようになった。\nGoogle Play ゲームで画面録画機能が追加されたりした。\nしかしこの手の画面録画アプリは音声をマイクから撮っているので端末の音以外が入ってしまう。\n↓\n（Samsungとかが内部音声が取れるアプリを独自で追加しているらしい？）\n↓\n10.0で端末の内部音声を取れる「AudioPlaybackCapture API」が追加された。\n今回は触れません。というか実装方法がわからなかった。残念。😥\n\n## 端末紹介\n|                   |            |\n|-------------------|------------|\n| 端末              | Pixel 3 XL |\n| Androidバージョン | 10         |\n| compileSdkVersion | 29         |\n\n## 作るもの\n画面録画してmp4で保存する。\n音声はマイクから取ることにする。\n\n\n# 実装\n本題です。ここまで長かったね。\n## Android 10でも動くように\n保存先を対象範囲別ストレージにする。\nServiceにAndroid 10から追加された属性「foregroundServiceType」を書き足す。\n## 流れ\n\n権限があるか確認する（マイクの録音）\n↓\n画面録画していいか聞く。\n↓\n許可が得られたらServiceを起動する。\n↓\nServiceの中で画面録画を行う。\n\nServiceが終了すると同時に録画も終了させる。\n\n## レイアウト\nActivityはMainActivityだけです。\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:gravity=\"center\"\n    android:orientation=\"vertical\"\n    tools:context=\".MainActivity\">\n\n\n    <Button\n        android:id=\"@+id/rec_button\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"録画\" />\n\n    <Button\n        android:id=\"@+id/stop_button\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"停止\" />\n</LinearLayout>\n```\n\n## Manifest\n必要な権限は\n\n| 権限               | 説明                 |\n|--------------------|----------------------|\n| FOREGROUND_SERVICE | サービスの実行に必要 |\n| RECORD_AUDIO       | マイクを使うのに必要 |\n\nこの段階では「ScreenRecordService」は作成してないので赤くなるけど後で作るのでおｋ。\n**android:foregroundServiceType=\"mediaProjection\"**を忘れずに\n\n```xml:AndroidManifest.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"io.github.takusan23.screenrecordsample\">\n\n    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\"/>\n    <uses-permission android:name=\"android.permission.RECORD_AUDIO\"/>\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n        <service android:name=\".ScreenRecordService\" android:foregroundServiceType=\"mediaProjection\"/>\n    </application>\n\n</manifest>\n```\n\n## 権限をもらう\n録画のボタンを押したらまずマイクへのアクセス権があるか確認します。\nない場合は権限をリクエストするダイアログを表示させます。\n\n権限がある場合は録画を開始するダイアログを表示させます。\n\n```kotlin:MainActivity.kt\n    //リクエストの結果\n    val code = 512\n    val permissionCode = 810\n    lateinit var projectionManager: MediaProjectionManager\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        projectionManager =\n            getSystemService(Context.MEDIA_PROJECTION_SERVICE) as MediaProjectionManager\n\n        //画面録画をしてもいいか聞く\n        rec_button.setOnClickListener {\n            //その前にマイクへアクセスしていいか尋ねる\n            if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO)\n                != PackageManager.PERMISSION_GRANTED\n            ) {\n                requestPermissions(arrayOf(Manifest.permission.RECORD_AUDIO), permissionCode)\n            } else {\n                //マイクの権限があるので画面録画リクエスト\n                //ダイアログを出す\n                startActivityForResult(projectionManager.createScreenCaptureIntent(), code)\n            }\n        }\n        //停止ボタンで止められるように\n        stop_button.setOnClickListener {\n            val intent = Intent(this, ScreenRecordService::class.java)\n            stopService(intent)\n        }\n    }\n\n    //権限の結果受け取る\n    override fun onRequestPermissionsResult(\n        requestCode: Int,\n        permissions: Array<out String>,\n        grantResults: IntArray\n    ) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        if (requestCode == permissionCode) {\n            //マイクへアクセス権げっと\n            Toast.makeText(this, \"権限が付与されました。\", Toast.LENGTH_SHORT).show()\n        }\n    }\n```\n\n## 画面録画をするServiceを起動させる\nところでAndroidの画面録画をするコードとかをいろいろ参考にしたわけですが、Android 10で追加された属性「foregroundServiceType」のせいかActivityでは画面録画が出来ないっぽいんですよね。\nなので仕方なくServiceで。まあServiceで実装したほうが広く使えそうだもんね。\n\nMainActivity.ktに「onActivityResult」を追加します。\n\n```kotlin:MainActivity.kt\n    //画面録画の合否を受け取る\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        //成功＋結果が画面録画の物か\n        if (resultCode == Activity.RESULT_OK && requestCode == code) {\n            //Service起動\n            //Manifestに「android:foregroundServiceType=\"mediaProjection\"」を付け足しておく\n            val intent = Intent(this, ScreenRecordService::class.java)\n            intent.putExtra(\"code\", resultCode) //必要なのは結果。startActivityForResultのrequestCodeではない。\n            intent.putExtra(\"data\", data)\n            //画面の大きさも一緒に入れる\n            val metrics = resources.displayMetrics;\n            intent.putExtra(\"height\", metrics.heightPixels)\n            intent.putExtra(\"width\", metrics.widthPixels)\n            intent.putExtra(\"dpi\", metrics.densityDpi)\n\n            startForegroundService(intent)\n        }\n    }\n```\n## Service作成\nそれから「ScreenRecordService.kt」を作成して下さい。\n作成したら以下のように。\nsetSmallIconが赤くなると思います。これはベクターアセットから追加したためです。\nなので画像のようにして見つけて下さい。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/f504e4f1-57ae-e459-8f51-eb96af80bfea.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/ebe8ef29-bd69-3afc-6aec-100a92f9322f.png)\n\n```kotlin:ScreenRecordService.kt\nclass ScreenRecordService : Service() {\n    //Intentに詰めたデータを受け取る\n    var data: Intent? = null\n    var code = Activity.RESULT_OK\n\n    //画面録画で使う\n    lateinit var mediaRecorder: MediaRecorder\n    lateinit var projectionManager: MediaProjectionManager\n    lateinit var projection: MediaProjection\n    lateinit var virtualDisplay: VirtualDisplay\n\n    //画面の大きさ\n    //Pixel 3 XLだとなんかおかしくなる\n    var height = 2800\n    var width = 1400\n    var dpi = 1000\n\n\n    override fun onBind(p0: Intent?): IBinder? {\n        return null\n    }\n\n    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n\n        //データ受け取る\n        data = intent?.getParcelableExtra(\"data\")\n        code = intent?.getIntExtra(\"code\", Activity.RESULT_OK) ?: Activity.RESULT_OK\n\n        //画面の大きさ\n        //   height = intent?.getIntExtra(\"height\", 1000) ?: 1000\n        //   width = intent?.getIntExtra(\"width\", 1000) ?: 1000\n        dpi = intent?.getIntExtra(\"dpi\", 1000) ?: 1000\n\n        //通知を出す。\n        val notificationManager =\n            getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        //通知チャンネル\n        val channelID = \"rec_notify\"\n        //通知チャンネルが存在しないときは登録する\n        if (notificationManager.getNotificationChannel(channelID) == null) {\n            val channel =\n                NotificationChannel(channelID, \"録画サービス起動中通知\", NotificationManager.IMPORTANCE_HIGH)\n            notificationManager.createNotificationChannel(channel)\n        }\n        //通知作成\n        val notification = Notification.Builder(applicationContext, channelID)\n            .setContentText(\"録画中です。\")\n            .setContentTitle(\"画面録画\")\n            .setSmallIcon(R.drawable.ic_cast_black_24dp)    //アイコンはベクターアセットから\n            .build()\n\n        startForeground(1, notification)\n\n        //録画開始\n        startRec()\n\n        return START_NOT_STICKY\n    }\n\n    //Service終了と同時に録画終了\n    override fun onDestroy() {\n        super.onDestroy()\n        stopRec()\n    }\n\n}\n```\n\n## 画面録画\nScreenRecordService.ktに付け足してください。\nここはよくわからんのであまり言えませんが、「setVideoEncodingBitRate」を高くすれば画質アップ＆ファイルサイズアップです。\nファイル名は数字.mp4になります。```${System.currentTimeMillis()}.mp4```の部分がファイル名になっているので変えたい場合はどうぞ。\n保存先は**Android/data/io.github.takusan23.screenrecordsample/file**の中です。\n\n\n```kotlin:ScreenRecordService.kt\n    //録画開始\n    fun startRec() {\n        if (data != null) {\n            projectionManager =\n                getSystemService(Context.MEDIA_PROJECTION_SERVICE) as MediaProjectionManager\n            //codeはActivity.RESULT_OKとかが入る。\n            projection =\n                projectionManager.getMediaProjection(code, data!!)\n\n            mediaRecorder = MediaRecorder()\n            mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC)\n            mediaRecorder.setVideoSource(MediaRecorder.VideoSource.SURFACE)\n            mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4)\n            mediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264)\n            mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB)\n            mediaRecorder.setVideoEncodingBitRate(1080 * 10000) //1080は512ぐらいにしといたほうが小さくできる\n            mediaRecorder.setVideoFrameRate(30)\n            mediaRecorder.setVideoSize(width, height)\n            mediaRecorder.setAudioSamplingRate(44100)\n            mediaRecorder.setOutputFile(getFilePath())\n            mediaRecorder.prepare()\n\n            virtualDisplay = projection.createVirtualDisplay(\n                \"recode\",\n                width,\n                height,\n                dpi,\n                DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR,\n                mediaRecorder.surface,\n                null,\n                null\n            )\n\n            //開始\n            mediaRecorder.start()\n        }\n    }\n\n    //録画止める\n    fun stopRec() {\n        mediaRecorder.stop()\n        mediaRecorder.release()\n        virtualDisplay.release()\n        projection.stop()\n    }\n\n    //保存先取得。今回は対象範囲別ストレージに保存する\n    fun getFilePath(): File {\n        //ScopedStorageで作られるサンドボックスへのぱす\n        val scopedStoragePath = getExternalFilesDir(null)\n        //写真ファイル作成\n        val file = File(\"${scopedStoragePath?.path}/${System.currentTimeMillis()}.mp4\")\n        return file\n    }\n```\n\n## 完成！\n開始ボタン押した。\n![Screenshot_20191010-200940.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/8942a6c6-0950-3c74-128a-a0fed4934bab.png)\n\n「今すぐ開始」を押した。\nステータスバーのバイブアイコンの隣にキャスト中のアイコンが出てますね。\n![Screenshot_20191010-200946.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/174fed18-0694-8111-6287-94f26c3bfd7b.png)\n\n停止ボタンを押して作成した動画ファイルを見た\n![Screenshot_20191010-201017.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/62653173-7209-4a74-9ff6-63f8eb695d83.png)\n\n## Pixel 3 XL で遭遇した問題\n### 動画の大きさがおかしい問題\nよくわからないので以下のように書き換えておきました。\n本来はこの値を固定するべきでは無いと思いますがPixel 3 XLでしか動かさないので別にいいや。\n\n```kotlin:ScreenRecordService.kt\n    //画面の大きさ\n    //Pixel 3 XLだとなんかおかしくなる\n    var height = 2800\n    var width = 1400\n    var dpi = 1000\n\n   //以下省略\n\n    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n\n        //データ受け取る\n        data = intent?.getParcelableExtra(\"data\")\n        code = intent?.getIntExtra(\"code\", Activity.RESULT_OK) ?: Activity.RESULT_OK\n\n        //画面の大きさ\n        //   height = intent?.getIntExtra(\"height\", 1000) ?: 1000\n        //   width = intent?.getIntExtra(\"width\", 1000) ?: 1000\n        dpi = intent?.getIntExtra(\"dpi\", 1000) ?: 1000\n\n       //以下省略\n```\n\n## 内部音声は取れないの？\nAndroid 10から「AudioPlaybackCapture API」が追加されましたが\n内部音声はMediaRecorderではなくAudioRecordを使わないと録音できない。残念。\nAudioRecordの保存とかどうやるんだろう。\nきっとそのうち出てくると思うのでしばらく待つことにする。\n\n## 終わりに\nRootなしで内部音声が取れるのは期待ですね。\nこの記事を書いてるときに思い出しましたが、Android Q Beta 3ぐらいのときAndroidに標準で画面録画が搭載されそうになった（開発者オプションの機能フラグで有効にしないといけない）。\nBeta版の段階では電源ボタン長押しで表示されるスクリーンショットを取るボタンを長押しすれば利用できたそう。（残念ながら私の環境では落ちて使えなかった。）\nけど正式版では実装されなかった。ぜひ標準で欲しい機能なんだけどなあ。\n\nそれと\nPixel 4　と　docomo の発表会が楽しみですね！\n\n書きたいことは多分全部書いたので、\n以上です。おつ。８８８８８８８８８８８８８８８８８８\n\n## GitHub\nhttps://github.com/takusan23/ScreenRecordSample\n試してみたい方どうぞ～\n",
                "slug": "MediaProjection",
                "published": 1,
                "date": "2020-04-05T16:27:15.406Z",
                "updated": "2020-04-05T16:40:39.228Z",
                "comments": 1,
                "layout": "post",
                "photos": [],
                "link": "",
                "_id": "ck8r8f7c4000a28vu3tj9fjio",
                "content": "<p>どうもこんばんは。テスト期間つらい。<br>今回は画面を録画できるアプリを作ってみようと思います。</p>\n<h2 id=\"画面録画の歴史？\"><a href=\"#画面録画の歴史？\" class=\"headerlink\" title=\"画面録画の歴史？\"></a>画面録画の歴史？</h2><p>ここではRoot化で利用できる画面録画はなしの方向で。Root取れば内部音声が取れるって聞いたことある。<br>あと外部出力端子を利用して録画する話もなしの方向で。<br>私が知ってる限りでは</p>\n<p>Xperia Z3 / Z3 Compact でスクリーンレコーダーが搭載された（4.4）。<br>（ですがいつの間にかスクリーンレコーダー機能はなくなったそうです。（Xperia 1で復活したらしい））<br>（あとスモールアプリとかどこ行ったの？）<br>↓<br>5.0で「MediaProjection API」が追加されてサードパーティアプリでも録画ができるようになった。<br>Google Play ゲームで画面録画機能が追加されたりした。<br>しかしこの手の画面録画アプリは音声をマイクから撮っているので端末の音以外が入ってしまう。<br>↓<br>（Samsungとかが内部音声が取れるアプリを独自で追加しているらしい？）<br>↓<br>10.0で端末の内部音声を取れる「AudioPlaybackCapture API」が追加された。<br>今回は触れません。というか実装方法がわからなかった。残念。😥</p>\n<h2 id=\"端末紹介\"><a href=\"#端末紹介\" class=\"headerlink\" title=\"端末紹介\"></a>端末紹介</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>端末</td>\n<td>Pixel 3 XL</td>\n</tr>\n<tr>\n<td>Androidバージョン</td>\n<td>10</td>\n</tr>\n<tr>\n<td>compileSdkVersion</td>\n<td>29</td>\n</tr>\n</tbody></table>\n<h2 id=\"作るもの\"><a href=\"#作るもの\" class=\"headerlink\" title=\"作るもの\"></a>作るもの</h2><p>画面録画してmp4で保存する。<br>音声はマイクから取ることにする。</p>\n<h1 id=\"実装\"><a href=\"#実装\" class=\"headerlink\" title=\"実装\"></a>実装</h1><p>本題です。ここまで長かったね。</p>\n<h2 id=\"Android-10でも動くように\"><a href=\"#Android-10でも動くように\" class=\"headerlink\" title=\"Android 10でも動くように\"></a>Android 10でも動くように</h2><p>保存先を対象範囲別ストレージにする。<br>ServiceにAndroid 10から追加された属性「foregroundServiceType」を書き足す。</p>\n<h2 id=\"流れ\"><a href=\"#流れ\" class=\"headerlink\" title=\"流れ\"></a>流れ</h2><p>権限があるか確認する（マイクの録音）<br>↓<br>画面録画していいか聞く。<br>↓<br>許可が得られたらServiceを起動する。<br>↓<br>Serviceの中で画面録画を行う。</p>\n<p>Serviceが終了すると同時に録画も終了させる。</p>\n<h2 id=\"レイアウト\"><a href=\"#レイアウト\" class=\"headerlink\" title=\"レイアウト\"></a>レイアウト</h2><p>ActivityはMainActivityだけです。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/rec_button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"録画\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/stop_button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"停止\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Manifest\"><a href=\"#Manifest\" class=\"headerlink\" title=\"Manifest\"></a>Manifest</h2><p>必要な権限は</p>\n<table>\n<thead>\n<tr>\n<th>権限</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FOREGROUND_SERVICE</td>\n<td>サービスの実行に必要</td>\n</tr>\n<tr>\n<td>RECORD_AUDIO</td>\n<td>マイクを使うのに必要</td>\n</tr>\n</tbody></table>\n<p>この段階では「ScreenRecordService」は作成してないので赤くなるけど後で作るのでおｋ。<br><strong>android:foregroundServiceType=”mediaProjection”</strong>を忘れずに</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;manifest xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    package&#x3D;&quot;io.github.takusan23.screenrecordsample&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;uses-permission android:name&#x3D;&quot;android.permission.FOREGROUND_SERVICE&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;uses-permission android:name&#x3D;&quot;android.permission.RECORD_AUDIO&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;application</span><br><span class=\"line\">        android:allowBackup&#x3D;&quot;true&quot;</span><br><span class=\"line\">        android:icon&#x3D;&quot;@mipmap&#x2F;ic_launcher&quot;</span><br><span class=\"line\">        android:label&#x3D;&quot;@string&#x2F;app_name&quot;</span><br><span class=\"line\">        android:roundIcon&#x3D;&quot;@mipmap&#x2F;ic_launcher_round&quot;</span><br><span class=\"line\">        android:supportsRtl&#x3D;&quot;true&quot;</span><br><span class=\"line\">        android:theme&#x3D;&quot;@style&#x2F;AppTheme&quot;&gt;</span><br><span class=\"line\">        &lt;activity android:name&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\">            &lt;intent-filter&gt;</span><br><span class=\"line\">                &lt;action android:name&#x3D;&quot;android.intent.action.MAIN&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot; &#x2F;&gt;</span><br><span class=\"line\">            &lt;&#x2F;intent-filter&gt;</span><br><span class=\"line\">        &lt;&#x2F;activity&gt;</span><br><span class=\"line\">        &lt;service android:name&#x3D;&quot;.ScreenRecordService&quot; android:foregroundServiceType&#x3D;&quot;mediaProjection&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;application&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;manifest&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"権限をもらう\"><a href=\"#権限をもらう\" class=\"headerlink\" title=\"権限をもらう\"></a>権限をもらう</h2><p>録画のボタンを押したらまずマイクへのアクセス権があるか確認します。<br>ない場合は権限をリクエストするダイアログを表示させます。</p>\n<p>権限がある場合は録画を開始するダイアログを表示させます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;リクエストの結果</span><br><span class=\"line\">val code &#x3D; 512</span><br><span class=\"line\">val permissionCode &#x3D; 810</span><br><span class=\"line\">lateinit var projectionManager: MediaProjectionManager</span><br><span class=\"line\"></span><br><span class=\"line\">override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState)</span><br><span class=\"line\">    setContentView(R.layout.activity_main)</span><br><span class=\"line\"></span><br><span class=\"line\">    projectionManager &#x3D;</span><br><span class=\"line\">        getSystemService(Context.MEDIA_PROJECTION_SERVICE) as MediaProjectionManager</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;画面録画をしてもいいか聞く</span><br><span class=\"line\">    rec_button.setOnClickListener &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;その前にマイクへアクセスしていいか尋ねる</span><br><span class=\"line\">        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO)</span><br><span class=\"line\">            !&#x3D; PackageManager.PERMISSION_GRANTED</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            requestPermissions(arrayOf(Manifest.permission.RECORD_AUDIO), permissionCode)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;マイクの権限があるので画面録画リクエスト</span><br><span class=\"line\">            &#x2F;&#x2F;ダイアログを出す</span><br><span class=\"line\">            startActivityForResult(projectionManager.createScreenCaptureIntent(), code)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;停止ボタンで止められるように</span><br><span class=\"line\">    stop_button.setOnClickListener &#123;</span><br><span class=\"line\">        val intent &#x3D; Intent(this, ScreenRecordService::class.java)</span><br><span class=\"line\">        stopService(intent)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;権限の結果受け取る</span><br><span class=\"line\">override fun onRequestPermissionsResult(</span><br><span class=\"line\">    requestCode: Int,</span><br><span class=\"line\">    permissions: Array&lt;out String&gt;,</span><br><span class=\"line\">    grantResults: IntArray</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    super.onRequestPermissionsResult(requestCode, permissions, grantResults)</span><br><span class=\"line\">    if (requestCode &#x3D;&#x3D; permissionCode) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;マイクへアクセス権げっと</span><br><span class=\"line\">        Toast.makeText(this, &quot;権限が付与されました。&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"画面録画をするServiceを起動させる\"><a href=\"#画面録画をするServiceを起動させる\" class=\"headerlink\" title=\"画面録画をするServiceを起動させる\"></a>画面録画をするServiceを起動させる</h2><p>ところでAndroidの画面録画をするコードとかをいろいろ参考にしたわけですが、Android 10で追加された属性「foregroundServiceType」のせいかActivityでは画面録画が出来ないっぽいんですよね。<br>なので仕方なくServiceで。まあServiceで実装したほうが広く使えそうだもんね。</p>\n<p>MainActivity.ktに「onActivityResult」を追加します。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;画面録画の合否を受け取る</span><br><span class=\"line\">override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) &#123;</span><br><span class=\"line\">    super.onActivityResult(requestCode, resultCode, data)</span><br><span class=\"line\">    &#x2F;&#x2F;成功＋結果が画面録画の物か</span><br><span class=\"line\">    if (resultCode &#x3D;&#x3D; Activity.RESULT_OK &amp;&amp; requestCode &#x3D;&#x3D; code) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;Service起動</span><br><span class=\"line\">        &#x2F;&#x2F;Manifestに「android:foregroundServiceType&#x3D;&quot;mediaProjection&quot;」を付け足しておく</span><br><span class=\"line\">        val intent &#x3D; Intent(this, ScreenRecordService::class.java)</span><br><span class=\"line\">        intent.putExtra(&quot;code&quot;, resultCode) &#x2F;&#x2F;必要なのは結果。startActivityForResultのrequestCodeではない。</span><br><span class=\"line\">        intent.putExtra(&quot;data&quot;, data)</span><br><span class=\"line\">        &#x2F;&#x2F;画面の大きさも一緒に入れる</span><br><span class=\"line\">        val metrics &#x3D; resources.displayMetrics;</span><br><span class=\"line\">        intent.putExtra(&quot;height&quot;, metrics.heightPixels)</span><br><span class=\"line\">        intent.putExtra(&quot;width&quot;, metrics.widthPixels)</span><br><span class=\"line\">        intent.putExtra(&quot;dpi&quot;, metrics.densityDpi)</span><br><span class=\"line\"></span><br><span class=\"line\">        startForegroundService(intent)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Service作成\"><a href=\"#Service作成\" class=\"headerlink\" title=\"Service作成\"></a>Service作成</h2><p>それから「ScreenRecordService.kt」を作成して下さい。<br>作成したら以下のように。<br>setSmallIconが赤くなると思います。これはベクターアセットから追加したためです。<br>なので画像のようにして見つけて下さい。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/f504e4f1-57ae-e459-8f51-eb96af80bfea.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/ebe8ef29-bd69-3afc-6aec-100a92f9322f.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ScreenRecordService : Service() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;Intentに詰めたデータを受け取る</span><br><span class=\"line\">    var data: Intent? &#x3D; null</span><br><span class=\"line\">    var code &#x3D; Activity.RESULT_OK</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;画面録画で使う</span><br><span class=\"line\">    lateinit var mediaRecorder: MediaRecorder</span><br><span class=\"line\">    lateinit var projectionManager: MediaProjectionManager</span><br><span class=\"line\">    lateinit var projection: MediaProjection</span><br><span class=\"line\">    lateinit var virtualDisplay: VirtualDisplay</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;画面の大きさ</span><br><span class=\"line\">    &#x2F;&#x2F;Pixel 3 XLだとなんかおかしくなる</span><br><span class=\"line\">    var height &#x3D; 2800</span><br><span class=\"line\">    var width &#x3D; 1400</span><br><span class=\"line\">    var dpi &#x3D; 1000</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    override fun onBind(p0: Intent?): IBinder? &#123;</span><br><span class=\"line\">        return null</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;データ受け取る</span><br><span class=\"line\">        data &#x3D; intent?.getParcelableExtra(&quot;data&quot;)</span><br><span class=\"line\">        code &#x3D; intent?.getIntExtra(&quot;code&quot;, Activity.RESULT_OK) ?: Activity.RESULT_OK</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;画面の大きさ</span><br><span class=\"line\">        &#x2F;&#x2F;   height &#x3D; intent?.getIntExtra(&quot;height&quot;, 1000) ?: 1000</span><br><span class=\"line\">        &#x2F;&#x2F;   width &#x3D; intent?.getIntExtra(&quot;width&quot;, 1000) ?: 1000</span><br><span class=\"line\">        dpi &#x3D; intent?.getIntExtra(&quot;dpi&quot;, 1000) ?: 1000</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;通知を出す。</span><br><span class=\"line\">        val notificationManager &#x3D;</span><br><span class=\"line\">            getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager</span><br><span class=\"line\">        &#x2F;&#x2F;通知チャンネル</span><br><span class=\"line\">        val channelID &#x3D; &quot;rec_notify&quot;</span><br><span class=\"line\">        &#x2F;&#x2F;通知チャンネルが存在しないときは登録する</span><br><span class=\"line\">        if (notificationManager.getNotificationChannel(channelID) &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">            val channel &#x3D;</span><br><span class=\"line\">                NotificationChannel(channelID, &quot;録画サービス起動中通知&quot;, NotificationManager.IMPORTANCE_HIGH)</span><br><span class=\"line\">            notificationManager.createNotificationChannel(channel)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;通知作成</span><br><span class=\"line\">        val notification &#x3D; Notification.Builder(applicationContext, channelID)</span><br><span class=\"line\">            .setContentText(&quot;録画中です。&quot;)</span><br><span class=\"line\">            .setContentTitle(&quot;画面録画&quot;)</span><br><span class=\"line\">            .setSmallIcon(R.drawable.ic_cast_black_24dp)    &#x2F;&#x2F;アイコンはベクターアセットから</span><br><span class=\"line\">            .build()</span><br><span class=\"line\"></span><br><span class=\"line\">        startForeground(1, notification)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;録画開始</span><br><span class=\"line\">        startRec()</span><br><span class=\"line\"></span><br><span class=\"line\">        return START_NOT_STICKY</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;Service終了と同時に録画終了</span><br><span class=\"line\">    override fun onDestroy() &#123;</span><br><span class=\"line\">        super.onDestroy()</span><br><span class=\"line\">        stopRec()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"画面録画\"><a href=\"#画面録画\" class=\"headerlink\" title=\"画面録画\"></a>画面録画</h2><p>ScreenRecordService.ktに付け足してください。<br>ここはよくわからんのであまり言えませんが、「setVideoEncodingBitRate」を高くすれば画質アップ＆ファイルサイズアップです。<br>ファイル名は数字.mp4になります。<code>${System.currentTimeMillis()}.mp4</code>の部分がファイル名になっているので変えたい場合はどうぞ。<br>保存先は<strong>Android/data/io.github.takusan23.screenrecordsample/file</strong>の中です。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;録画開始</span><br><span class=\"line\">fun startRec() &#123;</span><br><span class=\"line\">    if (data !&#x3D; null) &#123;</span><br><span class=\"line\">        projectionManager &#x3D;</span><br><span class=\"line\">            getSystemService(Context.MEDIA_PROJECTION_SERVICE) as MediaProjectionManager</span><br><span class=\"line\">        &#x2F;&#x2F;codeはActivity.RESULT_OKとかが入る。</span><br><span class=\"line\">        projection &#x3D;</span><br><span class=\"line\">            projectionManager.getMediaProjection(code, data!!)</span><br><span class=\"line\"></span><br><span class=\"line\">        mediaRecorder &#x3D; MediaRecorder()</span><br><span class=\"line\">        mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC)</span><br><span class=\"line\">        mediaRecorder.setVideoSource(MediaRecorder.VideoSource.SURFACE)</span><br><span class=\"line\">        mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4)</span><br><span class=\"line\">        mediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264)</span><br><span class=\"line\">        mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB)</span><br><span class=\"line\">        mediaRecorder.setVideoEncodingBitRate(1080 * 10000) &#x2F;&#x2F;1080は512ぐらいにしといたほうが小さくできる</span><br><span class=\"line\">        mediaRecorder.setVideoFrameRate(30)</span><br><span class=\"line\">        mediaRecorder.setVideoSize(width, height)</span><br><span class=\"line\">        mediaRecorder.setAudioSamplingRate(44100)</span><br><span class=\"line\">        mediaRecorder.setOutputFile(getFilePath())</span><br><span class=\"line\">        mediaRecorder.prepare()</span><br><span class=\"line\"></span><br><span class=\"line\">        virtualDisplay &#x3D; projection.createVirtualDisplay(</span><br><span class=\"line\">            &quot;recode&quot;,</span><br><span class=\"line\">            width,</span><br><span class=\"line\">            height,</span><br><span class=\"line\">            dpi,</span><br><span class=\"line\">            DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR,</span><br><span class=\"line\">            mediaRecorder.surface,</span><br><span class=\"line\">            null,</span><br><span class=\"line\">            null</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;開始</span><br><span class=\"line\">        mediaRecorder.start()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;録画止める</span><br><span class=\"line\">fun stopRec() &#123;</span><br><span class=\"line\">    mediaRecorder.stop()</span><br><span class=\"line\">    mediaRecorder.release()</span><br><span class=\"line\">    virtualDisplay.release()</span><br><span class=\"line\">    projection.stop()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;保存先取得。今回は対象範囲別ストレージに保存する</span><br><span class=\"line\">fun getFilePath(): File &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;ScopedStorageで作られるサンドボックスへのぱす</span><br><span class=\"line\">    val scopedStoragePath &#x3D; getExternalFilesDir(null)</span><br><span class=\"line\">    &#x2F;&#x2F;写真ファイル作成</span><br><span class=\"line\">    val file &#x3D; File(&quot;$&#123;scopedStoragePath?.path&#125;&#x2F;$&#123;System.currentTimeMillis()&#125;.mp4&quot;)</span><br><span class=\"line\">    return file</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"完成！\"><a href=\"#完成！\" class=\"headerlink\" title=\"完成！\"></a>完成！</h2><p>開始ボタン押した。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/8942a6c6-0950-3c74-128a-a0fed4934bab.png\" alt=\"Screenshot_20191010-200940.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191010-200940.png</div>\n            </figure>\n\n<p>「今すぐ開始」を押した。<br>ステータスバーのバイブアイコンの隣にキャスト中のアイコンが出てますね。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/174fed18-0694-8111-6287-94f26c3bfd7b.png\" alt=\"Screenshot_20191010-200946.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191010-200946.png</div>\n            </figure>\n\n<p>停止ボタンを押して作成した動画ファイルを見た</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/62653173-7209-4a74-9ff6-63f8eb695d83.png\" alt=\"Screenshot_20191010-201017.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191010-201017.png</div>\n            </figure>\n\n<h2 id=\"Pixel-3-XL-で遭遇した問題\"><a href=\"#Pixel-3-XL-で遭遇した問題\" class=\"headerlink\" title=\"Pixel 3 XL で遭遇した問題\"></a>Pixel 3 XL で遭遇した問題</h2><h3 id=\"動画の大きさがおかしい問題\"><a href=\"#動画の大きさがおかしい問題\" class=\"headerlink\" title=\"動画の大きさがおかしい問題\"></a>動画の大きさがおかしい問題</h3><p>よくわからないので以下のように書き換えておきました。<br>本来はこの値を固定するべきでは無いと思いますがPixel 3 XLでしか動かさないので別にいいや。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#x2F;&#x2F;画面の大きさ</span><br><span class=\"line\"> &#x2F;&#x2F;Pixel 3 XLだとなんかおかしくなる</span><br><span class=\"line\"> var height &#x3D; 2800</span><br><span class=\"line\"> var width &#x3D; 1400</span><br><span class=\"line\"> var dpi &#x3D; 1000</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;以下省略</span><br><span class=\"line\"></span><br><span class=\"line\"> override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#x2F;&#x2F;データ受け取る</span><br><span class=\"line\">     data &#x3D; intent?.getParcelableExtra(&quot;data&quot;)</span><br><span class=\"line\">     code &#x3D; intent?.getIntExtra(&quot;code&quot;, Activity.RESULT_OK) ?: Activity.RESULT_OK</span><br><span class=\"line\"></span><br><span class=\"line\">     &#x2F;&#x2F;画面の大きさ</span><br><span class=\"line\">     &#x2F;&#x2F;   height &#x3D; intent?.getIntExtra(&quot;height&quot;, 1000) ?: 1000</span><br><span class=\"line\">     &#x2F;&#x2F;   width &#x3D; intent?.getIntExtra(&quot;width&quot;, 1000) ?: 1000</span><br><span class=\"line\">     dpi &#x3D; intent?.getIntExtra(&quot;dpi&quot;, 1000) ?: 1000</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;以下省略</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内部音声は取れないの？\"><a href=\"#内部音声は取れないの？\" class=\"headerlink\" title=\"内部音声は取れないの？\"></a>内部音声は取れないの？</h2><p>Android 10から「AudioPlaybackCapture API」が追加されましたが<br>内部音声はMediaRecorderではなくAudioRecordを使わないと録音できない。残念。<br>AudioRecordの保存とかどうやるんだろう。<br>きっとそのうち出てくると思うのでしばらく待つことにする。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>Rootなしで内部音声が取れるのは期待ですね。<br>この記事を書いてるときに思い出しましたが、Android Q Beta 3ぐらいのときAndroidに標準で画面録画が搭載されそうになった（開発者オプションの機能フラグで有効にしないといけない）。<br>Beta版の段階では電源ボタン長押しで表示されるスクリーンショットを取るボタンを長押しすれば利用できたそう。（残念ながら私の環境では落ちて使えなかった。）<br>けど正式版では実装されなかった。ぜひ標準で欲しい機能なんだけどなあ。</p>\n<p>それと<br>Pixel 4　と　docomo の発表会が楽しみですね！</p>\n<p>書きたいことは多分全部書いたので、<br>以上です。おつ。８８８８８８８８８８８８８８８８８８</p>\n<h2 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h2><p><a href=\"https://github.com/takusan23/ScreenRecordSample\" target=\"_blank\" rel=\"noopener\">https://github.com/takusan23/ScreenRecordSample</a><br>試してみたい方どうぞ～</p>\n",
                "site": {
                    "data": {}
                },
                "excerpt": "",
                "more": "<p>どうもこんばんは。テスト期間つらい。<br>今回は画面を録画できるアプリを作ってみようと思います。</p>\n<h2 id=\"画面録画の歴史？\"><a href=\"#画面録画の歴史？\" class=\"headerlink\" title=\"画面録画の歴史？\"></a>画面録画の歴史？</h2><p>ここではRoot化で利用できる画面録画はなしの方向で。Root取れば内部音声が取れるって聞いたことある。<br>あと外部出力端子を利用して録画する話もなしの方向で。<br>私が知ってる限りでは</p>\n<p>Xperia Z3 / Z3 Compact でスクリーンレコーダーが搭載された（4.4）。<br>（ですがいつの間にかスクリーンレコーダー機能はなくなったそうです。（Xperia 1で復活したらしい））<br>（あとスモールアプリとかどこ行ったの？）<br>↓<br>5.0で「MediaProjection API」が追加されてサードパーティアプリでも録画ができるようになった。<br>Google Play ゲームで画面録画機能が追加されたりした。<br>しかしこの手の画面録画アプリは音声をマイクから撮っているので端末の音以外が入ってしまう。<br>↓<br>（Samsungとかが内部音声が取れるアプリを独自で追加しているらしい？）<br>↓<br>10.0で端末の内部音声を取れる「AudioPlaybackCapture API」が追加された。<br>今回は触れません。というか実装方法がわからなかった。残念。😥</p>\n<h2 id=\"端末紹介\"><a href=\"#端末紹介\" class=\"headerlink\" title=\"端末紹介\"></a>端末紹介</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>端末</td>\n<td>Pixel 3 XL</td>\n</tr>\n<tr>\n<td>Androidバージョン</td>\n<td>10</td>\n</tr>\n<tr>\n<td>compileSdkVersion</td>\n<td>29</td>\n</tr>\n</tbody></table>\n<h2 id=\"作るもの\"><a href=\"#作るもの\" class=\"headerlink\" title=\"作るもの\"></a>作るもの</h2><p>画面録画してmp4で保存する。<br>音声はマイクから取ることにする。</p>\n<h1 id=\"実装\"><a href=\"#実装\" class=\"headerlink\" title=\"実装\"></a>実装</h1><p>本題です。ここまで長かったね。</p>\n<h2 id=\"Android-10でも動くように\"><a href=\"#Android-10でも動くように\" class=\"headerlink\" title=\"Android 10でも動くように\"></a>Android 10でも動くように</h2><p>保存先を対象範囲別ストレージにする。<br>ServiceにAndroid 10から追加された属性「foregroundServiceType」を書き足す。</p>\n<h2 id=\"流れ\"><a href=\"#流れ\" class=\"headerlink\" title=\"流れ\"></a>流れ</h2><p>権限があるか確認する（マイクの録音）<br>↓<br>画面録画していいか聞く。<br>↓<br>許可が得られたらServiceを起動する。<br>↓<br>Serviceの中で画面録画を行う。</p>\n<p>Serviceが終了すると同時に録画も終了させる。</p>\n<h2 id=\"レイアウト\"><a href=\"#レイアウト\" class=\"headerlink\" title=\"レイアウト\"></a>レイアウト</h2><p>ActivityはMainActivityだけです。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/rec_button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"録画\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/stop_button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"停止\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Manifest\"><a href=\"#Manifest\" class=\"headerlink\" title=\"Manifest\"></a>Manifest</h2><p>必要な権限は</p>\n<table>\n<thead>\n<tr>\n<th>権限</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FOREGROUND_SERVICE</td>\n<td>サービスの実行に必要</td>\n</tr>\n<tr>\n<td>RECORD_AUDIO</td>\n<td>マイクを使うのに必要</td>\n</tr>\n</tbody></table>\n<p>この段階では「ScreenRecordService」は作成してないので赤くなるけど後で作るのでおｋ。<br><strong>android:foregroundServiceType=”mediaProjection”</strong>を忘れずに</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;manifest xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    package&#x3D;&quot;io.github.takusan23.screenrecordsample&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;uses-permission android:name&#x3D;&quot;android.permission.FOREGROUND_SERVICE&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;uses-permission android:name&#x3D;&quot;android.permission.RECORD_AUDIO&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;application</span><br><span class=\"line\">        android:allowBackup&#x3D;&quot;true&quot;</span><br><span class=\"line\">        android:icon&#x3D;&quot;@mipmap&#x2F;ic_launcher&quot;</span><br><span class=\"line\">        android:label&#x3D;&quot;@string&#x2F;app_name&quot;</span><br><span class=\"line\">        android:roundIcon&#x3D;&quot;@mipmap&#x2F;ic_launcher_round&quot;</span><br><span class=\"line\">        android:supportsRtl&#x3D;&quot;true&quot;</span><br><span class=\"line\">        android:theme&#x3D;&quot;@style&#x2F;AppTheme&quot;&gt;</span><br><span class=\"line\">        &lt;activity android:name&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\">            &lt;intent-filter&gt;</span><br><span class=\"line\">                &lt;action android:name&#x3D;&quot;android.intent.action.MAIN&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot; &#x2F;&gt;</span><br><span class=\"line\">            &lt;&#x2F;intent-filter&gt;</span><br><span class=\"line\">        &lt;&#x2F;activity&gt;</span><br><span class=\"line\">        &lt;service android:name&#x3D;&quot;.ScreenRecordService&quot; android:foregroundServiceType&#x3D;&quot;mediaProjection&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;application&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;manifest&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"権限をもらう\"><a href=\"#権限をもらう\" class=\"headerlink\" title=\"権限をもらう\"></a>権限をもらう</h2><p>録画のボタンを押したらまずマイクへのアクセス権があるか確認します。<br>ない場合は権限をリクエストするダイアログを表示させます。</p>\n<p>権限がある場合は録画を開始するダイアログを表示させます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;リクエストの結果</span><br><span class=\"line\">val code &#x3D; 512</span><br><span class=\"line\">val permissionCode &#x3D; 810</span><br><span class=\"line\">lateinit var projectionManager: MediaProjectionManager</span><br><span class=\"line\"></span><br><span class=\"line\">override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState)</span><br><span class=\"line\">    setContentView(R.layout.activity_main)</span><br><span class=\"line\"></span><br><span class=\"line\">    projectionManager &#x3D;</span><br><span class=\"line\">        getSystemService(Context.MEDIA_PROJECTION_SERVICE) as MediaProjectionManager</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;画面録画をしてもいいか聞く</span><br><span class=\"line\">    rec_button.setOnClickListener &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;その前にマイクへアクセスしていいか尋ねる</span><br><span class=\"line\">        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO)</span><br><span class=\"line\">            !&#x3D; PackageManager.PERMISSION_GRANTED</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            requestPermissions(arrayOf(Manifest.permission.RECORD_AUDIO), permissionCode)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;マイクの権限があるので画面録画リクエスト</span><br><span class=\"line\">            &#x2F;&#x2F;ダイアログを出す</span><br><span class=\"line\">            startActivityForResult(projectionManager.createScreenCaptureIntent(), code)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;停止ボタンで止められるように</span><br><span class=\"line\">    stop_button.setOnClickListener &#123;</span><br><span class=\"line\">        val intent &#x3D; Intent(this, ScreenRecordService::class.java)</span><br><span class=\"line\">        stopService(intent)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;権限の結果受け取る</span><br><span class=\"line\">override fun onRequestPermissionsResult(</span><br><span class=\"line\">    requestCode: Int,</span><br><span class=\"line\">    permissions: Array&lt;out String&gt;,</span><br><span class=\"line\">    grantResults: IntArray</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    super.onRequestPermissionsResult(requestCode, permissions, grantResults)</span><br><span class=\"line\">    if (requestCode &#x3D;&#x3D; permissionCode) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;マイクへアクセス権げっと</span><br><span class=\"line\">        Toast.makeText(this, &quot;権限が付与されました。&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"画面録画をするServiceを起動させる\"><a href=\"#画面録画をするServiceを起動させる\" class=\"headerlink\" title=\"画面録画をするServiceを起動させる\"></a>画面録画をするServiceを起動させる</h2><p>ところでAndroidの画面録画をするコードとかをいろいろ参考にしたわけですが、Android 10で追加された属性「foregroundServiceType」のせいかActivityでは画面録画が出来ないっぽいんですよね。<br>なので仕方なくServiceで。まあServiceで実装したほうが広く使えそうだもんね。</p>\n<p>MainActivity.ktに「onActivityResult」を追加します。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;画面録画の合否を受け取る</span><br><span class=\"line\">override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) &#123;</span><br><span class=\"line\">    super.onActivityResult(requestCode, resultCode, data)</span><br><span class=\"line\">    &#x2F;&#x2F;成功＋結果が画面録画の物か</span><br><span class=\"line\">    if (resultCode &#x3D;&#x3D; Activity.RESULT_OK &amp;&amp; requestCode &#x3D;&#x3D; code) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;Service起動</span><br><span class=\"line\">        &#x2F;&#x2F;Manifestに「android:foregroundServiceType&#x3D;&quot;mediaProjection&quot;」を付け足しておく</span><br><span class=\"line\">        val intent &#x3D; Intent(this, ScreenRecordService::class.java)</span><br><span class=\"line\">        intent.putExtra(&quot;code&quot;, resultCode) &#x2F;&#x2F;必要なのは結果。startActivityForResultのrequestCodeではない。</span><br><span class=\"line\">        intent.putExtra(&quot;data&quot;, data)</span><br><span class=\"line\">        &#x2F;&#x2F;画面の大きさも一緒に入れる</span><br><span class=\"line\">        val metrics &#x3D; resources.displayMetrics;</span><br><span class=\"line\">        intent.putExtra(&quot;height&quot;, metrics.heightPixels)</span><br><span class=\"line\">        intent.putExtra(&quot;width&quot;, metrics.widthPixels)</span><br><span class=\"line\">        intent.putExtra(&quot;dpi&quot;, metrics.densityDpi)</span><br><span class=\"line\"></span><br><span class=\"line\">        startForegroundService(intent)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Service作成\"><a href=\"#Service作成\" class=\"headerlink\" title=\"Service作成\"></a>Service作成</h2><p>それから「ScreenRecordService.kt」を作成して下さい。<br>作成したら以下のように。<br>setSmallIconが赤くなると思います。これはベクターアセットから追加したためです。<br>なので画像のようにして見つけて下さい。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/f504e4f1-57ae-e459-8f51-eb96af80bfea.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/ebe8ef29-bd69-3afc-6aec-100a92f9322f.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ScreenRecordService : Service() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;Intentに詰めたデータを受け取る</span><br><span class=\"line\">    var data: Intent? &#x3D; null</span><br><span class=\"line\">    var code &#x3D; Activity.RESULT_OK</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;画面録画で使う</span><br><span class=\"line\">    lateinit var mediaRecorder: MediaRecorder</span><br><span class=\"line\">    lateinit var projectionManager: MediaProjectionManager</span><br><span class=\"line\">    lateinit var projection: MediaProjection</span><br><span class=\"line\">    lateinit var virtualDisplay: VirtualDisplay</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;画面の大きさ</span><br><span class=\"line\">    &#x2F;&#x2F;Pixel 3 XLだとなんかおかしくなる</span><br><span class=\"line\">    var height &#x3D; 2800</span><br><span class=\"line\">    var width &#x3D; 1400</span><br><span class=\"line\">    var dpi &#x3D; 1000</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    override fun onBind(p0: Intent?): IBinder? &#123;</span><br><span class=\"line\">        return null</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;データ受け取る</span><br><span class=\"line\">        data &#x3D; intent?.getParcelableExtra(&quot;data&quot;)</span><br><span class=\"line\">        code &#x3D; intent?.getIntExtra(&quot;code&quot;, Activity.RESULT_OK) ?: Activity.RESULT_OK</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;画面の大きさ</span><br><span class=\"line\">        &#x2F;&#x2F;   height &#x3D; intent?.getIntExtra(&quot;height&quot;, 1000) ?: 1000</span><br><span class=\"line\">        &#x2F;&#x2F;   width &#x3D; intent?.getIntExtra(&quot;width&quot;, 1000) ?: 1000</span><br><span class=\"line\">        dpi &#x3D; intent?.getIntExtra(&quot;dpi&quot;, 1000) ?: 1000</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;通知を出す。</span><br><span class=\"line\">        val notificationManager &#x3D;</span><br><span class=\"line\">            getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager</span><br><span class=\"line\">        &#x2F;&#x2F;通知チャンネル</span><br><span class=\"line\">        val channelID &#x3D; &quot;rec_notify&quot;</span><br><span class=\"line\">        &#x2F;&#x2F;通知チャンネルが存在しないときは登録する</span><br><span class=\"line\">        if (notificationManager.getNotificationChannel(channelID) &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">            val channel &#x3D;</span><br><span class=\"line\">                NotificationChannel(channelID, &quot;録画サービス起動中通知&quot;, NotificationManager.IMPORTANCE_HIGH)</span><br><span class=\"line\">            notificationManager.createNotificationChannel(channel)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;通知作成</span><br><span class=\"line\">        val notification &#x3D; Notification.Builder(applicationContext, channelID)</span><br><span class=\"line\">            .setContentText(&quot;録画中です。&quot;)</span><br><span class=\"line\">            .setContentTitle(&quot;画面録画&quot;)</span><br><span class=\"line\">            .setSmallIcon(R.drawable.ic_cast_black_24dp)    &#x2F;&#x2F;アイコンはベクターアセットから</span><br><span class=\"line\">            .build()</span><br><span class=\"line\"></span><br><span class=\"line\">        startForeground(1, notification)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;録画開始</span><br><span class=\"line\">        startRec()</span><br><span class=\"line\"></span><br><span class=\"line\">        return START_NOT_STICKY</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;Service終了と同時に録画終了</span><br><span class=\"line\">    override fun onDestroy() &#123;</span><br><span class=\"line\">        super.onDestroy()</span><br><span class=\"line\">        stopRec()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"画面録画\"><a href=\"#画面録画\" class=\"headerlink\" title=\"画面録画\"></a>画面録画</h2><p>ScreenRecordService.ktに付け足してください。<br>ここはよくわからんのであまり言えませんが、「setVideoEncodingBitRate」を高くすれば画質アップ＆ファイルサイズアップです。<br>ファイル名は数字.mp4になります。<code>${System.currentTimeMillis()}.mp4</code>の部分がファイル名になっているので変えたい場合はどうぞ。<br>保存先は<strong>Android/data/io.github.takusan23.screenrecordsample/file</strong>の中です。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;録画開始</span><br><span class=\"line\">fun startRec() &#123;</span><br><span class=\"line\">    if (data !&#x3D; null) &#123;</span><br><span class=\"line\">        projectionManager &#x3D;</span><br><span class=\"line\">            getSystemService(Context.MEDIA_PROJECTION_SERVICE) as MediaProjectionManager</span><br><span class=\"line\">        &#x2F;&#x2F;codeはActivity.RESULT_OKとかが入る。</span><br><span class=\"line\">        projection &#x3D;</span><br><span class=\"line\">            projectionManager.getMediaProjection(code, data!!)</span><br><span class=\"line\"></span><br><span class=\"line\">        mediaRecorder &#x3D; MediaRecorder()</span><br><span class=\"line\">        mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC)</span><br><span class=\"line\">        mediaRecorder.setVideoSource(MediaRecorder.VideoSource.SURFACE)</span><br><span class=\"line\">        mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4)</span><br><span class=\"line\">        mediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264)</span><br><span class=\"line\">        mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB)</span><br><span class=\"line\">        mediaRecorder.setVideoEncodingBitRate(1080 * 10000) &#x2F;&#x2F;1080は512ぐらいにしといたほうが小さくできる</span><br><span class=\"line\">        mediaRecorder.setVideoFrameRate(30)</span><br><span class=\"line\">        mediaRecorder.setVideoSize(width, height)</span><br><span class=\"line\">        mediaRecorder.setAudioSamplingRate(44100)</span><br><span class=\"line\">        mediaRecorder.setOutputFile(getFilePath())</span><br><span class=\"line\">        mediaRecorder.prepare()</span><br><span class=\"line\"></span><br><span class=\"line\">        virtualDisplay &#x3D; projection.createVirtualDisplay(</span><br><span class=\"line\">            &quot;recode&quot;,</span><br><span class=\"line\">            width,</span><br><span class=\"line\">            height,</span><br><span class=\"line\">            dpi,</span><br><span class=\"line\">            DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR,</span><br><span class=\"line\">            mediaRecorder.surface,</span><br><span class=\"line\">            null,</span><br><span class=\"line\">            null</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;開始</span><br><span class=\"line\">        mediaRecorder.start()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;録画止める</span><br><span class=\"line\">fun stopRec() &#123;</span><br><span class=\"line\">    mediaRecorder.stop()</span><br><span class=\"line\">    mediaRecorder.release()</span><br><span class=\"line\">    virtualDisplay.release()</span><br><span class=\"line\">    projection.stop()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;保存先取得。今回は対象範囲別ストレージに保存する</span><br><span class=\"line\">fun getFilePath(): File &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;ScopedStorageで作られるサンドボックスへのぱす</span><br><span class=\"line\">    val scopedStoragePath &#x3D; getExternalFilesDir(null)</span><br><span class=\"line\">    &#x2F;&#x2F;写真ファイル作成</span><br><span class=\"line\">    val file &#x3D; File(&quot;$&#123;scopedStoragePath?.path&#125;&#x2F;$&#123;System.currentTimeMillis()&#125;.mp4&quot;)</span><br><span class=\"line\">    return file</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"完成！\"><a href=\"#完成！\" class=\"headerlink\" title=\"完成！\"></a>完成！</h2><p>開始ボタン押した。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/8942a6c6-0950-3c74-128a-a0fed4934bab.png\" alt=\"Screenshot_20191010-200940.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191010-200940.png</div>\n            </figure>\n\n<p>「今すぐ開始」を押した。<br>ステータスバーのバイブアイコンの隣にキャスト中のアイコンが出てますね。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/174fed18-0694-8111-6287-94f26c3bfd7b.png\" alt=\"Screenshot_20191010-200946.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191010-200946.png</div>\n            </figure>\n\n<p>停止ボタンを押して作成した動画ファイルを見た</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/62653173-7209-4a74-9ff6-63f8eb695d83.png\" alt=\"Screenshot_20191010-201017.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191010-201017.png</div>\n            </figure>\n\n<h2 id=\"Pixel-3-XL-で遭遇した問題\"><a href=\"#Pixel-3-XL-で遭遇した問題\" class=\"headerlink\" title=\"Pixel 3 XL で遭遇した問題\"></a>Pixel 3 XL で遭遇した問題</h2><h3 id=\"動画の大きさがおかしい問題\"><a href=\"#動画の大きさがおかしい問題\" class=\"headerlink\" title=\"動画の大きさがおかしい問題\"></a>動画の大きさがおかしい問題</h3><p>よくわからないので以下のように書き換えておきました。<br>本来はこの値を固定するべきでは無いと思いますがPixel 3 XLでしか動かさないので別にいいや。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#x2F;&#x2F;画面の大きさ</span><br><span class=\"line\"> &#x2F;&#x2F;Pixel 3 XLだとなんかおかしくなる</span><br><span class=\"line\"> var height &#x3D; 2800</span><br><span class=\"line\"> var width &#x3D; 1400</span><br><span class=\"line\"> var dpi &#x3D; 1000</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;以下省略</span><br><span class=\"line\"></span><br><span class=\"line\"> override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#x2F;&#x2F;データ受け取る</span><br><span class=\"line\">     data &#x3D; intent?.getParcelableExtra(&quot;data&quot;)</span><br><span class=\"line\">     code &#x3D; intent?.getIntExtra(&quot;code&quot;, Activity.RESULT_OK) ?: Activity.RESULT_OK</span><br><span class=\"line\"></span><br><span class=\"line\">     &#x2F;&#x2F;画面の大きさ</span><br><span class=\"line\">     &#x2F;&#x2F;   height &#x3D; intent?.getIntExtra(&quot;height&quot;, 1000) ?: 1000</span><br><span class=\"line\">     &#x2F;&#x2F;   width &#x3D; intent?.getIntExtra(&quot;width&quot;, 1000) ?: 1000</span><br><span class=\"line\">     dpi &#x3D; intent?.getIntExtra(&quot;dpi&quot;, 1000) ?: 1000</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;以下省略</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内部音声は取れないの？\"><a href=\"#内部音声は取れないの？\" class=\"headerlink\" title=\"内部音声は取れないの？\"></a>内部音声は取れないの？</h2><p>Android 10から「AudioPlaybackCapture API」が追加されましたが<br>内部音声はMediaRecorderではなくAudioRecordを使わないと録音できない。残念。<br>AudioRecordの保存とかどうやるんだろう。<br>きっとそのうち出てくると思うのでしばらく待つことにする。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>Rootなしで内部音声が取れるのは期待ですね。<br>この記事を書いてるときに思い出しましたが、Android Q Beta 3ぐらいのときAndroidに標準で画面録画が搭載されそうになった（開発者オプションの機能フラグで有効にしないといけない）。<br>Beta版の段階では電源ボタン長押しで表示されるスクリーンショットを取るボタンを長押しすれば利用できたそう。（残念ながら私の環境では落ちて使えなかった。）<br>けど正式版では実装されなかった。ぜひ標準で欲しい機能なんだけどなあ。</p>\n<p>それと<br>Pixel 4　と　docomo の発表会が楽しみですね！</p>\n<p>書きたいことは多分全部書いたので、<br>以上です。おつ。８８８８８８８８８８８８８８８８８８</p>\n<h2 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h2><p><a href=\"https://github.com/takusan23/ScreenRecordSample\" target=\"_blank\" rel=\"noopener\">https://github.com/takusan23/ScreenRecordSample</a><br>試してみたい方どうぞ～</p>\n"
            },
            {
                "title": "【Android / Kotlin】 ナビゲーションドロワーのつくりかた",
                "author": "takusan_23",
                "slide": false,
                "_content": "どうも。こんばんわ\n\n# なにがあったのか\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/05545e12-a4c7-83ae-31b8-7c63a448b994.png)\n\nこの画面からナビゲーションドロワーを作成すると前と違ってめっちゃフォルダ・ファイルが作成されるようになった。どゆこと\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/1d14c929-e9e5-6c41-90a6-47a5044c4241.png)\n\n\nしかもbuild.gradleに書き足さないとエラーが出るってなんだよ。\n\n```\nCannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target 1.6. Please specify proper '-jvm-target' option\n```\n\nこのエラーはappフォルダにあるほうの```build.gradle```を開いて、android{}の波かっこの中に以下の文を書き足すことで動きます。\n\n```gradle\ncompileOptions {\n    sourceCompatibility = 1.8\n    targetCompatibility = 1.8\n}\nkotlinOptions {\n    jvmTarget = \"1.8\"\n}\n```\n\nということで今回は空の状態からナビゲーションドロワーを作っていこうと思います。\nViewModelなんて触ったことないので...\n\n# 環境\n| なまえ                   | なかみ                                   |\n|--------------------------|------------------------------------------|\n| Androidバージョン        | 10                                       |\n| Android Studioバージョン | 3.5                                      |\n| 端末                     | Pixel 3 XL                               |\n| 言語                     | Kotlin(なのでfindViewByIdを使いません。) |\n\n# 本題\nつくれたらappフォルダに入っているbuild.gradleを開いてマテリアルデザインのライブラリを入れます。\n\n```gradle\nimplementation 'com.google.android.material:material:1.2.0-alpha01'\n```\n\n# メニュー用意\nナビゲーションドロワーに入れるメニューですね。\n\nresディレクトリを右クリックしてフォルダを作成してください。\n名前を**menu**にしてね。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/b9133c44-8194-94f1-5589-42a9af9c82b2.png)\n\n作れたら**menu**フォルダの中に**drawer_menu**って名前で作ってね。（別にわかりやすい名前があるならそれでもいいよ。）\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/9808ba04-4b40-3977-f347-2825b549a126.png)\n\nそしたらその**drawer_menu.xml**を開いて適当にメニューを作成します。\nが、その前にアイコンを持ってきましょう。\n\n## メニューに表示させるアイコンを用意する\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/3b1bba2d-037c-fce6-5c14-076de0882370.png)\n\nベクターアセットからお好みの画像を持ってきてください。\n今回は適当にドロイド君で\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/663e99a7-dd18-ebac-6278-d89d331e5035.png)\n\n## メニュー項目追加\n\ndrawer_menu.xmlに書いてください。\nitemを追加するときはtitle(必須)とid(識別に使う)は絶対書いてね。アイコンはいらないかもだけどあったほうがよさげ。\n\n```xml:drawer_menu.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <group android:checkableBehavior=\"single\">\n        <item android:icon=\"@drawable/ic_android_black_24dp\" android:title=\"Java\" android:id=\"@+id/drawer_menu_java\" />\n        <item android:icon=\"@drawable/ic_android_black_24dp\" android:title=\"Kotlin\" android:id=\"@+id/drawer_menu_kotlin\"/>\n        <item android:icon=\"@drawable/ic_android_black_24dp\" android:title=\"JS\" android:id=\"@+id/drawer_menu_js\"/>\n    </group>\n</menu>\n```\n\n# レイアウト作成\nいよいよレイアウトですよ。レイアウト作るの楽しい。\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World!\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n何もしていなければこのままですね。こっからドロワーを追加していきます。\n\nこう書き換えます。\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.drawerlayout.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World!\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <com.google.android.material.navigation.NavigationView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/navigation_drawer\"\n        app:menu=\"@menu/drawer_menu\"\n        android:layout_gravity=\"start\"/>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\nできたら実行してみてください。この段階ではまだ何もMainActivity.ktに手を付けてません。\n起動出来たら端から左へスワイプしてみてください。メニューが出ると思います。\n\n![Screenshot_20191107-220921.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/6de175c5-27c9-72da-219c-54a99f8edf25.png)\n\n## Android 10でジェスチャーナビゲーション使ってるんですけど開けず戻るになる方へ\n左の端っこを長押しすると少しだけナビゲーションドロワーが出てくるのでそのままスワイプすればいいです。\n\n![Screenshot_20191107-220915.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/a6832bae-4805-f378-cf41-f956f2d839d7.png)\n\nジェスチャーナビゲーションと相性悪い。ケースとかつけてると開くの大変。\n\n# ハンバーガーメニューをつくる\nこの左上にある三本線のアイコンのことです。\n![Screenshot_20191107-225021.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/373a27b9-695b-babc-472a-ee0743d12acc.png)\n\n\nハンバーガーメニューはナビゲーションドロワーを開く三本の横線のことです。海を渡るとハンバーガーメニューって呼ばれてるそうです。\n\nこれは少し大変なので頑張っていきましょう。\n\n## styles.xmlを書き足す\nこんな感じに\n\n```xml:style.xml\n<resources>\n\n    <!-- ドロワー用レイアウト -->\n    <style name=\"DrawerTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n\n        <item name=\"windowActionBar\">false</item>\n        <item name=\"windowNoTitle\">true</item>\n\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n\n\n</resources>\n```\n\n元からあるAppThemeは消しません。ナビゲーションドロワーを置いているActivityでのみ使うためです。\nActivityを追加したときのためにAppThemeを残してあります。\n\n## Manifest書き換える\n\nAndroidManifest.xmlを開いてね。\n開けたら以下の一行を探してください。\n\n```xml:AndroidManifest.xml\nandroid:theme=\"@style/AppTheme\"\n```\n\nこれをさっき作った**DrawerTheme**へ書き換えます。\n\n```xml:AndroidManifest.xml\nandroid:theme=\"@style/DrawerTheme\"\n```\n\n## ツールバーを設置\nツールバーっていうのはアプリ名が書いてある上のバーのことです。\nツールバーはstyles.xmlで消す設定にしたのでレイアウトにツールバーを置く必要があります。\n\nということで書き換えます。\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.drawerlayout.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n\n        <androidx.appcompat.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"?attr/colorPrimary\"\n            android:minHeight=\"?attr/actionBarSize\"\n            android:theme=\"?attr/actionBarTheme\" />\n    </LinearLayout>\n\n    <com.google.android.material.navigation.NavigationView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/navigation_drawer\"\n        app:menu=\"@menu/drawer_menu\"\n        android:layout_gravity=\"start\"/>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\nLinearLayoutの中にToolbarを入れました。\n\n## Toolbarにアイコンを付ける\nようやくKotlinでコーディングです。\nということでMainActivity.ktを開いてください。\n\n```kotlin:MainActivity.kt\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        //Toolbarを登録\n        setSupportActionBar(toolbar)\n\n        //ハンバーガーメニューのアイコンを実装\n        //第４、５引数はアクセシビリティで使うみたい。\n        val actionBarDrawerToggle = ActionBarDrawerToggle(\n            this, drawer_layout, toolbar, R.string.app_name, R.string.app_name\n        )\n        drawer_layout.addDrawerListener(actionBarDrawerToggle)\n        actionBarDrawerToggle.syncState()\n\n    }\n}\n```\n\nActionBarDrawerToggle()の第４、５引数はアクセシビリティで使うみたいです（ドキュメントによると）。\n今回は適当に入れました。\n\n出来たら実行してみてください。\nハンバーガーメニュー押しても開くし、端っこから左へスワイプでも開く＋だんだんアイコンが変化してくると思います。\n\n![Screenshot_20191107-224549.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/59b1491b-7923-1ec6-ba3b-a7b4b0318dfd.png)\n\n# ヘッダーを付ける\nヘッダーを付けるとメニューの上に何かViewを置くことができます。\n今回は適当に画像でも置いてみましょう。\n![Screenshot_20191107-225843.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/7d06b19b-f2e3-9951-3250-1eaa62883e09.png)\n\n\n## ヘッダーのレイアウト作成\nlayoutフォルダに**drawer_header_layout.xml**でレイアウトファイルを作成してください。\n画像はプロジェクトに入ってたものを使うことに。\n\n```xml:drawer_header_layout.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_margin=\"10sp\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\">\n\n    <ImageView\n        android:id=\"@+id/imageView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:srcCompat=\"@mipmap/ic_launcher_round\" />\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_vertical\"\n        android:layout_weight=\"1\"\n        android:text=\"ナビゲーションドロワーの練習です\" />\n</LinearLayout>\n```\n\n## ナビゲーションドロワーにヘッダーを入れる\nactivity_main.xmlを開いて、NavigationViewにapp:headerLayoutの属性？を付けます。\n\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.drawerlayout.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n\n        <androidx.appcompat.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"?attr/colorPrimary\"\n            android:minHeight=\"?attr/actionBarSize\"\n            android:theme=\"?attr/actionBarTheme\" />\n    </LinearLayout>\n\n    <com.google.android.material.navigation.NavigationView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/navigation_drawer\"\n        app:menu=\"@menu/drawer_menu\"\n        app:headerLayout=\"@layout/drawer_header_layout\"\n        android:layout_gravity=\"start\"/>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\n出来たら実行してみてください。\nメニューの上に画像が出てくると思います。\n\n![Screenshot_20191107-225843.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/7d06b19b-f2e3-9951-3250-1eaa62883e09.png)\n\n## ヘッダーをステータスバーの下まで潜れないの？\nできますよ～\n![Screenshot_20191107-230521.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/208826b5-ecd7-75b1-a41e-8f56ef413b4d.png)\n\nactivity_main.xmlを開いてください。\n変更点はDrawerLayoutにfitsSystemWindows属性がついた点ですね。    android:fitsSystemWindows=\"true\"を書き足すことでステータスバーの下へ侵略できます。\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.drawerlayout.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:fitsSystemWindows=\"true\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n\n        <androidx.appcompat.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"?attr/colorPrimary\"\n            android:minHeight=\"?attr/actionBarSize\"\n            android:theme=\"?attr/actionBarTheme\" />\n    </LinearLayout>\n\n    <com.google.android.material.navigation.NavigationView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/navigation_drawer\"\n        app:menu=\"@menu/drawer_menu\"\n        app:headerLayout=\"@layout/drawer_header_layout\"\n        android:layout_gravity=\"start\"/>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\nしかしこのままだとステータスバーの色のせいで見えなくなるのでステータスバーの色を透明にする必要があります。\nstyles.xmlを開いてドロワー用レイアウトへ属性を追加します。\n何を追加するのかって話ですがandroid:statusBarColorを追加します。値は```@android:color/transparent```（透明）です。\n\n\n```xml:styles.xml\n    <!-- ドロワー用レイアウト -->\n    <style name=\"DrawerTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n\n        <item name=\"windowActionBar\">false</item>\n        <item name=\"windowNoTitle\">true</item>\n        <item name=\"android:statusBarColor\">@android:color/transparent</item>\n\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n```\n\nこれで起動すればステータスバーの色が透明になって見れるようになります。\n![Screenshot_20191107-230521.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/208826b5-ecd7-75b1-a41e-8f56ef413b4d.png)\n\n# メニューを押したときに何かしたい\nこんな感じに\n\n```kotlin:MainActivity.kt\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        //Toolbarを登録\n        setSupportActionBar(toolbar)\n\n        //ハンバーガーメニューのアイコンを実装\n        //第４、５引数はアクセシビリティで使うみたい。\n        val actionBarDrawerToggle = ActionBarDrawerToggle(\n            this, drawer_layout, toolbar, R.string.app_name, R.string.app_name\n        )\n        drawer_layout.addDrawerListener(actionBarDrawerToggle)\n        actionBarDrawerToggle.syncState()\n\n        //メニューを押したとき\n        navigation_drawer.setNavigationItemSelectedListener {\n            when(it.itemId){\n                R.id.drawer_menu_java->{\n                    //java押したとき\n                    Snackbar.make(navigation_drawer,\"30億のデバイスで走るJava\",Snackbar.LENGTH_SHORT).show()\n                }\n                R.id.drawer_menu_kotlin->{\n                    //kotlin押したとき\n                    Snackbar.make(navigation_drawer,\"apply{}便利すぎる\",Snackbar.LENGTH_SHORT).show()\n                }\n                R.id.drawer_menu_js->{\n                    //JS押したとき\n                    Snackbar.make(navigation_drawer,\"undefined\",Snackbar.LENGTH_SHORT).show()\n                }\n            }\n            //押したらナビゲーションドロワーを閉じる\n            drawer_layout.closeDrawer(navigation_drawer)\n            true\n        }\n    }\n}\n```\n\nJavaを押したときSnackbarがでて「30億のデバイスで走るJava」と表示されれば成功です。おめでとう！\n\n# 終わりに\nナビゲーションドロワーのレイアウトを少し変えればばボタンとかおけます。\n複雑になりそうだけど。\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.drawerlayout.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:fitsSystemWindows=\"true\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n\n        <androidx.appcompat.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"?attr/colorPrimary\"\n            android:minHeight=\"?attr/actionBarSize\"\n            android:theme=\"?attr/actionBarTheme\" />\n    </LinearLayout>\n\n    <com.google.android.material.navigation.NavigationView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/navigation_drawer\"\n        android:layout_gravity=\"start\">\n\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:orientation=\"vertical\">\n\n            <ImageView\n                android:id=\"@+id/imageView2\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                app:srcCompat=\"@mipmap/ic_launcher_round\" />\n\n            <Button\n                android:layout_gravity=\"center_vertical\"\n                android:id=\"@+id/button\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"ボタンとかおけます。\" />\n        </LinearLayout>\n\n    </com.google.android.material.navigation.NavigationView>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\n![Screenshot_20191107-233906.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/421e765a-99cf-59ba-053c-374c35a3716c.png)\n\nそれからstyles.xmlのparentをTheme.MaterialComponents.Light.DarkActionBarにするとメニュー選択時が少し変わります。\n\n![Screenshot_20191107-234614.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/a1e21809-93b5-06bb-a8db-d7d9864a58e0.png)\n\n\nおつ！８８８８８８８８８８８８８８８。\n",
                "source": "_posts/NavigationDrawer.md",
                "raw": "---\ntitle: 【Android / Kotlin】 ナビゲーションドロワーのつくりかた\ntags:\n- Android\n- Kotlin\n- MaterialDesign\n- NavigationDrawer\nauthor: takusan_23\nslide: false\n---\nどうも。こんばんわ\n\n# なにがあったのか\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/05545e12-a4c7-83ae-31b8-7c63a448b994.png)\n\nこの画面からナビゲーションドロワーを作成すると前と違ってめっちゃフォルダ・ファイルが作成されるようになった。どゆこと\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/1d14c929-e9e5-6c41-90a6-47a5044c4241.png)\n\n\nしかもbuild.gradleに書き足さないとエラーが出るってなんだよ。\n\n```\nCannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target 1.6. Please specify proper '-jvm-target' option\n```\n\nこのエラーはappフォルダにあるほうの```build.gradle```を開いて、android{}の波かっこの中に以下の文を書き足すことで動きます。\n\n```gradle\ncompileOptions {\n    sourceCompatibility = 1.8\n    targetCompatibility = 1.8\n}\nkotlinOptions {\n    jvmTarget = \"1.8\"\n}\n```\n\nということで今回は空の状態からナビゲーションドロワーを作っていこうと思います。\nViewModelなんて触ったことないので...\n\n# 環境\n| なまえ                   | なかみ                                   |\n|--------------------------|------------------------------------------|\n| Androidバージョン        | 10                                       |\n| Android Studioバージョン | 3.5                                      |\n| 端末                     | Pixel 3 XL                               |\n| 言語                     | Kotlin(なのでfindViewByIdを使いません。) |\n\n# 本題\nつくれたらappフォルダに入っているbuild.gradleを開いてマテリアルデザインのライブラリを入れます。\n\n```gradle\nimplementation 'com.google.android.material:material:1.2.0-alpha01'\n```\n\n# メニュー用意\nナビゲーションドロワーに入れるメニューですね。\n\nresディレクトリを右クリックしてフォルダを作成してください。\n名前を**menu**にしてね。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/b9133c44-8194-94f1-5589-42a9af9c82b2.png)\n\n作れたら**menu**フォルダの中に**drawer_menu**って名前で作ってね。（別にわかりやすい名前があるならそれでもいいよ。）\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/9808ba04-4b40-3977-f347-2825b549a126.png)\n\nそしたらその**drawer_menu.xml**を開いて適当にメニューを作成します。\nが、その前にアイコンを持ってきましょう。\n\n## メニューに表示させるアイコンを用意する\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/3b1bba2d-037c-fce6-5c14-076de0882370.png)\n\nベクターアセットからお好みの画像を持ってきてください。\n今回は適当にドロイド君で\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/663e99a7-dd18-ebac-6278-d89d331e5035.png)\n\n## メニュー項目追加\n\ndrawer_menu.xmlに書いてください。\nitemを追加するときはtitle(必須)とid(識別に使う)は絶対書いてね。アイコンはいらないかもだけどあったほうがよさげ。\n\n```xml:drawer_menu.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <group android:checkableBehavior=\"single\">\n        <item android:icon=\"@drawable/ic_android_black_24dp\" android:title=\"Java\" android:id=\"@+id/drawer_menu_java\" />\n        <item android:icon=\"@drawable/ic_android_black_24dp\" android:title=\"Kotlin\" android:id=\"@+id/drawer_menu_kotlin\"/>\n        <item android:icon=\"@drawable/ic_android_black_24dp\" android:title=\"JS\" android:id=\"@+id/drawer_menu_js\"/>\n    </group>\n</menu>\n```\n\n# レイアウト作成\nいよいよレイアウトですよ。レイアウト作るの楽しい。\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World!\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n何もしていなければこのままですね。こっからドロワーを追加していきます。\n\nこう書き換えます。\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.drawerlayout.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World!\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <com.google.android.material.navigation.NavigationView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/navigation_drawer\"\n        app:menu=\"@menu/drawer_menu\"\n        android:layout_gravity=\"start\"/>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\nできたら実行してみてください。この段階ではまだ何もMainActivity.ktに手を付けてません。\n起動出来たら端から左へスワイプしてみてください。メニューが出ると思います。\n\n![Screenshot_20191107-220921.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/6de175c5-27c9-72da-219c-54a99f8edf25.png)\n\n## Android 10でジェスチャーナビゲーション使ってるんですけど開けず戻るになる方へ\n左の端っこを長押しすると少しだけナビゲーションドロワーが出てくるのでそのままスワイプすればいいです。\n\n![Screenshot_20191107-220915.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/a6832bae-4805-f378-cf41-f956f2d839d7.png)\n\nジェスチャーナビゲーションと相性悪い。ケースとかつけてると開くの大変。\n\n# ハンバーガーメニューをつくる\nこの左上にある三本線のアイコンのことです。\n![Screenshot_20191107-225021.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/373a27b9-695b-babc-472a-ee0743d12acc.png)\n\n\nハンバーガーメニューはナビゲーションドロワーを開く三本の横線のことです。海を渡るとハンバーガーメニューって呼ばれてるそうです。\n\nこれは少し大変なので頑張っていきましょう。\n\n## styles.xmlを書き足す\nこんな感じに\n\n```xml:style.xml\n<resources>\n\n    <!-- ドロワー用レイアウト -->\n    <style name=\"DrawerTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n\n        <item name=\"windowActionBar\">false</item>\n        <item name=\"windowNoTitle\">true</item>\n\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n\n\n</resources>\n```\n\n元からあるAppThemeは消しません。ナビゲーションドロワーを置いているActivityでのみ使うためです。\nActivityを追加したときのためにAppThemeを残してあります。\n\n## Manifest書き換える\n\nAndroidManifest.xmlを開いてね。\n開けたら以下の一行を探してください。\n\n```xml:AndroidManifest.xml\nandroid:theme=\"@style/AppTheme\"\n```\n\nこれをさっき作った**DrawerTheme**へ書き換えます。\n\n```xml:AndroidManifest.xml\nandroid:theme=\"@style/DrawerTheme\"\n```\n\n## ツールバーを設置\nツールバーっていうのはアプリ名が書いてある上のバーのことです。\nツールバーはstyles.xmlで消す設定にしたのでレイアウトにツールバーを置く必要があります。\n\nということで書き換えます。\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.drawerlayout.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n\n        <androidx.appcompat.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"?attr/colorPrimary\"\n            android:minHeight=\"?attr/actionBarSize\"\n            android:theme=\"?attr/actionBarTheme\" />\n    </LinearLayout>\n\n    <com.google.android.material.navigation.NavigationView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/navigation_drawer\"\n        app:menu=\"@menu/drawer_menu\"\n        android:layout_gravity=\"start\"/>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\nLinearLayoutの中にToolbarを入れました。\n\n## Toolbarにアイコンを付ける\nようやくKotlinでコーディングです。\nということでMainActivity.ktを開いてください。\n\n```kotlin:MainActivity.kt\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        //Toolbarを登録\n        setSupportActionBar(toolbar)\n\n        //ハンバーガーメニューのアイコンを実装\n        //第４、５引数はアクセシビリティで使うみたい。\n        val actionBarDrawerToggle = ActionBarDrawerToggle(\n            this, drawer_layout, toolbar, R.string.app_name, R.string.app_name\n        )\n        drawer_layout.addDrawerListener(actionBarDrawerToggle)\n        actionBarDrawerToggle.syncState()\n\n    }\n}\n```\n\nActionBarDrawerToggle()の第４、５引数はアクセシビリティで使うみたいです（ドキュメントによると）。\n今回は適当に入れました。\n\n出来たら実行してみてください。\nハンバーガーメニュー押しても開くし、端っこから左へスワイプでも開く＋だんだんアイコンが変化してくると思います。\n\n![Screenshot_20191107-224549.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/59b1491b-7923-1ec6-ba3b-a7b4b0318dfd.png)\n\n# ヘッダーを付ける\nヘッダーを付けるとメニューの上に何かViewを置くことができます。\n今回は適当に画像でも置いてみましょう。\n![Screenshot_20191107-225843.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/7d06b19b-f2e3-9951-3250-1eaa62883e09.png)\n\n\n## ヘッダーのレイアウト作成\nlayoutフォルダに**drawer_header_layout.xml**でレイアウトファイルを作成してください。\n画像はプロジェクトに入ってたものを使うことに。\n\n```xml:drawer_header_layout.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_margin=\"10sp\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\">\n\n    <ImageView\n        android:id=\"@+id/imageView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:srcCompat=\"@mipmap/ic_launcher_round\" />\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_vertical\"\n        android:layout_weight=\"1\"\n        android:text=\"ナビゲーションドロワーの練習です\" />\n</LinearLayout>\n```\n\n## ナビゲーションドロワーにヘッダーを入れる\nactivity_main.xmlを開いて、NavigationViewにapp:headerLayoutの属性？を付けます。\n\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.drawerlayout.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n\n        <androidx.appcompat.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"?attr/colorPrimary\"\n            android:minHeight=\"?attr/actionBarSize\"\n            android:theme=\"?attr/actionBarTheme\" />\n    </LinearLayout>\n\n    <com.google.android.material.navigation.NavigationView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/navigation_drawer\"\n        app:menu=\"@menu/drawer_menu\"\n        app:headerLayout=\"@layout/drawer_header_layout\"\n        android:layout_gravity=\"start\"/>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\n出来たら実行してみてください。\nメニューの上に画像が出てくると思います。\n\n![Screenshot_20191107-225843.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/7d06b19b-f2e3-9951-3250-1eaa62883e09.png)\n\n## ヘッダーをステータスバーの下まで潜れないの？\nできますよ～\n![Screenshot_20191107-230521.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/208826b5-ecd7-75b1-a41e-8f56ef413b4d.png)\n\nactivity_main.xmlを開いてください。\n変更点はDrawerLayoutにfitsSystemWindows属性がついた点ですね。    android:fitsSystemWindows=\"true\"を書き足すことでステータスバーの下へ侵略できます。\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.drawerlayout.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:fitsSystemWindows=\"true\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n\n        <androidx.appcompat.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"?attr/colorPrimary\"\n            android:minHeight=\"?attr/actionBarSize\"\n            android:theme=\"?attr/actionBarTheme\" />\n    </LinearLayout>\n\n    <com.google.android.material.navigation.NavigationView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/navigation_drawer\"\n        app:menu=\"@menu/drawer_menu\"\n        app:headerLayout=\"@layout/drawer_header_layout\"\n        android:layout_gravity=\"start\"/>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\nしかしこのままだとステータスバーの色のせいで見えなくなるのでステータスバーの色を透明にする必要があります。\nstyles.xmlを開いてドロワー用レイアウトへ属性を追加します。\n何を追加するのかって話ですがandroid:statusBarColorを追加します。値は```@android:color/transparent```（透明）です。\n\n\n```xml:styles.xml\n    <!-- ドロワー用レイアウト -->\n    <style name=\"DrawerTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n\n        <item name=\"windowActionBar\">false</item>\n        <item name=\"windowNoTitle\">true</item>\n        <item name=\"android:statusBarColor\">@android:color/transparent</item>\n\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n```\n\nこれで起動すればステータスバーの色が透明になって見れるようになります。\n![Screenshot_20191107-230521.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/208826b5-ecd7-75b1-a41e-8f56ef413b4d.png)\n\n# メニューを押したときに何かしたい\nこんな感じに\n\n```kotlin:MainActivity.kt\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        //Toolbarを登録\n        setSupportActionBar(toolbar)\n\n        //ハンバーガーメニューのアイコンを実装\n        //第４、５引数はアクセシビリティで使うみたい。\n        val actionBarDrawerToggle = ActionBarDrawerToggle(\n            this, drawer_layout, toolbar, R.string.app_name, R.string.app_name\n        )\n        drawer_layout.addDrawerListener(actionBarDrawerToggle)\n        actionBarDrawerToggle.syncState()\n\n        //メニューを押したとき\n        navigation_drawer.setNavigationItemSelectedListener {\n            when(it.itemId){\n                R.id.drawer_menu_java->{\n                    //java押したとき\n                    Snackbar.make(navigation_drawer,\"30億のデバイスで走るJava\",Snackbar.LENGTH_SHORT).show()\n                }\n                R.id.drawer_menu_kotlin->{\n                    //kotlin押したとき\n                    Snackbar.make(navigation_drawer,\"apply{}便利すぎる\",Snackbar.LENGTH_SHORT).show()\n                }\n                R.id.drawer_menu_js->{\n                    //JS押したとき\n                    Snackbar.make(navigation_drawer,\"undefined\",Snackbar.LENGTH_SHORT).show()\n                }\n            }\n            //押したらナビゲーションドロワーを閉じる\n            drawer_layout.closeDrawer(navigation_drawer)\n            true\n        }\n    }\n}\n```\n\nJavaを押したときSnackbarがでて「30億のデバイスで走るJava」と表示されれば成功です。おめでとう！\n\n# 終わりに\nナビゲーションドロワーのレイアウトを少し変えればばボタンとかおけます。\n複雑になりそうだけど。\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.drawerlayout.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:fitsSystemWindows=\"true\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n\n        <androidx.appcompat.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"?attr/colorPrimary\"\n            android:minHeight=\"?attr/actionBarSize\"\n            android:theme=\"?attr/actionBarTheme\" />\n    </LinearLayout>\n\n    <com.google.android.material.navigation.NavigationView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/navigation_drawer\"\n        android:layout_gravity=\"start\">\n\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:orientation=\"vertical\">\n\n            <ImageView\n                android:id=\"@+id/imageView2\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                app:srcCompat=\"@mipmap/ic_launcher_round\" />\n\n            <Button\n                android:layout_gravity=\"center_vertical\"\n                android:id=\"@+id/button\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"ボタンとかおけます。\" />\n        </LinearLayout>\n\n    </com.google.android.material.navigation.NavigationView>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\n![Screenshot_20191107-233906.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/421e765a-99cf-59ba-053c-374c35a3716c.png)\n\nそれからstyles.xmlのparentをTheme.MaterialComponents.Light.DarkActionBarにするとメニュー選択時が少し変わります。\n\n![Screenshot_20191107-234614.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/a1e21809-93b5-06bb-a8db-d7d9864a58e0.png)\n\n\nおつ！８８８８８８８８８８８８８８８。\n",
                "slug": "NavigationDrawer",
                "published": 1,
                "date": "2020-04-05T16:27:15.447Z",
                "updated": "2020-04-05T16:40:59.277Z",
                "comments": 1,
                "layout": "post",
                "photos": [],
                "link": "",
                "_id": "ck8r8f7c5000b28vuedrh1m4q",
                "content": "<p>どうも。こんばんわ</p>\n<h1 id=\"なにがあったのか\"><a href=\"#なにがあったのか\" class=\"headerlink\" title=\"なにがあったのか\"></a>なにがあったのか</h1><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/05545e12-a4c7-83ae-31b8-7c63a448b994.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>この画面からナビゲーションドロワーを作成すると前と違ってめっちゃフォルダ・ファイルが作成されるようになった。どゆこと</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/1d14c929-e9e5-6c41-90a6-47a5044c4241.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n\n<p>しかもbuild.gradleに書き足さないとエラーが出るってなんだよ。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target 1.6. Please specify proper &#39;-jvm-target&#39; option</span><br></pre></td></tr></table></figure>\n\n<p>このエラーはappフォルダにあるほうの<code>build.gradle</code>を開いて、android{}の波かっこの中に以下の文を書き足すことで動きます。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compileOptions &#123;</span><br><span class=\"line\">    <span class=\"keyword\">sourceCompatibility</span> = <span class=\"number\">1.8</span></span><br><span class=\"line\">    <span class=\"keyword\">targetCompatibility</span> = <span class=\"number\">1.8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">kotlinOptions &#123;</span><br><span class=\"line\">    jvmTarget = <span class=\"string\">\"1.8\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ということで今回は空の状態からナビゲーションドロワーを作っていこうと思います。<br>ViewModelなんて触ったことないので…</p>\n<h1 id=\"環境\"><a href=\"#環境\" class=\"headerlink\" title=\"環境\"></a>環境</h1><table>\n<thead>\n<tr>\n<th>なまえ</th>\n<th>なかみ</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Androidバージョン</td>\n<td>10</td>\n</tr>\n<tr>\n<td>Android Studioバージョン</td>\n<td>3.5</td>\n</tr>\n<tr>\n<td>端末</td>\n<td>Pixel 3 XL</td>\n</tr>\n<tr>\n<td>言語</td>\n<td>Kotlin(なのでfindViewByIdを使いません。)</td>\n</tr>\n</tbody></table>\n<h1 id=\"本題\"><a href=\"#本題\" class=\"headerlink\" title=\"本題\"></a>本題</h1><p>つくれたらappフォルダに入っているbuild.gradleを開いてマテリアルデザインのライブラリを入れます。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">'com.google.android.material:material:1.2.0-alpha01'</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"メニュー用意\"><a href=\"#メニュー用意\" class=\"headerlink\" title=\"メニュー用意\"></a>メニュー用意</h1><p>ナビゲーションドロワーに入れるメニューですね。</p>\n<p>resディレクトリを右クリックしてフォルダを作成してください。<br>名前を<strong>menu</strong>にしてね。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/b9133c44-8194-94f1-5589-42a9af9c82b2.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>作れたら<strong>menu</strong>フォルダの中に<strong>drawer_menu</strong>って名前で作ってね。（別にわかりやすい名前があるならそれでもいいよ。）</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/9808ba04-4b40-3977-f347-2825b549a126.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>そしたらその<strong>drawer_menu.xml</strong>を開いて適当にメニューを作成します。<br>が、その前にアイコンを持ってきましょう。</p>\n<h2 id=\"メニューに表示させるアイコンを用意する\"><a href=\"#メニューに表示させるアイコンを用意する\" class=\"headerlink\" title=\"メニューに表示させるアイコンを用意する\"></a>メニューに表示させるアイコンを用意する</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/3b1bba2d-037c-fce6-5c14-076de0882370.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>ベクターアセットからお好みの画像を持ってきてください。<br>今回は適当にドロイド君で</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/663e99a7-dd18-ebac-6278-d89d331e5035.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<h2 id=\"メニュー項目追加\"><a href=\"#メニュー項目追加\" class=\"headerlink\" title=\"メニュー項目追加\"></a>メニュー項目追加</h2><p>drawer_menu.xmlに書いてください。<br>itemを追加するときはtitle(必須)とid(識別に使う)は絶対書いてね。アイコンはいらないかもだけどあったほうがよさげ。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;menu xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</span><br><span class=\"line\">    &lt;group android:checkableBehavior&#x3D;&quot;single&quot;&gt;</span><br><span class=\"line\">        &lt;item android:icon&#x3D;&quot;@drawable&#x2F;ic_android_black_24dp&quot; android:title&#x3D;&quot;Java&quot; android:id&#x3D;&quot;@+id&#x2F;drawer_menu_java&quot; &#x2F;&gt;</span><br><span class=\"line\">        &lt;item android:icon&#x3D;&quot;@drawable&#x2F;ic_android_black_24dp&quot; android:title&#x3D;&quot;Kotlin&quot; android:id&#x3D;&quot;@+id&#x2F;drawer_menu_kotlin&quot;&#x2F;&gt;</span><br><span class=\"line\">        &lt;item android:icon&#x3D;&quot;@drawable&#x2F;ic_android_black_24dp&quot; android:title&#x3D;&quot;JS&quot; android:id&#x3D;&quot;@+id&#x2F;drawer_menu_js&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;group&gt;</span><br><span class=\"line\">&lt;&#x2F;menu&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"レイアウト作成\"><a href=\"#レイアウト作成\" class=\"headerlink\" title=\"レイアウト作成\"></a>レイアウト作成</h1><p>いよいよレイアウトですよ。レイアウト作るの楽しい。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text&#x3D;&quot;Hello World!&quot;</span><br><span class=\"line\">        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintLeft_toLeftOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintRight_toRightOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintTop_toTopOf&#x3D;&quot;parent&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>何もしていなければこのままですね。こっからドロワーを追加していきます。</p>\n<p>こう書き換えます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;androidx.drawerlayout.widget.DrawerLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text&#x3D;&quot;Hello World!&quot;</span><br><span class=\"line\">        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintLeft_toLeftOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintRight_toRightOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintTop_toTopOf&#x3D;&quot;parent&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.google.android.material.navigation.NavigationView</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;navigation_drawer&quot;</span><br><span class=\"line\">        app:menu&#x3D;&quot;@menu&#x2F;drawer_menu&quot;</span><br><span class=\"line\">        android:layout_gravity&#x3D;&quot;start&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>できたら実行してみてください。この段階ではまだ何もMainActivity.ktに手を付けてません。<br>起動出来たら端から左へスワイプしてみてください。メニューが出ると思います。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/6de175c5-27c9-72da-219c-54a99f8edf25.png\" alt=\"Screenshot_20191107-220921.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-220921.png</div>\n            </figure>\n\n<h2 id=\"Android-10でジェスチャーナビゲーション使ってるんですけど開けず戻るになる方へ\"><a href=\"#Android-10でジェスチャーナビゲーション使ってるんですけど開けず戻るになる方へ\" class=\"headerlink\" title=\"Android 10でジェスチャーナビゲーション使ってるんですけど開けず戻るになる方へ\"></a>Android 10でジェスチャーナビゲーション使ってるんですけど開けず戻るになる方へ</h2><p>左の端っこを長押しすると少しだけナビゲーションドロワーが出てくるのでそのままスワイプすればいいです。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/a6832bae-4805-f378-cf41-f956f2d839d7.png\" alt=\"Screenshot_20191107-220915.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-220915.png</div>\n            </figure>\n\n<p>ジェスチャーナビゲーションと相性悪い。ケースとかつけてると開くの大変。</p>\n<h1 id=\"ハンバーガーメニューをつくる\"><a href=\"#ハンバーガーメニューをつくる\" class=\"headerlink\" title=\"ハンバーガーメニューをつくる\"></a>ハンバーガーメニューをつくる</h1><p>この左上にある三本線のアイコンのことです。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/373a27b9-695b-babc-472a-ee0743d12acc.png\" alt=\"Screenshot_20191107-225021.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-225021.png</div>\n            </figure>\n\n\n<p>ハンバーガーメニューはナビゲーションドロワーを開く三本の横線のことです。海を渡るとハンバーガーメニューって呼ばれてるそうです。</p>\n<p>これは少し大変なので頑張っていきましょう。</p>\n<h2 id=\"styles-xmlを書き足す\"><a href=\"#styles-xmlを書き足す\" class=\"headerlink\" title=\"styles.xmlを書き足す\"></a>styles.xmlを書き足す</h2><p>こんな感じに</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- ドロワー用レイアウト --&gt;</span><br><span class=\"line\">    &lt;style name&#x3D;&quot;DrawerTheme&quot; parent&#x3D;&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;item name&#x3D;&quot;windowActionBar&quot;&gt;false&lt;&#x2F;item&gt;</span><br><span class=\"line\">        &lt;item name&#x3D;&quot;windowNoTitle&quot;&gt;true&lt;&#x2F;item&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;item name&#x3D;&quot;colorPrimary&quot;&gt;@color&#x2F;colorPrimary&lt;&#x2F;item&gt;</span><br><span class=\"line\">        &lt;item name&#x3D;&quot;colorPrimaryDark&quot;&gt;@color&#x2F;colorPrimaryDark&lt;&#x2F;item&gt;</span><br><span class=\"line\">        &lt;item name&#x3D;&quot;colorAccent&quot;&gt;@color&#x2F;colorAccent&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;&#x2F;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;resources&gt;</span><br></pre></td></tr></table></figure>\n\n<p>元からあるAppThemeは消しません。ナビゲーションドロワーを置いているActivityでのみ使うためです。<br>Activityを追加したときのためにAppThemeを残してあります。</p>\n<h2 id=\"Manifest書き換える\"><a href=\"#Manifest書き換える\" class=\"headerlink\" title=\"Manifest書き換える\"></a>Manifest書き換える</h2><p>AndroidManifest.xmlを開いてね。<br>開けたら以下の一行を探してください。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:theme&#x3D;&quot;@style&#x2F;AppTheme&quot;</span><br></pre></td></tr></table></figure>\n\n<p>これをさっき作った<strong>DrawerTheme</strong>へ書き換えます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:theme&#x3D;&quot;@style&#x2F;DrawerTheme&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ツールバーを設置\"><a href=\"#ツールバーを設置\" class=\"headerlink\" title=\"ツールバーを設置\"></a>ツールバーを設置</h2><p>ツールバーっていうのはアプリ名が書いてある上のバーのことです。<br>ツールバーはstyles.xmlで消す設定にしたのでレイアウトにツールバーを置く必要があります。</p>\n<p>ということで書き換えます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;androidx.drawerlayout.widget.DrawerLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:id&#x3D;&quot;@+id&#x2F;drawer_layout&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">            android:id&#x3D;&quot;@+id&#x2F;toolbar&quot;</span><br><span class=\"line\">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">            android:background&#x3D;&quot;?attr&#x2F;colorPrimary&quot;</span><br><span class=\"line\">            android:minHeight&#x3D;&quot;?attr&#x2F;actionBarSize&quot;</span><br><span class=\"line\">            android:theme&#x3D;&quot;?attr&#x2F;actionBarTheme&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.google.android.material.navigation.NavigationView</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;navigation_drawer&quot;</span><br><span class=\"line\">        app:menu&#x3D;&quot;@menu&#x2F;drawer_menu&quot;</span><br><span class=\"line\">        android:layout_gravity&#x3D;&quot;start&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>LinearLayoutの中にToolbarを入れました。</p>\n<h2 id=\"Toolbarにアイコンを付ける\"><a href=\"#Toolbarにアイコンを付ける\" class=\"headerlink\" title=\"Toolbarにアイコンを付ける\"></a>Toolbarにアイコンを付ける</h2><p>ようやくKotlinでコーディングです。<br>ということでMainActivity.ktを開いてください。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MainActivity : AppCompatActivity() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;Toolbarを登録</span><br><span class=\"line\">        setSupportActionBar(toolbar)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;ハンバーガーメニューのアイコンを実装</span><br><span class=\"line\">        &#x2F;&#x2F;第４、５引数はアクセシビリティで使うみたい。</span><br><span class=\"line\">        val actionBarDrawerToggle &#x3D; ActionBarDrawerToggle(</span><br><span class=\"line\">            this, drawer_layout, toolbar, R.string.app_name, R.string.app_name</span><br><span class=\"line\">        )</span><br><span class=\"line\">        drawer_layout.addDrawerListener(actionBarDrawerToggle)</span><br><span class=\"line\">        actionBarDrawerToggle.syncState()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ActionBarDrawerToggle()の第４、５引数はアクセシビリティで使うみたいです（ドキュメントによると）。<br>今回は適当に入れました。</p>\n<p>出来たら実行してみてください。<br>ハンバーガーメニュー押しても開くし、端っこから左へスワイプでも開く＋だんだんアイコンが変化してくると思います。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/59b1491b-7923-1ec6-ba3b-a7b4b0318dfd.png\" alt=\"Screenshot_20191107-224549.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-224549.png</div>\n            </figure>\n\n<h1 id=\"ヘッダーを付ける\"><a href=\"#ヘッダーを付ける\" class=\"headerlink\" title=\"ヘッダーを付ける\"></a>ヘッダーを付ける</h1><p>ヘッダーを付けるとメニューの上に何かViewを置くことができます。<br>今回は適当に画像でも置いてみましょう。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/7d06b19b-f2e3-9951-3250-1eaa62883e09.png\" alt=\"Screenshot_20191107-225843.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-225843.png</div>\n            </figure>\n\n\n<h2 id=\"ヘッダーのレイアウト作成\"><a href=\"#ヘッダーのレイアウト作成\" class=\"headerlink\" title=\"ヘッダーのレイアウト作成\"></a>ヘッダーのレイアウト作成</h2><p>layoutフォルダに<strong>drawer_header_layout.xml</strong>でレイアウトファイルを作成してください。<br>画像はプロジェクトに入ってたものを使うことに。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    android:layout_margin&#x3D;&quot;10sp&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;wrap_content&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;ImageView</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;imageView&quot;</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        app:srcCompat&#x3D;&quot;@mipmap&#x2F;ic_launcher_round&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;textView&quot;</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_gravity&#x3D;&quot;center_vertical&quot;</span><br><span class=\"line\">        android:layout_weight&#x3D;&quot;1&quot;</span><br><span class=\"line\">        android:text&#x3D;&quot;ナビゲーションドロワーの練習です&quot; &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ナビゲーションドロワーにヘッダーを入れる\"><a href=\"#ナビゲーションドロワーにヘッダーを入れる\" class=\"headerlink\" title=\"ナビゲーションドロワーにヘッダーを入れる\"></a>ナビゲーションドロワーにヘッダーを入れる</h2><p>activity_main.xmlを開いて、NavigationViewにapp:headerLayoutの属性？を付けます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;androidx.drawerlayout.widget.DrawerLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:id&#x3D;&quot;@+id&#x2F;drawer_layout&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">            android:id&#x3D;&quot;@+id&#x2F;toolbar&quot;</span><br><span class=\"line\">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">            android:background&#x3D;&quot;?attr&#x2F;colorPrimary&quot;</span><br><span class=\"line\">            android:minHeight&#x3D;&quot;?attr&#x2F;actionBarSize&quot;</span><br><span class=\"line\">            android:theme&#x3D;&quot;?attr&#x2F;actionBarTheme&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.google.android.material.navigation.NavigationView</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;navigation_drawer&quot;</span><br><span class=\"line\">        app:menu&#x3D;&quot;@menu&#x2F;drawer_menu&quot;</span><br><span class=\"line\">        app:headerLayout&#x3D;&quot;@layout&#x2F;drawer_header_layout&quot;</span><br><span class=\"line\">        android:layout_gravity&#x3D;&quot;start&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>出来たら実行してみてください。<br>メニューの上に画像が出てくると思います。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/7d06b19b-f2e3-9951-3250-1eaa62883e09.png\" alt=\"Screenshot_20191107-225843.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-225843.png</div>\n            </figure>\n\n<h2 id=\"ヘッダーをステータスバーの下まで潜れないの？\"><a href=\"#ヘッダーをステータスバーの下まで潜れないの？\" class=\"headerlink\" title=\"ヘッダーをステータスバーの下まで潜れないの？\"></a>ヘッダーをステータスバーの下まで潜れないの？</h2><p>できますよ～</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/208826b5-ecd7-75b1-a41e-8f56ef413b4d.png\" alt=\"Screenshot_20191107-230521.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-230521.png</div>\n            </figure>\n\n<p>activity_main.xmlを開いてください。<br>変更点はDrawerLayoutにfitsSystemWindows属性がついた点ですね。    android:fitsSystemWindows=”true”を書き足すことでステータスバーの下へ侵略できます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;androidx.drawerlayout.widget.DrawerLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:id&#x3D;&quot;@+id&#x2F;drawer_layout&quot;</span><br><span class=\"line\">    android:fitsSystemWindows&#x3D;&quot;true&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">            android:id&#x3D;&quot;@+id&#x2F;toolbar&quot;</span><br><span class=\"line\">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">            android:background&#x3D;&quot;?attr&#x2F;colorPrimary&quot;</span><br><span class=\"line\">            android:minHeight&#x3D;&quot;?attr&#x2F;actionBarSize&quot;</span><br><span class=\"line\">            android:theme&#x3D;&quot;?attr&#x2F;actionBarTheme&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.google.android.material.navigation.NavigationView</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;navigation_drawer&quot;</span><br><span class=\"line\">        app:menu&#x3D;&quot;@menu&#x2F;drawer_menu&quot;</span><br><span class=\"line\">        app:headerLayout&#x3D;&quot;@layout&#x2F;drawer_header_layout&quot;</span><br><span class=\"line\">        android:layout_gravity&#x3D;&quot;start&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>しかしこのままだとステータスバーの色のせいで見えなくなるのでステータスバーの色を透明にする必要があります。<br>styles.xmlを開いてドロワー用レイアウトへ属性を追加します。<br>何を追加するのかって話ですがandroid:statusBarColorを追加します。値は<code>@android:color/transparent</code>（透明）です。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- ドロワー用レイアウト --&gt;</span><br><span class=\"line\">&lt;style name&#x3D;&quot;DrawerTheme&quot; parent&#x3D;&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;item name&#x3D;&quot;windowActionBar&quot;&gt;false&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;windowNoTitle&quot;&gt;true&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;android:statusBarColor&quot;&gt;@android:color&#x2F;transparent&lt;&#x2F;item&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;item name&#x3D;&quot;colorPrimary&quot;&gt;@color&#x2F;colorPrimary&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;colorPrimaryDark&quot;&gt;@color&#x2F;colorPrimaryDark&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;colorAccent&quot;&gt;@color&#x2F;colorAccent&lt;&#x2F;item&gt;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>これで起動すればステータスバーの色が透明になって見れるようになります。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/208826b5-ecd7-75b1-a41e-8f56ef413b4d.png\" alt=\"Screenshot_20191107-230521.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-230521.png</div>\n            </figure>\n\n<h1 id=\"メニューを押したときに何かしたい\"><a href=\"#メニューを押したときに何かしたい\" class=\"headerlink\" title=\"メニューを押したときに何かしたい\"></a>メニューを押したときに何かしたい</h1><p>こんな感じに</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MainActivity : AppCompatActivity() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;Toolbarを登録</span><br><span class=\"line\">        setSupportActionBar(toolbar)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;ハンバーガーメニューのアイコンを実装</span><br><span class=\"line\">        &#x2F;&#x2F;第４、５引数はアクセシビリティで使うみたい。</span><br><span class=\"line\">        val actionBarDrawerToggle &#x3D; ActionBarDrawerToggle(</span><br><span class=\"line\">            this, drawer_layout, toolbar, R.string.app_name, R.string.app_name</span><br><span class=\"line\">        )</span><br><span class=\"line\">        drawer_layout.addDrawerListener(actionBarDrawerToggle)</span><br><span class=\"line\">        actionBarDrawerToggle.syncState()</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;メニューを押したとき</span><br><span class=\"line\">        navigation_drawer.setNavigationItemSelectedListener &#123;</span><br><span class=\"line\">            when(it.itemId)&#123;</span><br><span class=\"line\">                R.id.drawer_menu_java-&gt;&#123;</span><br><span class=\"line\">                    &#x2F;&#x2F;java押したとき</span><br><span class=\"line\">                    Snackbar.make(navigation_drawer,&quot;30億のデバイスで走るJava&quot;,Snackbar.LENGTH_SHORT).show()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                R.id.drawer_menu_kotlin-&gt;&#123;</span><br><span class=\"line\">                    &#x2F;&#x2F;kotlin押したとき</span><br><span class=\"line\">                    Snackbar.make(navigation_drawer,&quot;apply&#123;&#125;便利すぎる&quot;,Snackbar.LENGTH_SHORT).show()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                R.id.drawer_menu_js-&gt;&#123;</span><br><span class=\"line\">                    &#x2F;&#x2F;JS押したとき</span><br><span class=\"line\">                    Snackbar.make(navigation_drawer,&quot;undefined&quot;,Snackbar.LENGTH_SHORT).show()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#x2F;&#x2F;押したらナビゲーションドロワーを閉じる</span><br><span class=\"line\">            drawer_layout.closeDrawer(navigation_drawer)</span><br><span class=\"line\">            true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Javaを押したときSnackbarがでて「30億のデバイスで走るJava」と表示されれば成功です。おめでとう！</p>\n<h1 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h1><p>ナビゲーションドロワーのレイアウトを少し変えればばボタンとかおけます。<br>複雑になりそうだけど。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;androidx.drawerlayout.widget.DrawerLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:id&#x3D;&quot;@+id&#x2F;drawer_layout&quot;</span><br><span class=\"line\">    android:fitsSystemWindows&#x3D;&quot;true&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">            android:id&#x3D;&quot;@+id&#x2F;toolbar&quot;</span><br><span class=\"line\">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">            android:background&#x3D;&quot;?attr&#x2F;colorPrimary&quot;</span><br><span class=\"line\">            android:minHeight&#x3D;&quot;?attr&#x2F;actionBarSize&quot;</span><br><span class=\"line\">            android:theme&#x3D;&quot;?attr&#x2F;actionBarTheme&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.google.android.material.navigation.NavigationView</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;navigation_drawer&quot;</span><br><span class=\"line\">        android:layout_gravity&#x3D;&quot;start&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;LinearLayout</span><br><span class=\"line\">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">            android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;ImageView</span><br><span class=\"line\">                android:id&#x3D;&quot;@+id&#x2F;imageView2&quot;</span><br><span class=\"line\">                android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">                android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">                app:srcCompat&#x3D;&quot;@mipmap&#x2F;ic_launcher_round&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;Button</span><br><span class=\"line\">                android:layout_gravity&#x3D;&quot;center_vertical&quot;</span><br><span class=\"line\">                android:id&#x3D;&quot;@+id&#x2F;button&quot;</span><br><span class=\"line\">                android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">                android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">                android:text&#x3D;&quot;ボタンとかおけます。&quot; &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;com.google.android.material.navigation.NavigationView&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/421e765a-99cf-59ba-053c-374c35a3716c.png\" alt=\"Screenshot_20191107-233906.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-233906.png</div>\n            </figure>\n\n<p>それからstyles.xmlのparentをTheme.MaterialComponents.Light.DarkActionBarにするとメニュー選択時が少し変わります。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/a1e21809-93b5-06bb-a8db-d7d9864a58e0.png\" alt=\"Screenshot_20191107-234614.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-234614.png</div>\n            </figure>\n\n\n<p>おつ！８８８８８８８８８８８８８８８。</p>\n",
                "site": {
                    "data": {}
                },
                "excerpt": "",
                "more": "<p>どうも。こんばんわ</p>\n<h1 id=\"なにがあったのか\"><a href=\"#なにがあったのか\" class=\"headerlink\" title=\"なにがあったのか\"></a>なにがあったのか</h1><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/05545e12-a4c7-83ae-31b8-7c63a448b994.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>この画面からナビゲーションドロワーを作成すると前と違ってめっちゃフォルダ・ファイルが作成されるようになった。どゆこと</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/1d14c929-e9e5-6c41-90a6-47a5044c4241.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n\n<p>しかもbuild.gradleに書き足さないとエラーが出るってなんだよ。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target 1.6. Please specify proper &#39;-jvm-target&#39; option</span><br></pre></td></tr></table></figure>\n\n<p>このエラーはappフォルダにあるほうの<code>build.gradle</code>を開いて、android{}の波かっこの中に以下の文を書き足すことで動きます。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compileOptions &#123;</span><br><span class=\"line\">    <span class=\"keyword\">sourceCompatibility</span> = <span class=\"number\">1.8</span></span><br><span class=\"line\">    <span class=\"keyword\">targetCompatibility</span> = <span class=\"number\">1.8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">kotlinOptions &#123;</span><br><span class=\"line\">    jvmTarget = <span class=\"string\">\"1.8\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ということで今回は空の状態からナビゲーションドロワーを作っていこうと思います。<br>ViewModelなんて触ったことないので…</p>\n<h1 id=\"環境\"><a href=\"#環境\" class=\"headerlink\" title=\"環境\"></a>環境</h1><table>\n<thead>\n<tr>\n<th>なまえ</th>\n<th>なかみ</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Androidバージョン</td>\n<td>10</td>\n</tr>\n<tr>\n<td>Android Studioバージョン</td>\n<td>3.5</td>\n</tr>\n<tr>\n<td>端末</td>\n<td>Pixel 3 XL</td>\n</tr>\n<tr>\n<td>言語</td>\n<td>Kotlin(なのでfindViewByIdを使いません。)</td>\n</tr>\n</tbody></table>\n<h1 id=\"本題\"><a href=\"#本題\" class=\"headerlink\" title=\"本題\"></a>本題</h1><p>つくれたらappフォルダに入っているbuild.gradleを開いてマテリアルデザインのライブラリを入れます。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">'com.google.android.material:material:1.2.0-alpha01'</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"メニュー用意\"><a href=\"#メニュー用意\" class=\"headerlink\" title=\"メニュー用意\"></a>メニュー用意</h1><p>ナビゲーションドロワーに入れるメニューですね。</p>\n<p>resディレクトリを右クリックしてフォルダを作成してください。<br>名前を<strong>menu</strong>にしてね。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/b9133c44-8194-94f1-5589-42a9af9c82b2.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>作れたら<strong>menu</strong>フォルダの中に<strong>drawer_menu</strong>って名前で作ってね。（別にわかりやすい名前があるならそれでもいいよ。）</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/9808ba04-4b40-3977-f347-2825b549a126.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>そしたらその<strong>drawer_menu.xml</strong>を開いて適当にメニューを作成します。<br>が、その前にアイコンを持ってきましょう。</p>\n<h2 id=\"メニューに表示させるアイコンを用意する\"><a href=\"#メニューに表示させるアイコンを用意する\" class=\"headerlink\" title=\"メニューに表示させるアイコンを用意する\"></a>メニューに表示させるアイコンを用意する</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/3b1bba2d-037c-fce6-5c14-076de0882370.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<p>ベクターアセットからお好みの画像を持ってきてください。<br>今回は適当にドロイド君で</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/663e99a7-dd18-ebac-6278-d89d331e5035.png\" alt=\"image.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">image.png</div>\n            </figure>\n\n<h2 id=\"メニュー項目追加\"><a href=\"#メニュー項目追加\" class=\"headerlink\" title=\"メニュー項目追加\"></a>メニュー項目追加</h2><p>drawer_menu.xmlに書いてください。<br>itemを追加するときはtitle(必須)とid(識別に使う)は絶対書いてね。アイコンはいらないかもだけどあったほうがよさげ。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;menu xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</span><br><span class=\"line\">    &lt;group android:checkableBehavior&#x3D;&quot;single&quot;&gt;</span><br><span class=\"line\">        &lt;item android:icon&#x3D;&quot;@drawable&#x2F;ic_android_black_24dp&quot; android:title&#x3D;&quot;Java&quot; android:id&#x3D;&quot;@+id&#x2F;drawer_menu_java&quot; &#x2F;&gt;</span><br><span class=\"line\">        &lt;item android:icon&#x3D;&quot;@drawable&#x2F;ic_android_black_24dp&quot; android:title&#x3D;&quot;Kotlin&quot; android:id&#x3D;&quot;@+id&#x2F;drawer_menu_kotlin&quot;&#x2F;&gt;</span><br><span class=\"line\">        &lt;item android:icon&#x3D;&quot;@drawable&#x2F;ic_android_black_24dp&quot; android:title&#x3D;&quot;JS&quot; android:id&#x3D;&quot;@+id&#x2F;drawer_menu_js&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;group&gt;</span><br><span class=\"line\">&lt;&#x2F;menu&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"レイアウト作成\"><a href=\"#レイアウト作成\" class=\"headerlink\" title=\"レイアウト作成\"></a>レイアウト作成</h1><p>いよいよレイアウトですよ。レイアウト作るの楽しい。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text&#x3D;&quot;Hello World!&quot;</span><br><span class=\"line\">        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintLeft_toLeftOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintRight_toRightOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintTop_toTopOf&#x3D;&quot;parent&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>何もしていなければこのままですね。こっからドロワーを追加していきます。</p>\n<p>こう書き換えます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;androidx.drawerlayout.widget.DrawerLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text&#x3D;&quot;Hello World!&quot;</span><br><span class=\"line\">        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintLeft_toLeftOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintRight_toRightOf&#x3D;&quot;parent&quot;</span><br><span class=\"line\">        app:layout_constraintTop_toTopOf&#x3D;&quot;parent&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.google.android.material.navigation.NavigationView</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;navigation_drawer&quot;</span><br><span class=\"line\">        app:menu&#x3D;&quot;@menu&#x2F;drawer_menu&quot;</span><br><span class=\"line\">        android:layout_gravity&#x3D;&quot;start&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>できたら実行してみてください。この段階ではまだ何もMainActivity.ktに手を付けてません。<br>起動出来たら端から左へスワイプしてみてください。メニューが出ると思います。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/6de175c5-27c9-72da-219c-54a99f8edf25.png\" alt=\"Screenshot_20191107-220921.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-220921.png</div>\n            </figure>\n\n<h2 id=\"Android-10でジェスチャーナビゲーション使ってるんですけど開けず戻るになる方へ\"><a href=\"#Android-10でジェスチャーナビゲーション使ってるんですけど開けず戻るになる方へ\" class=\"headerlink\" title=\"Android 10でジェスチャーナビゲーション使ってるんですけど開けず戻るになる方へ\"></a>Android 10でジェスチャーナビゲーション使ってるんですけど開けず戻るになる方へ</h2><p>左の端っこを長押しすると少しだけナビゲーションドロワーが出てくるのでそのままスワイプすればいいです。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/a6832bae-4805-f378-cf41-f956f2d839d7.png\" alt=\"Screenshot_20191107-220915.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-220915.png</div>\n            </figure>\n\n<p>ジェスチャーナビゲーションと相性悪い。ケースとかつけてると開くの大変。</p>\n<h1 id=\"ハンバーガーメニューをつくる\"><a href=\"#ハンバーガーメニューをつくる\" class=\"headerlink\" title=\"ハンバーガーメニューをつくる\"></a>ハンバーガーメニューをつくる</h1><p>この左上にある三本線のアイコンのことです。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/373a27b9-695b-babc-472a-ee0743d12acc.png\" alt=\"Screenshot_20191107-225021.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-225021.png</div>\n            </figure>\n\n\n<p>ハンバーガーメニューはナビゲーションドロワーを開く三本の横線のことです。海を渡るとハンバーガーメニューって呼ばれてるそうです。</p>\n<p>これは少し大変なので頑張っていきましょう。</p>\n<h2 id=\"styles-xmlを書き足す\"><a href=\"#styles-xmlを書き足す\" class=\"headerlink\" title=\"styles.xmlを書き足す\"></a>styles.xmlを書き足す</h2><p>こんな感じに</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- ドロワー用レイアウト --&gt;</span><br><span class=\"line\">    &lt;style name&#x3D;&quot;DrawerTheme&quot; parent&#x3D;&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;item name&#x3D;&quot;windowActionBar&quot;&gt;false&lt;&#x2F;item&gt;</span><br><span class=\"line\">        &lt;item name&#x3D;&quot;windowNoTitle&quot;&gt;true&lt;&#x2F;item&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;item name&#x3D;&quot;colorPrimary&quot;&gt;@color&#x2F;colorPrimary&lt;&#x2F;item&gt;</span><br><span class=\"line\">        &lt;item name&#x3D;&quot;colorPrimaryDark&quot;&gt;@color&#x2F;colorPrimaryDark&lt;&#x2F;item&gt;</span><br><span class=\"line\">        &lt;item name&#x3D;&quot;colorAccent&quot;&gt;@color&#x2F;colorAccent&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;&#x2F;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;resources&gt;</span><br></pre></td></tr></table></figure>\n\n<p>元からあるAppThemeは消しません。ナビゲーションドロワーを置いているActivityでのみ使うためです。<br>Activityを追加したときのためにAppThemeを残してあります。</p>\n<h2 id=\"Manifest書き換える\"><a href=\"#Manifest書き換える\" class=\"headerlink\" title=\"Manifest書き換える\"></a>Manifest書き換える</h2><p>AndroidManifest.xmlを開いてね。<br>開けたら以下の一行を探してください。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:theme&#x3D;&quot;@style&#x2F;AppTheme&quot;</span><br></pre></td></tr></table></figure>\n\n<p>これをさっき作った<strong>DrawerTheme</strong>へ書き換えます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:theme&#x3D;&quot;@style&#x2F;DrawerTheme&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ツールバーを設置\"><a href=\"#ツールバーを設置\" class=\"headerlink\" title=\"ツールバーを設置\"></a>ツールバーを設置</h2><p>ツールバーっていうのはアプリ名が書いてある上のバーのことです。<br>ツールバーはstyles.xmlで消す設定にしたのでレイアウトにツールバーを置く必要があります。</p>\n<p>ということで書き換えます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;androidx.drawerlayout.widget.DrawerLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:id&#x3D;&quot;@+id&#x2F;drawer_layout&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">            android:id&#x3D;&quot;@+id&#x2F;toolbar&quot;</span><br><span class=\"line\">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">            android:background&#x3D;&quot;?attr&#x2F;colorPrimary&quot;</span><br><span class=\"line\">            android:minHeight&#x3D;&quot;?attr&#x2F;actionBarSize&quot;</span><br><span class=\"line\">            android:theme&#x3D;&quot;?attr&#x2F;actionBarTheme&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.google.android.material.navigation.NavigationView</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;navigation_drawer&quot;</span><br><span class=\"line\">        app:menu&#x3D;&quot;@menu&#x2F;drawer_menu&quot;</span><br><span class=\"line\">        android:layout_gravity&#x3D;&quot;start&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>LinearLayoutの中にToolbarを入れました。</p>\n<h2 id=\"Toolbarにアイコンを付ける\"><a href=\"#Toolbarにアイコンを付ける\" class=\"headerlink\" title=\"Toolbarにアイコンを付ける\"></a>Toolbarにアイコンを付ける</h2><p>ようやくKotlinでコーディングです。<br>ということでMainActivity.ktを開いてください。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MainActivity : AppCompatActivity() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;Toolbarを登録</span><br><span class=\"line\">        setSupportActionBar(toolbar)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;ハンバーガーメニューのアイコンを実装</span><br><span class=\"line\">        &#x2F;&#x2F;第４、５引数はアクセシビリティで使うみたい。</span><br><span class=\"line\">        val actionBarDrawerToggle &#x3D; ActionBarDrawerToggle(</span><br><span class=\"line\">            this, drawer_layout, toolbar, R.string.app_name, R.string.app_name</span><br><span class=\"line\">        )</span><br><span class=\"line\">        drawer_layout.addDrawerListener(actionBarDrawerToggle)</span><br><span class=\"line\">        actionBarDrawerToggle.syncState()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ActionBarDrawerToggle()の第４、５引数はアクセシビリティで使うみたいです（ドキュメントによると）。<br>今回は適当に入れました。</p>\n<p>出来たら実行してみてください。<br>ハンバーガーメニュー押しても開くし、端っこから左へスワイプでも開く＋だんだんアイコンが変化してくると思います。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/59b1491b-7923-1ec6-ba3b-a7b4b0318dfd.png\" alt=\"Screenshot_20191107-224549.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-224549.png</div>\n            </figure>\n\n<h1 id=\"ヘッダーを付ける\"><a href=\"#ヘッダーを付ける\" class=\"headerlink\" title=\"ヘッダーを付ける\"></a>ヘッダーを付ける</h1><p>ヘッダーを付けるとメニューの上に何かViewを置くことができます。<br>今回は適当に画像でも置いてみましょう。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/7d06b19b-f2e3-9951-3250-1eaa62883e09.png\" alt=\"Screenshot_20191107-225843.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-225843.png</div>\n            </figure>\n\n\n<h2 id=\"ヘッダーのレイアウト作成\"><a href=\"#ヘッダーのレイアウト作成\" class=\"headerlink\" title=\"ヘッダーのレイアウト作成\"></a>ヘッダーのレイアウト作成</h2><p>layoutフォルダに<strong>drawer_header_layout.xml</strong>でレイアウトファイルを作成してください。<br>画像はプロジェクトに入ってたものを使うことに。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    android:layout_margin&#x3D;&quot;10sp&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;wrap_content&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;ImageView</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;imageView&quot;</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        app:srcCompat&#x3D;&quot;@mipmap&#x2F;ic_launcher_round&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;textView&quot;</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_gravity&#x3D;&quot;center_vertical&quot;</span><br><span class=\"line\">        android:layout_weight&#x3D;&quot;1&quot;</span><br><span class=\"line\">        android:text&#x3D;&quot;ナビゲーションドロワーの練習です&quot; &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ナビゲーションドロワーにヘッダーを入れる\"><a href=\"#ナビゲーションドロワーにヘッダーを入れる\" class=\"headerlink\" title=\"ナビゲーションドロワーにヘッダーを入れる\"></a>ナビゲーションドロワーにヘッダーを入れる</h2><p>activity_main.xmlを開いて、NavigationViewにapp:headerLayoutの属性？を付けます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;androidx.drawerlayout.widget.DrawerLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:id&#x3D;&quot;@+id&#x2F;drawer_layout&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">            android:id&#x3D;&quot;@+id&#x2F;toolbar&quot;</span><br><span class=\"line\">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">            android:background&#x3D;&quot;?attr&#x2F;colorPrimary&quot;</span><br><span class=\"line\">            android:minHeight&#x3D;&quot;?attr&#x2F;actionBarSize&quot;</span><br><span class=\"line\">            android:theme&#x3D;&quot;?attr&#x2F;actionBarTheme&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.google.android.material.navigation.NavigationView</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;navigation_drawer&quot;</span><br><span class=\"line\">        app:menu&#x3D;&quot;@menu&#x2F;drawer_menu&quot;</span><br><span class=\"line\">        app:headerLayout&#x3D;&quot;@layout&#x2F;drawer_header_layout&quot;</span><br><span class=\"line\">        android:layout_gravity&#x3D;&quot;start&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>出来たら実行してみてください。<br>メニューの上に画像が出てくると思います。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/7d06b19b-f2e3-9951-3250-1eaa62883e09.png\" alt=\"Screenshot_20191107-225843.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-225843.png</div>\n            </figure>\n\n<h2 id=\"ヘッダーをステータスバーの下まで潜れないの？\"><a href=\"#ヘッダーをステータスバーの下まで潜れないの？\" class=\"headerlink\" title=\"ヘッダーをステータスバーの下まで潜れないの？\"></a>ヘッダーをステータスバーの下まで潜れないの？</h2><p>できますよ～</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/208826b5-ecd7-75b1-a41e-8f56ef413b4d.png\" alt=\"Screenshot_20191107-230521.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-230521.png</div>\n            </figure>\n\n<p>activity_main.xmlを開いてください。<br>変更点はDrawerLayoutにfitsSystemWindows属性がついた点ですね。    android:fitsSystemWindows=”true”を書き足すことでステータスバーの下へ侵略できます。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;androidx.drawerlayout.widget.DrawerLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:id&#x3D;&quot;@+id&#x2F;drawer_layout&quot;</span><br><span class=\"line\">    android:fitsSystemWindows&#x3D;&quot;true&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">            android:id&#x3D;&quot;@+id&#x2F;toolbar&quot;</span><br><span class=\"line\">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">            android:background&#x3D;&quot;?attr&#x2F;colorPrimary&quot;</span><br><span class=\"line\">            android:minHeight&#x3D;&quot;?attr&#x2F;actionBarSize&quot;</span><br><span class=\"line\">            android:theme&#x3D;&quot;?attr&#x2F;actionBarTheme&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.google.android.material.navigation.NavigationView</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;navigation_drawer&quot;</span><br><span class=\"line\">        app:menu&#x3D;&quot;@menu&#x2F;drawer_menu&quot;</span><br><span class=\"line\">        app:headerLayout&#x3D;&quot;@layout&#x2F;drawer_header_layout&quot;</span><br><span class=\"line\">        android:layout_gravity&#x3D;&quot;start&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p>しかしこのままだとステータスバーの色のせいで見えなくなるのでステータスバーの色を透明にする必要があります。<br>styles.xmlを開いてドロワー用レイアウトへ属性を追加します。<br>何を追加するのかって話ですがandroid:statusBarColorを追加します。値は<code>@android:color/transparent</code>（透明）です。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- ドロワー用レイアウト --&gt;</span><br><span class=\"line\">&lt;style name&#x3D;&quot;DrawerTheme&quot; parent&#x3D;&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;item name&#x3D;&quot;windowActionBar&quot;&gt;false&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;windowNoTitle&quot;&gt;true&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;android:statusBarColor&quot;&gt;@android:color&#x2F;transparent&lt;&#x2F;item&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;item name&#x3D;&quot;colorPrimary&quot;&gt;@color&#x2F;colorPrimary&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;colorPrimaryDark&quot;&gt;@color&#x2F;colorPrimaryDark&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;colorAccent&quot;&gt;@color&#x2F;colorAccent&lt;&#x2F;item&gt;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>これで起動すればステータスバーの色が透明になって見れるようになります。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/208826b5-ecd7-75b1-a41e-8f56ef413b4d.png\" alt=\"Screenshot_20191107-230521.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-230521.png</div>\n            </figure>\n\n<h1 id=\"メニューを押したときに何かしたい\"><a href=\"#メニューを押したときに何かしたい\" class=\"headerlink\" title=\"メニューを押したときに何かしたい\"></a>メニューを押したときに何かしたい</h1><p>こんな感じに</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MainActivity : AppCompatActivity() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;Toolbarを登録</span><br><span class=\"line\">        setSupportActionBar(toolbar)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;ハンバーガーメニューのアイコンを実装</span><br><span class=\"line\">        &#x2F;&#x2F;第４、５引数はアクセシビリティで使うみたい。</span><br><span class=\"line\">        val actionBarDrawerToggle &#x3D; ActionBarDrawerToggle(</span><br><span class=\"line\">            this, drawer_layout, toolbar, R.string.app_name, R.string.app_name</span><br><span class=\"line\">        )</span><br><span class=\"line\">        drawer_layout.addDrawerListener(actionBarDrawerToggle)</span><br><span class=\"line\">        actionBarDrawerToggle.syncState()</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;メニューを押したとき</span><br><span class=\"line\">        navigation_drawer.setNavigationItemSelectedListener &#123;</span><br><span class=\"line\">            when(it.itemId)&#123;</span><br><span class=\"line\">                R.id.drawer_menu_java-&gt;&#123;</span><br><span class=\"line\">                    &#x2F;&#x2F;java押したとき</span><br><span class=\"line\">                    Snackbar.make(navigation_drawer,&quot;30億のデバイスで走るJava&quot;,Snackbar.LENGTH_SHORT).show()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                R.id.drawer_menu_kotlin-&gt;&#123;</span><br><span class=\"line\">                    &#x2F;&#x2F;kotlin押したとき</span><br><span class=\"line\">                    Snackbar.make(navigation_drawer,&quot;apply&#123;&#125;便利すぎる&quot;,Snackbar.LENGTH_SHORT).show()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                R.id.drawer_menu_js-&gt;&#123;</span><br><span class=\"line\">                    &#x2F;&#x2F;JS押したとき</span><br><span class=\"line\">                    Snackbar.make(navigation_drawer,&quot;undefined&quot;,Snackbar.LENGTH_SHORT).show()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#x2F;&#x2F;押したらナビゲーションドロワーを閉じる</span><br><span class=\"line\">            drawer_layout.closeDrawer(navigation_drawer)</span><br><span class=\"line\">            true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Javaを押したときSnackbarがでて「30億のデバイスで走るJava」と表示されれば成功です。おめでとう！</p>\n<h1 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h1><p>ナビゲーションドロワーのレイアウトを少し変えればばボタンとかおけます。<br>複雑になりそうだけど。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;androidx.drawerlayout.widget.DrawerLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    android:id&#x3D;&quot;@+id&#x2F;drawer_layout&quot;</span><br><span class=\"line\">    android:fitsSystemWindows&#x3D;&quot;true&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">            android:id&#x3D;&quot;@+id&#x2F;toolbar&quot;</span><br><span class=\"line\">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">            android:background&#x3D;&quot;?attr&#x2F;colorPrimary&quot;</span><br><span class=\"line\">            android:minHeight&#x3D;&quot;?attr&#x2F;actionBarSize&quot;</span><br><span class=\"line\">            android:theme&#x3D;&quot;?attr&#x2F;actionBarTheme&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;com.google.android.material.navigation.NavigationView</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;navigation_drawer&quot;</span><br><span class=\"line\">        android:layout_gravity&#x3D;&quot;start&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;LinearLayout</span><br><span class=\"line\">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">            android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;ImageView</span><br><span class=\"line\">                android:id&#x3D;&quot;@+id&#x2F;imageView2&quot;</span><br><span class=\"line\">                android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">                android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">                app:srcCompat&#x3D;&quot;@mipmap&#x2F;ic_launcher_round&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;Button</span><br><span class=\"line\">                android:layout_gravity&#x3D;&quot;center_vertical&quot;</span><br><span class=\"line\">                android:id&#x3D;&quot;@+id&#x2F;button&quot;</span><br><span class=\"line\">                android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">                android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">                android:text&#x3D;&quot;ボタンとかおけます。&quot; &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;com.google.android.material.navigation.NavigationView&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/421e765a-99cf-59ba-053c-374c35a3716c.png\" alt=\"Screenshot_20191107-233906.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-233906.png</div>\n            </figure>\n\n<p>それからstyles.xmlのparentをTheme.MaterialComponents.Light.DarkActionBarにするとメニュー選択時が少し変わります。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/409918/a1e21809-93b5-06bb-a8db-d7d9864a58e0.png\" alt=\"Screenshot_20191107-234614.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Screenshot_20191107-234614.png</div>\n            </figure>\n\n\n<p>おつ！８８８８８８８８８８８８８８８。</p>\n"
            },
            {
                "title": "Hello World",
                "_content": "Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n",
                "source": "_posts/hello-world.md",
                "raw": "---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n",
                "slug": "hello-world",
                "published": 1,
                "date": "2020-04-05T14:02:45.837Z",
                "updated": "2020-04-05T14:02:45.840Z",
                "comments": 1,
                "layout": "post",
                "photos": [],
                "link": "",
                "_id": "ck8r8f7ca000d28vuf77k2ooq",
                "content": "<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n",
                "site": {
                    "data": {}
                },
                "excerpt": "",
                "more": "<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"
            },
            {
                "title": "hello",
                "date": "2020-04-05T15:30:57.000Z",
                "_content": "# こんばんは\nテストだよ",
                "source": "_posts/hello.md",
                "raw": "---\ntitle: hello\ndate: 2020-04-06 00:30:57\ntags: 'その他'\n---\n# こんばんは\nテストだよ",
                "slug": "hello",
                "published": 1,
                "updated": "2020-04-05T16:24:10.395Z",
                "comments": 1,
                "layout": "post",
                "photos": [],
                "link": "",
                "_id": "ck8r8f7cb000f28vua94o3g38",
                "content": "<h1 id=\"こんばんは\"><a href=\"#こんばんは\" class=\"headerlink\" title=\"こんばんは\"></a>こんばんは</h1><p>テストだよ</p>\n",
                "site": {
                    "data": {}
                },
                "excerpt": "",
                "more": "<h1 id=\"こんばんは\"><a href=\"#こんばんは\" class=\"headerlink\" title=\"こんばんは\"></a>こんばんは</h1><p>テストだよ</p>\n"
            },
            {
                "_content": "# なんかかく\nとりあえず気に入ってる自分の書いたQiitaの記事でも残すかな",
                "source": "_posts/はじめて.md",
                "raw": "# なんかかく\nとりあえず気に入ってる自分の書いたQiitaの記事でも残すかな",
                "slug": "はじめて",
                "published": 1,
                "date": "2020-04-05T16:27:15.481Z",
                "updated": "2020-04-05T16:27:15.486Z",
                "title": "はじめて",
                "comments": 1,
                "layout": "post",
                "photos": [],
                "link": "",
                "_id": "ck8r8f7cc000i28vufq0sb2sh",
                "content": "<h1 id=\"なんかかく\"><a href=\"#なんかかく\" class=\"headerlink\" title=\"なんかかく\"></a>なんかかく</h1><p>とりあえず気に入ってる自分の書いたQiitaの記事でも残すかな</p>\n",
                "site": {
                    "data": {}
                },
                "excerpt": "",
                "more": "<h1 id=\"なんかかく\"><a href=\"#なんかかく\" class=\"headerlink\" title=\"なんかかく\"></a>なんかかく</h1><p>とりあえず気に入ってる自分の書いたQiitaの記事でも残すかな</p>\n"
            }
        ],
        "PostAsset": [],
        "PostCategory": [],
        "PostTag": [
            {
                "post_id": "ck8r8f7bs000028vu9j9u8ezt",
                "tag_id": "ck8r8f7bx000228vub4zh29at",
                "_id": "ck8r8f7cb000e28vu8gp06ive"
            },
            {
                "post_id": "ck8r8f7bs000028vu9j9u8ezt",
                "tag_id": "ck8r8f7c1000628vud4w14wcu",
                "_id": "ck8r8f7cc000g28vubp43cb7u"
            },
            {
                "post_id": "ck8r8f7bs000028vu9j9u8ezt",
                "tag_id": "ck8r8f7c3000928vu1r2rhkij",
                "_id": "ck8r8f7cd000j28vu3ncg8sy6"
            },
            {
                "post_id": "ck8r8f7bz000328vufn681f62",
                "tag_id": "ck8r8f7bx000228vub4zh29at",
                "_id": "ck8r8f7cf000m28vu1xrkeiup"
            },
            {
                "post_id": "ck8r8f7bz000328vufn681f62",
                "tag_id": "ck8r8f7cc000h28vu8tz4d1pi",
                "_id": "ck8r8f7cf000n28vudhb2gbtz"
            },
            {
                "post_id": "ck8r8f7bz000328vufn681f62",
                "tag_id": "ck8r8f7c3000928vu1r2rhkij",
                "_id": "ck8r8f7cg000p28vu4el76sh2"
            },
            {
                "post_id": "ck8r8f7bz000428vuf8157uup",
                "tag_id": "ck8r8f7bx000228vub4zh29at",
                "_id": "ck8r8f7cg000q28vu4du5fsq3"
            },
            {
                "post_id": "ck8r8f7bz000428vuf8157uup",
                "tag_id": "ck8r8f7c3000928vu1r2rhkij",
                "_id": "ck8r8f7cg000s28vucsmc7tsd"
            },
            {
                "post_id": "ck8r8f7c0000528vud963ffcb",
                "tag_id": "ck8r8f7cf000o28vua51kd32g",
                "_id": "ck8r8f7ch000u28vu57671gmi"
            },
            {
                "post_id": "ck8r8f7c0000528vud963ffcb",
                "tag_id": "ck8r8f7cg000r28vuhrgo0e99",
                "_id": "ck8r8f7ch000v28vu8f35hcaz"
            },
            {
                "post_id": "ck8r8f7c2000728vu21ntazvx",
                "tag_id": "ck8r8f7cg000r28vuhrgo0e99",
                "_id": "ck8r8f7cj001028vu4jnhgtr6"
            },
            {
                "post_id": "ck8r8f7c2000728vu21ntazvx",
                "tag_id": "ck8r8f7cf000o28vua51kd32g",
                "_id": "ck8r8f7cj001128vud4utcpvj"
            },
            {
                "post_id": "ck8r8f7c2000728vu21ntazvx",
                "tag_id": "ck8r8f7ci000x28vubuwpcnj4",
                "_id": "ck8r8f7cj001328vu7rvn66ik"
            },
            {
                "post_id": "ck8r8f7c2000728vu21ntazvx",
                "tag_id": "ck8r8f7ci000y28vuauugaezz",
                "_id": "ck8r8f7cj001428vuajgiddeh"
            },
            {
                "post_id": "ck8r8f7c2000828vu3ecq1kys",
                "tag_id": "ck8r8f7bx000228vub4zh29at",
                "_id": "ck8r8f7ck001628vu5nps5c0n"
            },
            {
                "post_id": "ck8r8f7c2000828vu3ecq1kys",
                "tag_id": "ck8r8f7cj000z28vu1x3r1p64",
                "_id": "ck8r8f7ck001728vu845s4m13"
            },
            {
                "post_id": "ck8r8f7c2000828vu3ecq1kys",
                "tag_id": "ck8r8f7c3000928vu1r2rhkij",
                "_id": "ck8r8f7cl001928vu3af56ip9"
            },
            {
                "post_id": "ck8r8f7c4000a28vu3tj9fjio",
                "tag_id": "ck8r8f7bx000228vub4zh29at",
                "_id": "ck8r8f7cm001c28vuchn24rnj"
            },
            {
                "post_id": "ck8r8f7c4000a28vu3tj9fjio",
                "tag_id": "ck8r8f7ck001528vuf9xo5fhu",
                "_id": "ck8r8f7cm001d28vugarg2a9u"
            },
            {
                "post_id": "ck8r8f7c4000a28vu3tj9fjio",
                "tag_id": "ck8r8f7ck001828vu88yy9cv5",
                "_id": "ck8r8f7cn001f28vubk4w84ve"
            },
            {
                "post_id": "ck8r8f7c4000a28vu3tj9fjio",
                "tag_id": "ck8r8f7cl001a28vu6xpf1qy1",
                "_id": "ck8r8f7cn001g28vudnsdhak0"
            },
            {
                "post_id": "ck8r8f7c4000a28vu3tj9fjio",
                "tag_id": "ck8r8f7c3000928vu1r2rhkij",
                "_id": "ck8r8f7cn001i28vueaw316kj"
            },
            {
                "post_id": "ck8r8f7c5000b28vuedrh1m4q",
                "tag_id": "ck8r8f7bx000228vub4zh29at",
                "_id": "ck8r8f7cn001j28vuaxgm2ekp"
            },
            {
                "post_id": "ck8r8f7c5000b28vuedrh1m4q",
                "tag_id": "ck8r8f7c3000928vu1r2rhkij",
                "_id": "ck8r8f7cn001k28vu4tfoht4c"
            },
            {
                "post_id": "ck8r8f7c5000b28vuedrh1m4q",
                "tag_id": "ck8r8f7cj000z28vu1x3r1p64",
                "_id": "ck8r8f7cn001l28vu9fd0a2s1"
            },
            {
                "post_id": "ck8r8f7c5000b28vuedrh1m4q",
                "tag_id": "ck8r8f7cm001e28vu7xrz0u6u",
                "_id": "ck8r8f7co001m28vu5d9o32tc"
            },
            {
                "post_id": "ck8r8f7cb000f28vua94o3g38",
                "tag_id": "ck8r8f7cn001h28vu03527ksg",
                "_id": "ck8r8f7co001n28vu8t7w1lvv"
            }
        ],
        "Tag": [
            {
                "name": "Android",
                "_id": "ck8r8f7bx000228vub4zh29at"
            },
            {
                "name": "ARCore",
                "_id": "ck8r8f7c1000628vud4w14wcu"
            },
            {
                "name": "Kotlin",
                "_id": "ck8r8f7c3000928vu1r2rhkij"
            },
            {
                "name": "台風",
                "_id": "ck8r8f7cc000h28vu8tz4d1pi"
            },
            {
                "name": "JavaScript",
                "_id": "ck8r8f7cf000o28vua51kd32g"
            },
            {
                "name": "Electron",
                "_id": "ck8r8f7cg000r28vuhrgo0e99"
            },
            {
                "name": "TypeScript",
                "_id": "ck8r8f7ci000x28vubuwpcnj4"
            },
            {
                "name": "Node.js",
                "_id": "ck8r8f7ci000y28vuauugaezz"
            },
            {
                "name": "MaterialDesign",
                "_id": "ck8r8f7cj000z28vu1x3r1p64"
            },
            {
                "name": "MediaProjection",
                "_id": "ck8r8f7ck001528vuf9xo5fhu"
            },
            {
                "name": "画面録画",
                "_id": "ck8r8f7ck001828vu88yy9cv5"
            },
            {
                "name": "AndroidQ",
                "_id": "ck8r8f7cl001a28vu6xpf1qy1"
            },
            {
                "name": "NavigationDrawer",
                "_id": "ck8r8f7cm001e28vu7xrz0u6u"
            },
            {
                "name": "その他",
                "_id": "ck8r8f7cn001h28vu03527ksg"
            }
        ]
    }
}